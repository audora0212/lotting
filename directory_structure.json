{
    "__files__": {
        "codes.py": null,
        "directory_structure.json": null
    },
    "app": {
        "__files__": {
            "globals.css": null,
            "icon.ico": null,
            "layout.js": "import Nav from '@/components/Nav'\nimport './globals.css'\nimport Header from '@/components/Header'\nimport RecoilRootProvider from './recoilRootProvider';\nimport { AuthProvider } from '@/utils/context/AuthContext';\n\nexport const metadata = {\n  title: 'LOTTING',\n  description: 'LOTTING SYSTEM 개발중',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <AuthProvider>\n    <html>\n      <head>\n        <script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\n      </head>\n      <body>\n        {true?<Nav />:<></>}\n        {true?<Header />:<></>}\n        <RecoilRootProvider>\n          <main>{children}</main>\n        </RecoilRootProvider>\n      </body>\n    </html></AuthProvider>\n  )\n}\n",
            "page.js": "\"use client\"\n\nimport { Inputbox,PostInputbox,LongInputbox,DropInputbox,FileInputbox } from \"@/components/Inputbox\"\nimport styles from \"@/styles/Home.module.scss\"\n\nconst testlist = [{\n  \"value\" : \"여기에 벨류를 입력하세요\",\n  \"item\" : \"여기에 아이템을 입력하세요\"\n}]\n\nexport default function Home() {\n\n  return (\n      <div >\n        <h1>123</h1>\n      </div>\n    )\n}\n",
            "recoilRootProvider.js": "'use client'\n\nimport { RecoilRoot } from \"recoil\";\n\nexport default function RecoilRootProvider({children}){\n    return <RecoilRoot>{children}</RecoilRoot>\n}"
        },
        "companydeposit": {
            "__files__": {
                "page.js": "\"use client\";\n// src/app/inputmoney/deposit/[id]/page.js\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"@/styles/DepositAdd.module.scss\";\nimport { InputboxGray } from \"@/components/Inputbox\";\nimport Link from \"next/link\";\nimport Swal from \"sweetalert2\";\n\nimport {\n  fetchDepositHistoriesByCustomerId,\n  createDepositHistory,\n  deleteDepositHistory,\n} from \"@/utils/api\";\n\n// 숫자 입력란에 대해 자동으로 콤마를 추가하는 헬퍼 함수\nconst formatNumberWithCommas = (value) => {\n  if (value === \"\" || isNaN(Number(value))) return \"\";\n  return Number(value).toLocaleString();\n};\n\nfunction CompanyDepositPage() {\n  // 고객 id를 \"1\"로 고정\n  const userId = \"1\";\n\n  // 초기 formData: 적요는 description, 비고는 remarks로 분리합니다.\n  const [formData, setFormData] = useState({\n    transactionDateTime: \"\",\n    description: \"\", // \"적요\" → 백엔드의 description 필드에 저장됨\n    details: \"\",\n    remarks: \"\", // \"비고(메모)\"\n    contractor: \"\",\n    withdrawnAmount: \"\",\n    depositAmount: \"\",\n    balanceAfter: \"\",\n    branch: \"\",\n    account: \"\",\n    depositPhase1: \"\",\n    customer: { id: userId },\n  });\n\n  const [depositData, setDepositData] = useState([]);\n\n  // 고객 id \"1\"에 해당하는 입금내역 페칭\n  useEffect(() => {\n    const loadDeposits = async () => {\n      try {\n        const data = await fetchDepositHistoriesByCustomerId(userId);\n        setDepositData(data);\n      } catch (error) {\n        console.error(\"Error fetching deposits:\", error);\n        setDepositData([]);\n      }\n    };\n    loadDeposits();\n  }, [userId]);\n\n  // 숫자 입력란으로 사용할 필드 목록\n  const numericFields = [\"withdrawnAmount\", \"depositAmount\", \"balanceAfter\"];\n\n  const handleInputChange = (e) => {\n    let { name, value } = e.target;\n    if (numericFields.includes(name)) {\n      // 입력된 값에서 콤마 제거 후 숫자로 파싱, 그리고 바로 toLocaleString 적용\n      let numericValue = value.replace(/,/g, \"\");\n      if (numericValue === \"\") {\n        setFormData((prev) => ({ ...prev, [name]: \"\" }));\n      } else if (!isNaN(Number(numericValue))) {\n        const formatted = formatNumberWithCommas(numericValue);\n        setFormData((prev) => ({ ...prev, [name]: formatted }));\n      }\n    } else {\n      setFormData((prev) => ({ ...prev, [name]: value }));\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    // 필수 입력 필드 유효성 검사:\n    if (\n      !formData.transactionDateTime.trim() ||\n      !formData.details.trim() ||\n      !formData.contractor.trim() ||\n      (\n        !formData.withdrawnAmount.trim() &&\n        !formData.depositAmount.trim()\n      )\n    ) {\n      Swal.fire({\n        icon: \"warning\",\n        title: \"필수 항목 누락\",\n        text: \"거래일시, 기재내용, 계약자, 그리고 찾으신 금액 또는 맡기신 금액 중 하나는 필수 입력 필드입니다.\",\n      });\n      return;\n    }\n\n    // 전송 전, 숫자형 필드는 콤마를 제거하여 순수 숫자 문자열로 변환\n    const submitData = {\n      ...formData,\n      withdrawnAmount: formData.withdrawnAmount.replace(/,/g, \"\"),\n      depositAmount: formData.depositAmount.replace(/,/g, \"\"),\n      balanceAfter: formData.balanceAfter.replace(/,/g, \"\"),\n    };\n    console.log(\"📌 최종 전송 데이터:\", JSON.stringify(submitData, null, 2));\n    try {\n      await createDepositHistory(submitData);\n      Swal.fire({\n        icon: \"success\",\n        title: \"성공\",\n        text: \"데이터가 성공적으로 저장되었습니다.\",\n      });\n      \n      const updatedDeposits = await fetchDepositHistoriesByCustomerId(userId);\n      setDepositData(updatedDeposits);\n    } catch (error) {\n      console.error(\"Error creating deposit history:\", error);\n      Swal.fire({\n        icon: \"error\",\n        title: \"실패\",\n        text: \"데이터 저장에 실패했습니다.\",\n      });\n      \n    }\n  };\n\n  const handleDelete = async (depositId) => {\n    Swal.fire({\n      icon: \"warning\",\n      title: \"정말 삭제하시겠습니까?\",\n      showCancelButton: true,\n      confirmButtonText: \"삭제\",\n      cancelButtonText: \"취소\",\n    }).then(async (result) => {\n      if (result.isConfirmed) {\n        try {\n          await deleteDepositHistory(depositId);\n          Swal.fire({\n            icon: \"success\",\n            title: \"삭제되었습니다.\",\n          });\n          const updatedDeposits = await fetchDepositHistoriesByCustomerId(userId);\n          setDepositData(updatedDeposits);\n        } catch (error) {\n          console.error(\"Error deleting deposit history:\", error);\n          Swal.fire({\n            icon: \"error\",\n            title: \"삭제에 실패했습니다.\",\n          });\n        }\n      }\n    });\n  };\n\n  return (\n    <div className={styles.container}>\n      <h2>거래내역 추가 (기업 기록용)</h2>\n      <form onSubmit={handleSubmit}>\n        {/* 상단 입력란: 거래일시, 적요(description), 기재내용, 비고(remarks) */}\n        <div className={styles.infoContainer}>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>거래일시</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"datetime-local\"\n                name=\"transactionDateTime\"\n                value={formData.transactionDateTime}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>적요</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"description\"\n                value={formData.description}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>기재내용</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"details\"\n                value={formData.details}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 중단 입력란: 계약자, depositPhase1, 찾으신 금액, 맡기신 금액 */}\n        <div className={styles.infoContainer}>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>계약자</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"contractor\"\n                value={formData.contractor}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          {/* depositPhase1 입력란 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>1차</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"depositPhase1\"\n                value={formData.depositPhase1}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>찾으신 금액</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"withdrawnAmount\"\n                value={formData.withdrawnAmount}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>맡기신 금액</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"depositAmount\"\n                value={formData.depositAmount}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 하단 입력란: 거래 후 잔액, 취급점, 계좌, 비고 */}\n        <div className={styles.infoContainer}>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>거래 후 잔액</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"balanceAfter\"\n                value={formData.balanceAfter}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>취급점</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"branch\"\n                value={formData.branch}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>계좌</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"account\"\n                value={formData.account}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          {/* 새로 추가: 비고 입력란 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>비고</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"remarks\"\n                value={formData.remarks}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className={styles.buttonContainer}>\n          <button type=\"submit\" className={styles.contractButton}>\n            추가하기\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default CompanyDepositPage;\n"
            }
        },
        "control": {
            "__files__": {
                "page.js": "export default function Control() {\n    return (\n        <>\n          <h1>Control</h1>\n        </>\n      )\n  }\n  "
            },
            "chasu": {
                "__files__": {
                    "page.js": "\"use client\"\n\nimport { Inputbox, Inputbox_L, Inputbox_M, PostInputbox, LongInputbox, DropInputbox, FileInputbox, Spanbox } from \"@/components/Inputbox\"\nimport { PaymentScheduleButton, ToggleButton, SearchButton, Button_Y, Button_N } from \"@/components/Button\"\nimport styles from \"@/styles/chasu.module.scss\";\nimport { useState, useEffect } from \"react\"; // useEffect와 useState 추가\nimport { BsDatabase } from \"react-icons/bs\";\nimport { CgSearch } from \"react-icons/cg\";\nimport { useForm } from 'react-hook-form';\n\nexport default function chasu() {\n    const { register, watch, handleSubmit } = useForm();\n\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    const [isElementVisible, setIsElementVisible] = useState(false);\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const element = document.getElementById('targetElement'); // targetElement의 ID를 가져옴\n            if (element) {\n                const elementTop = element.getBoundingClientRect().top;\n                const windowHeight = window.innerHeight;\n                setIsElementVisible(elementTop < windowHeight);\n            }\n        };\n\n        window.addEventListener('scroll', handleScroll);\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, []);\n\n    return (\n        <div className={styles.Container}>\n            <div className={styles.Title}>\n                <div className = {styles.TitleFont1}>일반납부일정 확인</div>\n                <div className = {styles.TitleFont2}>일반납부일정 정보를 입력합니다.</div>\n            </div>\n            <div className={styles.MainBody}>\n                <div className={styles.MainTop}></div>\n                <div className={styles.MainTitle1}>\n                    <div className={styles.MainTitle1_head}>\n                        <div className={styles.MainTitleFont}>\n                            <br />층별 군\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            <br />1차\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            <br />2차\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            <br />3차\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            20%<br />4차\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            15%<br />5차\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            20%<br />6차\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            20%<br />7차\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            15%<br />8차\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            10%<br />9차\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            <br />합계\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            <br />납입비율\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle1_body}>\n                        <div className={styles.MainTitleFont}>\n                            <br />남은금원\n                        </div>\n                    </div>\n                </div>\n\n                <div className={styles.MainTitle2}>\n                    <div className={styles.MainTitle2_head}>\n                        <div className={styles.MainTitleFont}>\n                            <br />군\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_head}>\n                        <div className={styles.MainTitleFont}>\n                            <br />층\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            <br />가입 시\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            가입 후<br />1개월\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            가입 후<br />2개월\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            협동조합<br />설립 시\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            건축심의<br />접수 시\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            건축심의<br />완료 시\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            사업승인<br />신청 시\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            사업승인<br />완료 시\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            <br />창공 시\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            -<br />\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            -<br />\n                        </div>\n                    </div>\n                    <div className={styles.MainTitle2_body}>\n                        <div className={styles.MainTitleFont}>\n                            부담금+<br />업무대행비\n                        </div>\n                    </div>\n                </div>\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                <div className={styles.ExcelContentsBody}>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>44가</div>\n                    </div>\n                    <div className={styles.ExcelContent_Head}>\n                        <div className={styles.ExcelContentFont}>1~6</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>1,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>9,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>5,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>12,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>11,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>16,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>7,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>8,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>85,000</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>40.37%</div>\n                    </div>\n                    <div className={styles.ExcelContent_Body}>\n                        <div className={styles.ExcelContentFont}>80,000</div>\n                    </div>\n                </div>\n                {/* 한덩어리 */}\n\n                \n            </div>\n        </div>\n    );\n};\n"
                }
            },
            "chasupay": {
                "__files__": {
                    "page.js": "\"use client\"\n\nimport { Inputbox, Inputbox_L, Inputbox_M, PostInputbox, LongInputbox, DropInputbox, FileInputbox, Spanbox } from \"@/components/Inputbox\"\nimport { PaymentScheduleButton, ModifyButton,ChecButton,ToggleButton, SearchButton, Button_Y, Button_N } from \"@/components/Button\"\nimport styles from \"@/styles/chasupay.module.scss\";\nimport { useState, useEffect } from \"react\"; // useEffect와 useState 추가\nimport { BsDatabase } from \"react-icons/bs\";\nimport { CgSearch } from \"react-icons/cg\";\nimport { useForm } from 'react-hook-form';\n\nexport default function chasupay() {\n    const { register, watch, handleSubmit } = useForm();\n\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    const [isElementVisible, setIsElementVisible] = useState(false);\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const element = document.getElementById('targetElement'); // targetElement의 ID를 가져옴\n            if (element) {\n                const elementTop = element.getBoundingClientRect().top;\n                const windowHeight = window.innerHeight;\n                setIsElementVisible(elementTop < windowHeight);\n            }\n        };\n\n        window.addEventListener('scroll', handleScroll);\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, []);\n\n    return (\n        <div className={styles.Container}>\n            <form onSubmit={handleSubmit(onSubmit)}>\n            <div className={styles.Mainbody}>\n            <div className={styles.Title}>\n                <div className = {styles.TitleFont1}>일반납부일정 확인</div>\n                <div className = {styles.TitleFont2}>일반납부일정 정보를 입력합니다.</div>\n            </div>\n            <div className = {styles.Category}>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.CategoryFont}>차수</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.CategoryFont}>생성일</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.CategoryFont}>생성자</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.CategoryFont}>코멘트</div>\n                </div>\n            </div>\n            <div className = {styles.Line}></div>\n            <div className = {styles.Category}>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>1-1차</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>23/12/29</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>이승준</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>특이사항 없음</div>\n                </div>\n                <div className = {styles.Categorybody}></div>\n                <div className = {styles.Buttonbody}>\n                    <ChecButton>\n                        <div className ={styles.ButtonFont}>확인하기</div>\n                    </ChecButton>\n                </div>\n            </div>\n            <div className = {styles.Line}></div>\n\n            <div className = {styles.Category}>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>1-1차</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>23/12/29</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>이승준</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>특이사항 없음</div>\n                </div>\n                <div className = {styles.Categorybody}></div>\n                <div className = {styles.Buttonbody}>\n                    <ChecButton>\n                        <div className ={styles.ButtonFont}>확인하기</div>\n                    </ChecButton>\n                </div>\n            </div>\n            <div className = {styles.Line}></div>\n\n            <div className = {styles.Category}>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>1-1차</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>23/12/29</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>이승준</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>특이사항 없음</div>\n                </div>\n                <div className = {styles.Categorybody}></div>\n                <div className = {styles.Buttonbody}>\n                    <ChecButton>\n                        <div className ={styles.ButtonFont}>확인하기</div>\n                    </ChecButton>\n                </div>\n            </div>\n            <div className = {styles.Line}></div>\n\n            <div className = {styles.Category}>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>1-1차</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>23/12/29</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>이승준</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>특이사항 없음</div>\n                </div>\n                <div className = {styles.Categorybody}></div>\n                <div className = {styles.Buttonbody}>\n                    <ChecButton>\n                        <div className ={styles.ButtonFont}>확인하기</div>\n                    </ChecButton>\n                </div>\n            </div>\n            <div className = {styles.Line}></div>\n\n            <div className = {styles.Category}>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>1-1차</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>23/12/29</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>이승준</div>\n                </div>\n                <div className = {styles.Categorybody}>\n                    <div className = {styles.BodyFont}>특이사항 없음</div>\n                </div>\n                <div className = {styles.Categorybody}></div>\n                <div className = {styles.Buttonbody}>\n                    <ChecButton>\n                        <div className ={styles.ButtonFont}>확인하기</div>\n                    </ChecButton>\n                </div>\n            </div>\n            <div className = {styles.Line}></div>\n            \n            </div>\n            </form>\n        </div>\n    );\n};\n"
                }
            }
        },
        "create": {
            "__files__": {
                "page.js": "\"use client\";\nimport styles from \"@/styles/Create.module.scss\";\nimport Swal from \"sweetalert2\";\nimport {\n  Inputbox,\n  PostInputbox,\n  InputAreabox,\n  DropInputbox,\n  FileInputbox,\n  Checkbox,\n  MGMInputbox,\n} from \"@/components/Inputbox\";\nimport { Button_Y } from \"@/components/Button\";\nimport withAuth from \"@/utils/hoc/withAuth\";\n\nimport { useForm, Controller } from \"react-hook-form\";\nimport { useState, useEffect } from \"react\";\nimport {\n  createFile,\n  newIdGenerate,\n  createUser,\n  checkIdExists,\n} from \"@/utils/api\";\nimport { useRouter } from \"next/navigation\";\n\nimport {\n  banklist,\n  classificationlist,\n  typeidlist,\n  typelist,\n  grouplist,\n  turnlist,\n} from \"@/components/droplistdata\";\n\nfunction Create() {\n  const router = useRouter();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    watch,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const [newid, setNewid] = useState(\"\");\n  const [idExists, setIdExists] = useState(false);\n  const [checkingId, setCheckingId] = useState(false);\n  const [formattedRegisterPrice, setFormattedRegisterPrice] = useState(\"\");\n  const [formattedDepositAmmount, setFormattedDepositAmmount] = useState(\"\");\n\n  // 파일 업로드 체크박스 상태\n  const [isupload, setIsupload] = useState({\n    isuploaded: false,\n    sealcertificateprovided: false,\n    selfsignatureconfirmationprovided: false,\n    commitmentletterprovided: false,\n    idcopyprovided: false,\n    freeoption: false,\n    forfounding: false,\n    generalmeetingconsentformprovided: false,\n    preferenceattachment: false,\n    prizeattachment: false,\n    exemption7: false,\n    investmentfile: false,\n    contract: false,\n  });\n\n  const [file, setFile] = useState(null);\n\n  // 휴대폰 번호 \"raw\" 숫자값을 저장 (하이픈 없이 최대 8자리)\n  const [phoneDigits, setPhoneDigits] = useState(\"\");\n  // 화면에 보여줄 값은 phoneDigits를 기반으로 계산 (항상 \"010)\" 접두어 붙임)\n  const computedPhoneDisplay =\n    \"010)\" +\n    (phoneDigits.length > 4\n      ? phoneDigits.slice(0, 4) + \"-\" + phoneDigits.slice(4)\n      : phoneDigits);\n\n  useEffect(() => {\n    // 서버에서 다음 관리번호 가져오기\n    const getData = async () => {\n      try {\n        const nextId = await newIdGenerate();\n        setNewid(nextId);\n        setValue(\"id\", nextId);\n      } catch (error) {\n        console.error(\"관리번호를 가져오는데 실패했습니다:\", error);\n      }\n    };\n    getData();\n  }, [setValue]);\n\n  /** 관리번호 중복 체크 */\n  const handleIdChange = async (e) => {\n    const enteredId = e.target.value;\n    setValue(\"id\", enteredId);\n\n    if (enteredId) {\n      setCheckingId(true);\n      try {\n        const exists = await checkIdExists(enteredId);\n        setIdExists(exists);\n      } catch (error) {\n        console.error(\"관리번호 중복 체크 오류:\", error);\n        setIdExists(true);\n      } finally {\n        setCheckingId(false);\n      }\n    } else {\n      setIdExists(false);\n    }\n  };\n\n  /** 체크박스 변화 */\n  const handleCheckboxChange = (e) => {\n    const { name, checked } = e.target;\n    setIsupload((prev) => ({\n      ...prev,\n      [name]: checked,\n    }));\n  };\n\n  /** 파일 업로드 변화 */\n  const handleFileChange = (e) => {\n    const { files } = e.target;\n    if (files && files.length > 0) {\n      const selectedFile = files[0];\n      setFile(selectedFile);\n      setIsupload((prev) => ({\n        ...prev,\n        isuploaded: true,\n      }));\n    }\n  };\n\n  /** 숫자 천단위 콤마 처리 */\n  const formatNumberWithCommas = (value) => {\n    const numericValue = value.replace(/[^0-9]/g, \"\");\n    if (!numericValue) return \"\";\n    return parseInt(numericValue, 10).toLocaleString();\n  };\n\n  const handleRegisterPriceChange = (e) => {\n    const formattedValue = formatNumberWithCommas(e.target.value);\n    setFormattedRegisterPrice(formattedValue);\n    const rawValue = formattedValue.replace(/,/g, \"\");\n    setValue(\"registerprice\", rawValue ? parseInt(rawValue, 10) : null);\n  };\n\n  const handleDepositAmmountChange = (e) => {\n    const formattedValue = formatNumberWithCommas(e.target.value);\n    setFormattedDepositAmmount(formattedValue);\n    const rawValue = formattedValue.replace(/,/g, \"\");\n    setValue(\"deposits.depositammount\", rawValue ? parseInt(rawValue, 10) : null);\n  };\n\n  /**\n   * 휴대폰 번호 포맷팅 핸들러  \n   * e.target.value 에서 \"010)\" 접두어를 제거하고, 숫자만 추출하여 최대 8자리까지 저장한 후,\n   * 화면에는 \"010)\" + (숫자가 4자리 이상이면 중간에 하이픈 추가) 로 표시함.\n   */\n  const handlePhoneNumberChange = (e, onChange) => {\n    let input = e.target.value;\n    // 만약 입력값에서 \"010)\" 접두어가 있다면 제거\n    if (input.startsWith(\"010)\")) {\n      input = input.slice(4);\n    }\n    // 숫자만 추출\n    let digits = input.replace(/\\D/g, \"\");\n    // 최대 8자리까지\n    digits = digits.substring(0, 8);\n    setPhoneDigits(digits);\n    onChange(digits);\n  };\n\n  /** 폼 검증 오류 처리 */\n  const onError = (errors) => {\n    console.log(\"검증 오류:\", errors);\n\n    const errorMessages = [];\n    for (const field in errors) {\n      if (errors.hasOwnProperty(field)) {\n        if (errors[field].message) {\n          errorMessages.push(errors[field].message);\n        } else if (typeof errors[field] === \"object\" && errors[field] !== null) {\n          for (const subField in errors[field]) {\n            if (\n              errors[field].hasOwnProperty(subField) &&\n              errors[field][subField].message\n            ) {\n              errorMessages.push(errors[field][subField].message);\n            }\n          }\n        }\n      }\n    }\n\n    Swal.fire({\n      icon: \"warning\",\n      title: \"필수 항목 누락\",\n      text: errorMessages.join(\"\\n\"),\n    });\n  };\n\n  /** 폼 제출 */\n  const onSubmit = async (data) => {\n    try {\n      // 파일 업로드 처리\n      let uploadedFileInfo = \"\";\n      if (file) {\n        const uploadResponse = await createFile(file, parseInt(data.id, 10));\n        uploadedFileInfo = uploadResponse.data;\n      }\n\n      // 숫자 변환\n      const parsedData = {\n        ...data,\n        id: parseInt(data.id, 10),\n        registerprice: parseInt(data.registerprice, 10),\n        CustomerData: {\n          ...data.CustomerData,\n          resnumfront: parseInt(data.CustomerData.resnumfront, 10),\n          resnumback: parseInt(data.CustomerData.resnumback, 10),\n        },\n        deposits: {\n          depositdate: data.deposits.depositdate,\n          depositammount: parseInt(data.deposits.depositammount, 10),\n        },\n      };\n\n      // 첨부 파일 정보\n      const attachments = {\n        ...isupload,\n        fileinfo: uploadedFileInfo,\n        prizename: data.prizename,\n        prizedate: data.prizedate,\n      };\n\n      // 최종 전송할 데이터\n      const customerData = {\n        id: parsedData.id,\n        customertype: data.customertype,\n        type: data.type,\n        groupname: data.groupname,\n        turn: data.turn,\n        batch: data.batch,\n        registerdate: parsedData.registerdate,\n        registerprice: parsedData.registerprice,\n        registerpath: data.registerpath,\n        additional: data.additional,\n        prizewinning: data.prizewinning,\n        votemachine: data.votemachine,\n        CustomerData: parsedData.CustomerData,\n        LegalAddress: data.LegalAddress,\n        Postreceive: data.Postreceive,\n        Financial: {\n          ...data.Financial,\n        },\n        deposits: parsedData.deposits,\n        attachments: attachments,\n        dahim: data.dahim,\n        MGM: data.MGM,\n        firstemp: data.firstemp,\n        secondemp: data.secondemp,\n        responsible: data.responsible,\n        meetingattend: data.meetingattend,\n        agenda: data.agenda,\n      };\n\n      console.log(customerData);\n      const createUserResponse = await createUser(customerData);\n\n      Swal.fire({\n        icon: \"success\",\n        title: \"회원정보가 입력되었습니다.\",\n        text:\n          \"관리번호 : \" +\n          createUserResponse.data.id +\n          \"/ 회원명 : \" +\n          parsedData.CustomerData.name,\n      });\n\n      // 폼 리셋\n      reset();\n      setFile(null);\n      setIsupload({\n        isuploaded: false,\n        sealcertificateprovided: false,\n        selfsignatureconfirmationprovided: false,\n        commitmentletterprovided: false,\n        idcopyprovided: false,\n        freeoption: false,\n        forfounding: false,\n        generalmeetingconsentformprovided: false,\n        preferenceattachment: false,\n        prizeattachment: false,\n        exemption7: false,\n        investmentfile: false,\n        contract: false,\n      });\n      setIdExists(false);\n      setFormattedRegisterPrice(\"\");\n      setFormattedDepositAmmount(\"\");\n      setPhoneDigits(\"\");\n\n      if (typeof window !== \"undefined\") {\n        window.scrollTo(0, 0);\n      }\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      let errorMessage =\n        \"회원 정보를 입력하는 동안 오류가 발생했습니다. 다시 시도해주세요.\";\n      if (error.response && error.response.data && error.response.data.message) {\n        errorMessage = error.response.data.message;\n      }\n      Swal.fire({\n        icon: \"error\",\n        title: \"회원정보 입력 실패\",\n        text: errorMessage,\n      });\n    }\n  };\n\n  // 사은품 체크박스\n  const prizeattachmentChecked = watch(\"prizeattachment\", false);\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit(onSubmit, onError)}>\n        {/* 1. 회원정보 */}\n        <h3>회원정보</h3>\n        <div className={styles.content_container}>\n          {/* 관리번호 */}\n          <div className={styles.Font}>\n            <label htmlFor=\"id\"></label>\n            <Inputbox\n              type=\"number\"\n              id=\"id\"\n              defaultValue={newid}\n              {...register(\"id\", { required: \"관리번호를 입력해주세요.\" })}\n              onChange={handleIdChange}\n              isError={!!errors.id || idExists}\n            />\n            {checkingId && <span className={styles.checking}>확인 중...</span>}\n            {!checkingId && !idExists && watch(\"id\") && (\n              <span className={styles.availableText}> 사용가능</span>\n            )}\n            {idExists && (\n              <span className={styles.errorText}>사용중인 관리번호</span>\n            )}\n            {errors.id && (\n              <span className={styles.errorText}>{errors.id.message}</span>\n            )}\n          </div>\n          <h1></h1>\n\n          {/* 이름, 휴대폰, 주민번호 */}\n          <div>\n            <Inputbox\n              type=\"text\"\n              placeholder=\"이름 *\"\n              register={register(\"CustomerData.name\", {\n                required: \"이름을 입력해주세요.\",\n              })}\n              isError={!!errors.CustomerData?.name}\n            />\n          </div>\n          <div>\n            <Controller\n              name=\"CustomerData.phone\"\n              control={control}\n              defaultValue=\"\"\n              rules={{ required: \"휴대폰 번호를 입력해주세요.\" }}\n              render={({ field: { onChange } }) => (\n                <Inputbox\n                  type=\"tel\"\n                  placeholder=\"휴대폰 번호 *\"\n                  value={computedPhoneDisplay}\n                  onChange={(e) => handlePhoneNumberChange(e, onChange)}\n                  isError={!!errors.CustomerData?.phone}\n                />\n              )}\n            />\n          </div>\n          <div>\n            <Inputbox\n              type=\"number\"\n              placeholder=\"주민번호 앞자리 *\"\n              register={register(\"CustomerData.resnumfront\", {\n                required: \"주민번호 앞자리를 입력해주세요.\",\n              })}\n              isError={!!errors.CustomerData?.resnumfront}\n            />\n          </div>\n          <div>\n            <Inputbox\n              type=\"number\"\n              placeholder=\"주민번호 뒷자리 *\"\n              register={register(\"CustomerData.resnumback\", {\n                required: \"주민번호 뒷자리를 입력해주세요.\",\n              })}\n              isError={!!errors.CustomerData?.resnumback}\n            />\n          </div>\n          <div>\n            <Inputbox\n              type=\"email\"\n              placeholder=\"이메일\"\n              register={register(\"CustomerData.email\", {})}\n              isError={!!errors.CustomerData?.email}\n            />\n          </div>\n\n          {/* 분류, 가입경로, 은행, 계좌, 예금주 */}\n          <div>\n            <DropInputbox\n              list={classificationlist}\n              register={register(\"customertype\", {\n                required: \"분류를 선택해주세요.\",\n              })}\n              placeholder=\"분류 *\"\n              isError={!!errors.customertype}\n            />\n          </div>\n          <div>\n            <Inputbox\n              type=\"text\"\n              placeholder=\"가입경로\"\n              register={register(\"registerpath\", {})}\n              isError={!!errors.registerpath}\n            />\n          </div>\n          <div>\n            <DropInputbox\n              list={banklist}\n              register={register(\"Financial.bankname\", {\n                required: \"은행을 선택해주세요.\",\n              })}\n              placeholder=\"은행 *\"\n              isError={!!errors.Financial?.bankname}\n            />\n          </div>\n          <div>\n            <Inputbox\n              type=\"text\"\n              placeholder=\"계좌번호 *\"\n              register={register(\"Financial.accountnum\", {\n                required: \"계좌번호를 입력해주세요.\",\n              })}\n              isError={!!errors.Financial?.accountnum}\n            />\n          </div>\n          <div>\n            <Inputbox\n              type=\"text\"\n              placeholder=\"예금주 *\"\n              register={register(\"Financial.accountholder\", {\n                required: \"예금주를 입력해주세요.\",\n              })}\n              isError={!!errors.Financial?.accountholder}\n            />\n          </div>\n\n          {/* 법정주소, 우편물 주소지 */}\n          <div className={styles.InputboxField}>\n            <div className={styles.InputFont}>법정주소 *</div>\n            <PostInputbox\n              register={register}\n              setValue={setValue}\n              namePrefix=\"LegalAddress\"\n              postcodeName=\"LegalAddress.postnumber\"\n              addressName=\"LegalAddress.post\"\n              isError={\n                !!errors.LegalAddress?.postnumber ||\n                !!errors.LegalAddress?.post ||\n                !!errors.LegalAddress?.detailaddress\n              }\n            />\n            <Inputbox\n              type=\"text\"\n              placeholder=\"법정주소 상세 *\"\n              register={register(\"LegalAddress.detailaddress\", {\n                required: \"법정주소를 입력해주세요.\",\n              })}\n              isError={!!errors.LegalAddress?.detailaddress}\n            />\n          </div>\n          <div className={styles.InputboxField}>\n            <div className={styles.InputFont}>우편물 주소지 *</div>\n            <PostInputbox\n              register={register}\n              setValue={setValue}\n              namePrefix=\"Postreceive\"\n              postcodeName=\"Postreceive.postnumberreceive\"\n              addressName=\"Postreceive.postreceive\"\n              isError={\n                !!errors.Postreceive?.postnumberreceive ||\n                !!errors.Postreceive?.postreceive ||\n                !!errors.Postreceive?.detailaddressreceive\n              }\n            />\n            <Inputbox\n              type=\"text\"\n              placeholder=\"우편물 주소지 상세 *\"\n              register={register(\"Postreceive.detailaddressreceive\", {\n                required: \"우편물 주소지를 입력해주세요.\",\n              })}\n              isError={!!errors.Postreceive?.detailaddressreceive}\n            />\n          </div>\n        </div>\n\n        {/* 2. 관리정보 */}\n        <h3>관리정보</h3>\n        <div className={styles.mainbody}>\n          <div className={styles.content_body}>\n            <div className={styles.content_body2}>\n              <DropInputbox\n                list={typeidlist}\n                register={register(\"batch\", {\n                  required: \"제출 순번을 선택해주세요.\",\n                })}\n                placeholder=\"제출 순번 *\"\n                isError={!!errors.batch}\n              />\n              <DropInputbox\n                list={typelist}\n                register={register(\"type\", {\n                  required: \"유형을 선택해주세요.\",\n                })}\n                placeholder=\"유형 *\"\n                isError={!!errors.type}\n              />\n            </div>\n            <div className={styles.content_body2}>\n              <DropInputbox\n                list={grouplist}\n                register={register(\"groupname\", {\n                  required: \"그룹을 선택해주세요.\",\n                })}\n                placeholder=\"그룹 *\"\n                isError={!!errors.groupname}\n              />\n              <DropInputbox\n                list={turnlist}\n                register={register(\"turn\", {\n                  required: \"순번을 선택해주세요.\",\n                })}\n                placeholder=\"순번 *\"\n                isError={!!errors.turn}\n              />\n            </div>\n          </div>\n\n          {/* 가입일자, 가입가 */}\n          <div className={styles.mainbody}>\n            <div className={styles.content_body}>\n              <div className={styles.content_body2}>\n                <div className={styles.dateInputContainer}>\n                  <label className={styles.dateLabel}>가입일자 *</label>\n                  <Inputbox\n                    type=\"date\"\n                    register={register(\"registerdate\", {\n                      required: \"가입일자를 입력해주세요.\",\n                    })}\n                    isError={!!errors.registerdate}\n                  />\n                </div>\n              </div>\n              <div className={styles.content_body2}>\n                <Inputbox\n                  type=\"text\"\n                  placeholder=\"가입가 *\"\n                  value={formattedRegisterPrice}\n                  onChange={handleRegisterPriceChange}\n                  isError={!!errors.registerprice}\n                />\n              </div>\n            </div>\n\n            {/* 예약금 납입일자, 예약금 */}\n            <div className={styles.content_body}>\n              <div className={styles.content_body2}>\n                <div className={styles.dateInputContainer}>\n                  <label className={styles.dateLabel}>예약금 납입일자 *</label>\n                  <Inputbox\n                    type=\"date\"\n                    register={register(\"deposits.depositdate\", {\n                      required: \"예약금 납입일자를 입력해주세요.\",\n                    })}\n                    isError={!!errors.deposits?.depositdate}\n                  />\n                </div>\n              </div>\n              <div className={styles.content_body2}>\n                <Inputbox\n                  type=\"text\"\n                  placeholder=\"예약금 *\"\n                  value={formattedDepositAmmount}\n                  onChange={handleDepositAmmountChange}\n                  isError={!!errors.deposits?.depositammount}\n                />\n              </div>\n            </div>\n\n            {/* 신탁사 제출일자 -> Financial.trustcompanydate */}\n            <div className={styles.content_body}>\n              <div className={styles.content_body2}>\n                <div className={styles.inputRow}>\n                  <div className={styles.inputLabel}>신탁사 제출일자 *</div>\n                  <div className={styles.dateInputContainer}>\n                    <Inputbox\n                      type=\"date\"\n                      register={register(\"Financial.trustcompanydate\", {})}\n                      isError={!!errors.Financial?.trustcompanydate}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* 체크박스들 */}\n            <div className={styles.content_body}>\n              <div className={styles.content_body3}>\n                <Checkbox\n                  label=\"7차 면제\"\n                  name=\"exemption7\"\n                  onChange={handleCheckboxChange}\n                  register={register(\"exemption7\")}\n                  isError={!!errors.exemption7}\n                />\n              </div>\n              <div className={styles.content_body3}>\n                <Checkbox\n                  label=\"출자금\"\n                  name=\"investmentfile\"\n                  onChange={handleCheckboxChange}\n                  register={register(\"investmentfile\")}\n                  isError={!!errors.investmentfile}\n                />\n              </div>\n              <div className={styles.content_body3}>\n                <Checkbox\n                  label=\"지산A동 계약서\"\n                  name=\"contract\"\n                  onChange={handleCheckboxChange}\n                  register={register(\"contract\")}\n                  isError={!!errors.contract}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 3. 다힘 */}\n        <h3>다힘</h3>\n        <div className={styles.mainbody}>\n          <div className={styles.content_body}>\n            <div className={styles.content_body2}>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"시상\"\n                register={register(\"dahim.dahimsisang\")}\n                isError={!!errors.dahim?.dahimsisang}\n              />\n            </div>\n            <div className={styles.content_body2}>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"6/30선지급\"\n                register={register(\"dahim.dahimprepaid\")}\n                isError={!!errors.dahim?.dahimprepaid}\n              />\n            </div>\n          </div>\n          <div className={styles.content_body}>\n            <div className={styles.content_body2}>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"1회차청구\"\n                register={register(\"dahim.dahimfirst\")}\n                isError={!!errors.dahim?.dahimfirst}\n              />\n            </div>\n            <div className={styles.content_body2}>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"금액(만원)\"\n                register={register(\"dahim.dahimfirstpay\")}\n                isError={!!errors.dahim?.dahimfirstpay}\n              />\n            </div>\n          </div>\n          <div className={styles.content_body}>\n            <div className={styles.content_body2}>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"2회차청구\"\n                register={register(\"dahim.dahimsecond\")}\n                isError={!!errors.dahim?.dahimsecond}\n              />\n            </div>\n            <div className={styles.content_body2}>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"금액\"\n                register={register(\"dahim.dahimsecondpay\")}\n                isError={!!errors.dahim?.dahimsecondpay}\n              />\n            </div>\n          </div>\n\n          {/* 날짜들 (첫/두/세번째) */}\n          <div className={styles.content_body}>\n            <div className={styles.content_body3}>\n              <div className={styles.dateInputContainer}>\n                <label className={styles.dateLabel}>일자(첫번째)</label>\n                <MGMInputbox\n                  type=\"date\"\n                  register={register(\"dahim.dahimdate\")}\n                  isError={!!errors.dahim?.dahimdate}\n                />\n              </div>\n            </div>\n            <div className={styles.content_body3}>\n              <div className={styles.dateInputContainer}>\n                <label className={styles.dateLabel}>일자(두번째)</label>\n                <MGMInputbox\n                  type=\"date\"\n                  register={register(\"dahim.dahimdate2\")}\n                  isError={!!errors.dahim?.dahimdate2}\n                />\n              </div>\n            </div>\n            <div className={styles.content_body3}>\n              <div className={styles.dateInputContainer}>\n                <label className={styles.dateLabel}>일자(세번째)</label>\n                <MGMInputbox\n                  type=\"date\"\n                  register={register(\"dahim.dahimdate3\")}\n                  isError={!!errors.dahim?.dahimdate3}\n                />\n              </div>\n            </div>\n          </div>\n          <div className={styles.content_body}>\n            <div className={styles.content_body2}>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"합계\"\n                register={register(\"dahim.dahimsum\")}\n                isError={!!errors.dahim?.dahimsum}\n              />\n            </div>\n            <div className={styles.content_body2}>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"출처\"\n                register={register(\"dahim.dahimsource\")}\n                isError={!!errors.dahim?.dahimsource}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 4. 부속서류 */}\n        <h3>부속서류</h3>\n        <div className={styles.attachmentContainer}>\n          <div className={styles.attachmentGrid}>\n            <Checkbox\n              label=\"인감증명서\"\n              name=\"sealcertificateprovided\"\n              onChange={handleCheckboxChange}\n              register={register(\"sealcertificateprovided\")}\n              isError={!!errors.sealcertificateprovided}\n            />\n            <Checkbox\n              label=\"본인서명확인서\"\n              name=\"selfsignatureconfirmationprovided\"\n              onChange={handleCheckboxChange}\n              register={register(\"selfsignatureconfirmationprovided\")}\n              isError={!!errors.selfsignatureconfirmationprovided}\n            />\n            <Checkbox\n              label=\"확약서\"\n              name=\"commitmentletterprovided\"\n              onChange={handleCheckboxChange}\n              register={register(\"commitmentletterprovided\")}\n              isError={!!errors.commitmentletterprovided}\n            />\n            <Checkbox\n              label=\"신분증\"\n              name=\"idcopyprovided\"\n              onChange={handleCheckboxChange}\n              register={register(\"idcopyprovided\")}\n              isError={!!errors.idcopyprovided}\n            />\n            <Checkbox\n              label=\"무상옵션\"\n              name=\"freeoption\"\n              onChange={handleCheckboxChange}\n              register={register(\"freeoption\")}\n              isError={!!errors.freeoption}\n            />\n            <Checkbox\n              label=\"창준위용\"\n              name=\"forfounding\"\n              onChange={handleCheckboxChange}\n              register={register(\"forfounding\")}\n              isError={!!errors.forfounding}\n            />\n            <Checkbox\n              label=\"총회동의서\"\n              name=\"generalmeetingconsentformprovided\"\n              onChange={handleCheckboxChange}\n              register={register(\"generalmeetingconsentformprovided\")}\n              isError={!!errors.generalmeetingconsentformprovided}\n            />\n            <Checkbox\n              label=\"선호도조사\"\n              name=\"preferenceattachment\"\n              onChange={handleCheckboxChange}\n              register={register(\"preferenceattachment\")}\n              isError={!!errors.preferenceattachment}\n            />\n            <Checkbox\n              label=\"사은품\"\n              name=\"prizeattachment\"\n              onChange={handleCheckboxChange}\n              register={register(\"prizeattachment\")}\n              isError={!!errors.prizeattachment}\n            />\n          </div>\n\n          {/* 사은품 관련 */}\n          {prizeattachmentChecked && (\n            <div className={styles.prizeRow}>\n              <Inputbox\n                type=\"text\"\n                placeholder=\"사은품명\"\n                register={register(\"prizename\")}\n                isError={!!errors.prizename}\n              />\n              <div className={styles.dateInputContainer}>\n                <label className={styles.dateLabel}>지급일자</label>\n                <Inputbox\n                  type=\"date\"\n                  register={register(\"prizedate\")}\n                  isError={!!errors.prizedate}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n        <div className={styles.content_container}>\n          <div>\n            <span>파일업로드</span>\n            <FileInputbox\n              name=\"fileupload\"\n              handleChange={handleFileChange}\n              register={register(\"fileupload\")}\n              isupload={isupload.isuploaded}\n              value={file ? file.name : \"\"}\n              isError={!!errors.fileupload}\n            />\n          </div>\n        </div>\n\n        {/* 5. 담당자 */}\n        <h3>담당자</h3>\n        <div className={`${styles.content_container} ${styles.responsibleContainer}`}>\n          <MGMInputbox\n            type=\"text\"\n            placeholder=\"총괄 *\"\n            register={register(\"responsible.generalmanagement\", {\n              required: \"총괄을 입력해주세요.\",\n            })}\n            isError={!!errors.responsible?.generalmanagement}\n          />\n          <MGMInputbox\n            type=\"text\"\n            placeholder=\"본부 *\"\n            register={register(\"responsible.division\", {\n              required: \"본부를 입력해주세요.\",\n            })}\n            isError={!!errors.responsible?.division}\n          />\n          <MGMInputbox\n            type=\"text\"\n            placeholder=\"팀 *\"\n            register={register(\"responsible.team\", {\n              required: \"팀을 입력해주세요.\",\n            })}\n            isError={!!errors.responsible?.team}\n          />\n          <MGMInputbox\n            type=\"text\"\n            placeholder=\"성명 *\"\n            register={register(\"responsible.managername\", {\n              required: \"성명을 입력해주세요.\",\n            })}\n            isError={!!errors.responsible?.managername}\n          />\n        </div>\n\n        {/* 6. MGM */}\n        <h3>MGM</h3>\n        <div className={`${styles.content_container} ${styles.mgmContainer}`}>\n          <MGMInputbox\n            type=\"text\"\n            placeholder=\"업체명\"\n            register={register(\"MGM.mgmcompanyname\")}\n            isError={!!errors.MGM?.mgmcompanyname}\n          />\n          <MGMInputbox\n            type=\"text\"\n            placeholder=\"이름\"\n            register={register(\"MGM.mgmname\")}\n            isError={!!errors.MGM?.mgmname}\n          />\n          <MGMInputbox\n            type=\"text\"\n            placeholder=\"은행명\"\n            register={register(\"MGM.mgminstitution\")}\n            isError={!!errors.MGM?.mgminstitution}\n          />\n          <MGMInputbox\n            type=\"text\"\n            placeholder=\"계좌\"\n            register={register(\"MGM.mgmaccount\")}\n            isError={!!errors.MGM?.mgmaccount}\n          />\n        </div>\n\n        {/* 7. 1차(직원) */}\n        <h3>1차(직원)</h3>\n        <div className={styles.mainbody}>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>차순</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"차순\"\n                defaultValue={watch(\"firstemp.firstemptimes\") || \"\"}\n                register={register(\"firstemp.firstemptimes\")}\n                isError={!!errors.firstemp?.firstemptimes}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>지급일</div>\n              <div className={styles.dateInputContainer}>\n                <MGMInputbox\n                  type=\"date\"\n                  defaultValue={watch(\"firstemp.firstempdate\") || \"\"}\n                  register={register(\"firstemp.firstempdate\")}\n                  isError={!!errors.firstemp?.firstempdate}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 8. 2차(직원) */}\n        <h3>2차(직원)</h3>\n        <div className={styles.mainbody}>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>차순</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"차순\"\n                defaultValue={watch(\"secondemp.secondemptimes\") || \"\"}\n                register={register(\"secondemp.secondemptimes\")}\n                isError={!!errors.secondemp?.secondemptimes}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>지급일</div>\n              <div className={styles.dateInputContainer}>\n                <MGMInputbox\n                  type=\"date\"\n                  defaultValue={watch(\"secondemp.secondempdate\") || \"\"}\n                  register={register(\"secondemp.secondempdate\")}\n                  isError={!!errors.secondemp?.secondempdate}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 9. 총회참석여부 */}\n        <h3>총회참석여부</h3>\n        <div className={styles.mainbody}>\n          <div className={styles.content_body}>\n            <div className={styles.content_body3}>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"서면\"\n                register={register(\"meetingattend.ftofattend\")}\n                isError={!!errors.meetingattend?.ftofattend}\n              />\n            </div>\n            <div className={styles.content_body3}>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"직접\"\n                register={register(\"meetingattend.selfattend\")}\n                isError={!!errors.meetingattend?.selfattend}\n              />\n            </div>\n            <div className={styles.content_body3}>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"대리\"\n                register={register(\"meetingattend.behalfattend\")}\n                isError={!!errors.meetingattend?.behalfattend}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 10. 안건 */}\n        <h3>안건</h3>\n        <div className={styles.mainbody}>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제1호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제1호\"\n                register={register(\"agenda.agenda1\")}\n                isError={!!errors.agenda?.agenda1}\n              />\n            </div>\n          </div>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제2-1호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제2-1호\"\n                defaultValue={watch(\"agenda.agenda2_1\") || \"\"}\n                register={register(\"agenda.agenda2_1\")}\n                isError={!!errors.agenda?.agenda2_1}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제2-2호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제2-2호\"\n                defaultValue={watch(\"agenda.agenda2_2\") || \"\"}\n                register={register(\"agenda.agenda2_2\")}\n                isError={!!errors.agenda?.agenda2_2}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제2-3호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제2-3호\"\n                defaultValue={watch(\"agenda.agenda2_3\") || \"\"}\n                register={register(\"agenda.agenda2_3\")}\n                isError={!!errors.agenda?.agenda2_3}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제2-4호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제2-4호\"\n                defaultValue={watch(\"agenda.agenda2_4\") || \"\"}\n                register={register(\"agenda.agenda2_4\")}\n                isError={!!errors.agenda?.agenda2_4}\n              />\n            </div>\n          </div>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제3호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제3호\"\n                defaultValue={watch(\"agenda.agenda3\") || \"\"}\n                register={register(\"agenda.agenda3\")}\n                isError={!!errors.agenda?.agenda3}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제4호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제4호\"\n                defaultValue={watch(\"agenda.agenda4\") || \"\"}\n                register={register(\"agenda.agenda4\")}\n                isError={!!errors.agenda?.agenda4}\n              />\n            </div>\n          </div>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제5호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제5호\"\n                defaultValue={watch(\"agenda.agenda5\") || \"\"}\n                register={register(\"agenda.agenda5\")}\n                isError={!!errors.agenda?.agenda5}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제6호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제6호\"\n                defaultValue={watch(\"agenda.agenda6\") || \"\"}\n                register={register(\"agenda.agenda6\")}\n                isError={!!errors.agenda?.agenda6}\n              />\n            </div>\n          </div>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제7호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제7호\"\n                defaultValue={watch(\"agenda.agenda7\") || \"\"}\n                register={register(\"agenda.agenda7\")}\n                isError={!!errors.agenda?.agenda7}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제8호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제8호\"\n                defaultValue={watch(\"agenda.agenda8\") || \"\"}\n                register={register(\"agenda.agenda8\")}\n                isError={!!errors.agenda?.agenda8}\n              />\n            </div>\n          </div>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제9호</div>\n              <MGMInputbox\n                type=\"text\"\n                defaultValue={watch(\"agenda.agenda9\") || \"\"}\n                register={register(\"agenda.agenda9\")}\n                isError={!!errors.agenda?.agenda9}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제10호</div>\n              <MGMInputbox\n                type=\"text\"\n                defaultValue={watch(\"agenda.agenda10\") || \"정보없음\"}\n                register={register(\"agenda.agenda10\")}\n                isError={!!errors.agenda?.agenda10}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 11. 비고 (additional) */}\n        <h3>비고</h3>\n        <div className={styles.content_container}>\n          <InputAreabox\n            type=\"text\"\n            placeholder=\"비고를 입력하세요\"\n            register={register(\"additional\")}\n            isError={!!errors.additional}\n          />\n        </div>\n\n        <p></p>\n        <Button_Y type=\"submit\" disabled={idExists || checkingId}>\n          저장하기\n        </Button_Y>\n      </form>\n    </div>\n  );\n}\n\nexport default withAuth(Create);\n"
            }
        },
        "dashboard": {
            "__files__": {
                "page.js": "// src/app/dashboard/page.js\n\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport {\n  fetchContractedCustomers,\n  fetchFullyPaidCustomers,\n  getPhaseSummaries,\n  fetchNotices,\n} from \"@/utils/api\";\nimport { BsBagDash, BsDatabase } from \"react-icons/bs\";\nimport { BiGroup } from \"react-icons/bi\";\nimport ContractSummary from \"@/components/Dashboard/ContractSummary\";\nimport ContractAmount from \"@/components/Dashboard/ContrachAmmount\";\nimport ClientList from \"@/components/Dashboard/ClientList\";\nimport InstallmentAmounts from \"@/components/Dashboard/InstallmentAmounts\";\nimport styles from \"../../styles/Dashboard.module.scss\";\n\nconst Dashboard = () => {\n  const [contractedCount, setContractedCount] = useState(\"loading...\");\n  const [fullyPaidCount, setFullyPaidCount] = useState(\"loading...\");\n  const [contractAmount, setContractAmount] = useState(\"loading...\");\n  const [confirmDepositAmount, setConfirmDepositAmount] = useState(\"loading...\");\n  const [phaseSummaries, setPhaseSummaries] = useState([]);\n  const [phaseLoading, setPhaseLoading] = useState(true);\n  const [notices, setNotices] = useState([]);\n\n  useEffect(() => {\n    const fetchCounts = async () => {\n      try {\n        const [contracted, fullyPaid, summary, noticeData] = await Promise.all([\n          fetchContractedCustomers(),\n          fetchFullyPaidCustomers(),\n          getPhaseSummaries(),\n          fetchNotices(),\n        ]);\n\n        setContractedCount(contracted);\n        setFullyPaidCount(fullyPaid);\n        setPhaseSummaries(summary);\n        setPhaseLoading(false);\n\n        const totalDeposited = summary.reduce(\n          (acc, cur) => acc + (cur.totalDeposited || 0),\n          0\n        );\n        const totalUnpaid = summary.reduce(\n          (acc, cur) => acc + (cur.totalUnpaid || 0),\n          0\n        );\n        setContractAmount(totalDeposited + totalUnpaid);\n        setConfirmDepositAmount(totalDeposited);\n\n        setNotices(noticeData);\n      } catch (error) {\n        console.error(\"Error fetching counts:\", error);\n      }\n    };\n\n    fetchCounts();\n  }, []);\n\n  const formatWon = (value) => {\n    if (typeof value === \"number\") {\n      return value.toLocaleString() + \" ₩\";\n    }\n    return value;\n  };\n\n  // 임시 미납자 목록\n  const clients = [\n    { id: \"123455\", name: \"이승준\", lastPayment: \"4차\", tempDong: \"84A-사-1\" },\n    { id: \"123456\", name: \"김철수\", lastPayment: \"3차\", tempDong: \"84B-사-2\" },\n  ];\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.MainTitle}>\n        <div className={styles.TwoColumnContainer}>\n          {/* 왼쪽 컬럼 */}\n          <div className={styles.LeftColumn}>\n            <div className={styles.Row}>\n              <ContractSummary\n                icon={<BsBagDash style={{ width: \"100%\", height: \"100%\" }} />}\n                color=\"#7152F3\"\n                name=\"현재 계약건수\"\n                value={contractedCount}\n                percentage=\"1\"\n                updatedDate=\"2024년 11월 20일\"\n              />\n              <ContractSummary\n                icon={<BiGroup style={{ width: \"100%\", height: \"100%\" }} />}\n                color=\"#7152F3\"\n                name=\"완납인원\"\n                value={fullyPaidCount}\n                percentage=\"0\"\n                updatedDate=\"2024년 11월 20일\"\n              />\n            </div>\n\n            <div className={styles.Row}>\n              <ContractAmount\n                icon={<BsDatabase style={{ width: \"100%\", height: \"100%\" }} />}\n                color=\"#7152F3\"\n                name=\"계약금액\"\n                amount={formatWon(contractAmount)}\n                updatedDate=\"2024년 11월 20일\"\n              />\n              <ContractAmount\n                icon={<BsDatabase style={{ width: \"100%\", height: \"100%\" }} />}\n                color=\"#7152F3\"\n                name=\"확입금액\"\n                amount={formatWon(confirmDepositAmount)}\n                updatedDate=\"2024년 11월 20일\"\n              />\n            </div>\n\n            <div className={styles.Row}>\n              <ClientList clients={clients} />\n            </div>\n\n            {/* 공지사항 영역 - 세로로 쌓이고 각 항목 사이에 구분선 추가 */}\n            <div className={styles.Row}>\n              <div className={styles.Notice}>\n                <div className={styles.NoticeTitle}>공지사항</div>\n                <div className={styles.NoticeContent}>\n                  {notices.length === 0 ? (\n                    \"[ loading... ]\"\n                  ) : (\n                    notices.map((notice, index) => (\n                      <React.Fragment key={notice.id}>\n                        <Link\n                          href={`/dashboard/notice/${notice.id}`}\n                          className={styles.NoticeItem}\n                        >\n                          <div>\n                            <strong>{notice.title}</strong>\n                          </div>\n                          <div className={styles.NoticeMeta}>\n                            <span>\n                              수정일:{\" \"}\n                              {new Date(notice.updatedAt).toLocaleDateString()}\n                            </span>\n                            <span>\n                              작성자: {notice.author || \"관리자\"}\n                            </span>\n                          </div>\n                        </Link>\n                        {index !== notices.length - 1 && (\n                          <hr className={styles.NoticeDivider} />\n                        )}\n                      </React.Fragment>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* 오른쪽 컬럼 - 차수별 납입/미납 금액 */}\n          <div className={styles.RightColumn}>\n            <InstallmentAmounts\n              phaseSummaries={phaseSummaries}\n              loading={phaseLoading}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"
            },
            "notice": {
                "write": {
                    "__files__": {
                        "page.js": "// src/app/dashboard/notice/write/page.js\n\"use client\";\nimport React, { useState } from \"react\";\nimport styles from \"../../../../styles/Dashboard.module.scss\";\nimport { createNotice } from \"@/utils/api\";\nimport { useRouter } from \"next/navigation\";\n\nexport default function NoticeWritePage() {\n  const [notice, setNotice] = useState({\n    title: \"\",\n    content: \"\",\n    author: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const router = useRouter();\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setError(\"\");\n    try {\n      await createNotice(notice);\n      alert(\"공지사항 등록 완료!\");\n      router.push(\"/dashboard\");\n    } catch (err) {\n      console.error(err);\n      setError(\"공지사항 등록 중 오류가 발생했습니다.\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.MainTitle}>\n        <h2>공지사항 작성 (관리자 전용)</h2>\n        <div className={styles.FormGroup}>\n          <label htmlFor=\"title\">제목</label>\n          <input\n            id=\"title\"\n            type=\"text\"\n            placeholder=\"공지사항 제목 입력\"\n            value={notice.title}\n            onChange={(e) =>\n              setNotice({ ...notice, title: e.target.value })\n            }\n          />\n        </div>\n        <div className={styles.FormGroup}>\n          <label htmlFor=\"content\">내용</label>\n          <textarea\n            id=\"content\"\n            placeholder=\"공지사항 내용을 입력\"\n            value={notice.content}\n            onChange={(e) =>\n              setNotice({ ...notice, content: e.target.value })\n            }\n            rows={8}\n          />\n        </div>\n        <div className={styles.FormGroup}>\n          <label htmlFor=\"author\">작성자</label>\n          <input\n            id=\"author\"\n            type=\"text\"\n            placeholder=\"작성자 입력\"\n            value={notice.author}\n            onChange={(e) =>\n              setNotice({ ...notice, author: e.target.value })\n            }\n          />\n        </div>\n        {error && <div style={{ color: \"red\" }}>{error}</div>}\n        <div className={styles.FormGroup}>\n          <button onClick={handleSubmit} disabled={loading}>\n            {loading ? \"등록중...\" : \"등록\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
                    }
                },
                "[id]": {
                    "__files__": {
                        "page.js": "// src/app/dashboard/notice/[id]/page.js\n\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport styles from \"../../../../styles/Dashboard.module.scss\";\nimport { fetchNoticeDetail } from \"@/utils/api\";\n\nexport default function NoticePage({ params }) {\n  const { id } = params;\n  const [notice, setNotice] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchNoticeDetail(id)\n      .then((data) => setNotice(data))\n      .catch((err) => setError(err.message));\n  }, [id]);\n\n  if (error) return <div>Error: {error}</div>;\n  if (!notice) return <div>Loading...</div>;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.MainTitle}>\n        <div className={styles.Notice}>\n          <div className={styles.NoticeTitle}>{notice.title}</div>\n          <div\n            className={styles.NoticeContent}\n            style={{ whiteSpace: \"pre-wrap\" }}\n          >\n            {notice.content}\n          </div>\n          <div style={{ marginTop: \"10px\", display: \"flex\", gap: \"16px\" }}>\n            <span className={styles.NoticeBottonFont}>\n              수정일: {new Date(notice.updatedAt).toLocaleDateString()}\n            </span>\n            <span className={styles.NoticeBottonFont}>\n              작성자: {notice.author || \"관리자\"}\n            </span>\n          </div>\n          <div style={{ marginTop: \"20px\" }}>\n            <Link href=\"/dashboard\">\n              <button className={styles.Bottonfont}>뒤로가기</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
                    }
                }
            }
        },
        "deposit": {
            "__files__": {
                "page.js": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport DepositForm from \"@/components/Deposit/DepositForm\";\nimport withAuth from \"@/utils/hoc/withAuth\";\nimport DepositList from \"@/components/Deposit/DepositList\";\nimport { saveAs } from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport Swal from \"sweetalert2\";\n\nimport depositStyles from \"@/styles/Deposit.module.scss\"; // 새로운 스타일 파일\nimport { FaPrint } from \"react-icons/fa6\"; // 아이콘\n\n// 백엔드 API에서 입금내역 목록을 불러오는 함수 임포트 (전체 입금내역 DTO)\nimport { fetchDepositList } from \"@/utils/api\";\n\nfunction DepositPage() {\n  // 검색 필드: 'contractor'(계약자 이름)와 'memberNumber'(회원번호 → 여기서는 id 필터로 사용)\n  const [contractor, setContractor] = useState(\"\");\n  const [memberNumber, setMemberNumber] = useState(\"\");\n  const [depositData, setDepositData] = useState([]);\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: \"ascending\",\n  });\n\n  // 엑셀 내보내기 핸들러\n  const handleExport = () => {\n    if (depositData.length === 0) {\n      Swal.fire({\n             icon: \"warning\",\n              title: \"내보낼 데이터가 없습니다.\",\n              text: \"데이터가 존재하지 않아 엑셀로 내보낼 수 없습니다.\",\n            });\n      return;\n    }\n\n    // 정렬된 데이터를 기준으로 엑셀 생성\n    const sortedData = [...depositData];\n    if (sortConfig.key) {\n      sortedData.sort((a, b) => {\n        let aValue, bValue;\n        if (sortConfig.key === \"computedDate\") {\n          aValue = a.loanRecord\n            ? a.loanDetails?.loandate\n              ? new Date(a.loanDetails.loandate)\n              : new Date(0)\n            : a.selfRecord && !isNaN(Number(a.selfRecord)) && a.loanDetails?.selfdate\n            ? new Date(a.loanDetails.selfdate)\n            : new Date(0);\n          bValue = b.loanRecord\n            ? b.loanDetails?.loandate\n              ? new Date(b.loanDetails.loandate)\n              : new Date(0)\n            : b.selfRecord && !isNaN(Number(b.selfRecord)) && b.loanDetails?.selfdate\n            ? new Date(b.loanDetails.selfdate)\n            : new Date(0);\n        } else {\n          aValue = a[sortConfig.key];\n          bValue = b[sortConfig.key];\n\n          if (aValue === null || aValue === undefined) return 1;\n          if (bValue === null || bValue === undefined) return -1;\n\n          if (sortConfig.key === \"transactionDateTime\") {\n            aValue = new Date(aValue);\n            bValue = new Date(bValue);\n          }\n\n          if (typeof aValue === \"string\") {\n            aValue = aValue.toLowerCase();\n            bValue = bValue.toLowerCase();\n          }\n        }\n\n        if (aValue < bValue) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (aValue > bValue) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n\n    // 엑셀에 넣을 데이터 포맷팅\n    const exportData = sortedData.map((item) => {\n      let dateValue = \"N/A\";\n      if (item.loanRecord) {\n        dateValue = item.loanDetails?.loandate\n          ? new Date(item.loanDetails.loandate).toLocaleDateString()\n          : \"N/A\";\n      } else if (item.selfRecord && !isNaN(Number(item.selfRecord))) {\n        dateValue = item.loanDetails?.selfdate\n          ? new Date(item.loanDetails.selfdate).toLocaleDateString()\n          : \"N/A\";\n      }\n      return {\n        \"ID\": item.id || \"N/A\",\n        \"거래일시\": item.transactionDateTime\n          ? new Date(item.transactionDateTime).toLocaleString()\n          : \"N/A\",\n        \"적요\": item.description || \"\",\n        \"기재내용\": item.details || \"\",\n        \"계약자\": item.contractor || \"N/A\",\n        \"찾으신금액\": item.withdrawnAmount\n          ? item.withdrawnAmount.toLocaleString()\n          : \"0\",\n        \"맡기신금액\": item.depositAmount\n          ? item.depositAmount.toLocaleString()\n          : \"0\",\n        \"거래 후 잔액\": item.balanceAfter\n          ? item.balanceAfter.toLocaleString()\n          : \"0\",\n        \"취급점\": item.branch || \"\",\n        \"계좌\": item.account || \"\",\n        \"1차\": item.depositPhase1 || \"\",\n        \"2차\": item.depositPhase2 || \"\",\n        \"3차\": item.depositPhase3 || \"\",\n        \"4차\": item.depositPhase4 || \"\",\n        \"5차\": item.depositPhase5 || \"\",\n        \"6차\": item.depositPhase6 || \"\",\n        \"7차\": item.depositPhase7 || \"\",\n        \"8차\": item.depositPhase8 || \"\",\n        \"9차\": item.depositPhase9 || \"\",\n        \"10차\": item.depositPhase10 || \"\",\n        \"loan_record\": item.loanRecord || \"\",\n        \"self_record\": item.selfRecord || \"\",\n        \"일자\": dateValue,\n        \"비고\": item.remarks || \"\",\n      };\n    });\n\n    const worksheet = XLSX.utils.json_to_sheet(exportData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Deposit\");\n\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: \"xlsx\",\n      type: \"array\",\n    });\n    const data = new Blob([excelBuffer], {\n      type:\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\",\n    });\n\n    // 현재 날짜를 \"YYYYMMDD\" 형식으로 포맷팅\n    const currentDate = new Date();\n    const year = currentDate.getFullYear();\n    const month = String(currentDate.getMonth() + 1).padStart(2, \"0\");\n    const day = String(currentDate.getDate()).padStart(2, \"0\");\n    const formattedDate = `${year}${month}${day}`;\n\n    saveAs(data, `Deposit_${formattedDate}.xlsx`);\n  };\n\n  // 데이터 페칭\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const data = await fetchDepositList();\n        setDepositData(data);\n      } catch (error) {\n        console.error(\"입금 내역을 불러오는 데 실패했습니다.\", error);\n      }\n    };\n    getData();\n  }, []);\n\n  return (\n    <>\n      <DepositForm\n        contractor={contractor}\n        setContractor={setContractor}\n        memberNumber={memberNumber}\n        setMemberNumber={setMemberNumber}\n        onExport={handleExport} // 엑셀 출력 버튼 핸들러 전달\n      />\n\n      <DepositList\n        contractor={contractor}\n        memberNumber={memberNumber}\n        setDepositData={setDepositData}\n        sortConfig={sortConfig}\n        setSortConfig={setSortConfig}\n      />\n    </>\n  );\n}\n\nexport default withAuth(DepositPage);\n"
            }
        },
        "filecontrol": {
            "__files__": {
                "page.js": "// src/app/modify/[id]/page.js\n\"use client\";\n\nimport { useState } from \"react\";\nimport styles from \"@/styles/Userinfo.module.scss\";\nimport withAuth from \"@/utils/hoc/withAuth\";\nimport { ExcelFileInputbox } from \"@/components/Inputbox\";\nimport { Button_Y } from \"@/components/Button\";\nimport { useRouter } from \"next/navigation\";\nimport {\n  uploadExcelFileWithProgress,\n  downloadRegFile,\n  uploadDepositHistoryExcelWithProgress,\n  downloadDepositHistoryExcel,\n  uploadRefundFileWithProgress,\n  downloadRefundFile,\n} from \"@/utils/api\";\n\nfunction FilecontrolPage() {\n  const router = useRouter();\n\n  // 고객 파일 업로드/다운로드 상태\n  const [customerFile, setCustomerFile] = useState(null);\n  const [customerProgress, setCustomerProgress] = useState(\"\");\n  const [customerMessage, setCustomerMessage] = useState(\"\");\n\n  const [regProgress, setRegProgress] = useState(\"\");\n  const [regMessage, setRegMessage] = useState(\"\");\n\n  // 입금내역 파일 업로드/다운로드 상태\n  const [depositFile, setDepositFile] = useState(null);\n  const [depositProgress, setDepositProgress] = useState(\"\");\n  const [depositMessage, setDepositMessage] = useState(\"\");\n\n  const [depDownloadProgress, setDepDownloadProgress] = useState(\"\");\n  const [depDownloadMessage, setDepDownloadMessage] = useState(\"\");\n\n  // 환불 파일 업로드/다운로드 상태\n  const [refundFile, setRefundFile] = useState(null);\n  const [refundProgress, setRefundProgress] = useState(\"\");\n  const [refundMessage, setRefundMessage] = useState(\"\");\n\n  const [refundDownloadProgress, setRefundDownloadProgress] = useState(\"\");\n  const [refundDownloadMessage, setRefundDownloadMessage] = useState(\"\");\n\n  // 진행률 바 렌더링 헬퍼\n  const renderProgressBar = (progress) => {\n    if (!progress || !progress.includes('/')) return null;\n    const [current, total] = progress.split('/').map(Number);\n    if (isNaN(current) || isNaN(total)) return null;\n    return (\n      <progress\n        value={current}\n        max={total}\n        style={{ width: \"30%\", marginTop: \"0.5rem\" }}\n      />\n    );\n  };\n\n  // ────────────── 고객 파일 업로드/다운로드 ──────────────\n  const handleCustomerFileChange = (e) => {\n    const { files } = e.target;\n    if (files && files.length > 0) setCustomerFile(files[0]);\n  };\n\n  const handleCustomerUpload = async () => {\n    if (!customerFile) {\n      setCustomerMessage(\"고객 파일을 선택해주세요.\");\n      return;\n    }\n    setCustomerMessage(\"고객 파일 업로드 시작...\");\n    setCustomerProgress(\"\");\n    try {\n      await uploadExcelFileWithProgress(\n        customerFile,\n        (prog) => setCustomerProgress(prog),\n        (msg) => setCustomerMessage(\"고객 파일 업로드 완료: \" + msg),\n        (err) => setCustomerMessage(\"고객 파일 업로드 실패: \" + err)\n      );\n    } catch (error) {\n      console.error(\"고객 파일 업로드 오류:\", error);\n      setCustomerMessage(\"업로드 중 오류 발생: \" + error.message);\n    }\n  };\n\n  const handleRegFileDownload = async () => {\n    setRegMessage(\"고객 파일 다운로드 시작...\");\n    setRegProgress(\"\");\n    try {\n      await downloadRegFile(\n        (prog) => setRegProgress(prog),\n        (fileName) => setRegMessage(\"다운로드 완료: \" + fileName),\n        (err) => setRegMessage(\"다운로드 실패: \" + err)\n      );\n    } catch (error) {\n      console.error(\"고객 파일 다운로드 실패:\", error);\n      setRegMessage(\"다운로드 중 오류 발생: \" + error.message);\n    }\n  };\n\n  // ────────────── 입금내역 파일 업로드/다운로드 ──────────────\n  const handleDepositFileChange = (e) => {\n    const { files } = e.target;\n    if (files && files.length > 0) setDepositFile(files[0]);\n  };\n\n  const handleDepositUpload = async () => {\n    if (!depositFile) {\n      setDepositMessage(\"입금내역 파일을 선택해주세요.\");\n      return;\n    }\n    setDepositMessage(\"입금내역 업로드 시작...\");\n    setDepositProgress(\"\");\n    try {\n      await uploadDepositHistoryExcelWithProgress(\n        depositFile,\n        (prog) => setDepositProgress(prog),\n        (msg) => setDepositMessage(\"입금내역 업로드 완료: \" + msg),\n        (err) => setDepositMessage(\"입금내역 업로드 실패: \" + err)\n      );\n    } catch (error) {\n      console.error(\"입금내역 업로드 오류:\", error);\n      setDepositMessage(\"업로드 중 오류 발생: \" + error.message);\n    }\n  };\n\n  const handleDepDownload = async () => {\n    setDepDownloadMessage(\"입금내역 엑셀 다운로드 시작...\");\n    setDepDownloadProgress(\"\");\n    try {\n      await downloadDepositHistoryExcel(\n        (prog) => setDepDownloadProgress(prog),\n        (fileName) => setDepDownloadMessage(\"다운로드 완료: \" + fileName),\n        (err) => setDepDownloadMessage(\"다운로드 실패: \" + err)\n      );\n    } catch (error) {\n      console.error(\"입금내역 다운로드 오류:\", error);\n      setDepDownloadMessage(\"다운로드 중 오류 발생: \" + error.message);\n    }\n  };\n\n  // ────────────── 환불 파일 업로드/다운로드 ──────────────\n  const handleRefundFileChange = (e) => {\n    const { files } = e.target;\n    if (files && files.length > 0) setRefundFile(files[0]);\n  };\n\n  const handleRefundUpload = async () => {\n    if (!refundFile) {\n      setRefundMessage(\"환불 파일을 선택해주세요.\");\n      return;\n    }\n    setRefundMessage(\"환불 파일 업로드 시작...\");\n    setRefundProgress(\"\");\n    try {\n      await uploadRefundFileWithProgress(\n        refundFile,\n        (prog) => setRefundProgress(prog),\n        (msg) => setRefundMessage(\"환불 파일 업로드 완료: \" + msg),\n        (err) => setRefundMessage(\"환불 파일 업로드 실패: \" + err)\n      );\n    } catch (error) {\n      console.error(\"환불 파일 업로드 오류:\", error);\n      setRefundMessage(\"업로드 중 오류 발생: \" + error.message);\n    }\n  };\n\n  const handleRefundDownload = async () => {\n    setRefundDownloadMessage(\"환불 파일 다운로드 시작...\");\n    setRefundDownloadProgress(\"\");\n    try {\n      await downloadRefundFile(\n        (prog) => setRefundDownloadProgress(prog),\n        (fileName) => setRefundDownloadMessage(\"다운로드 완료: \" + fileName),\n        (err) => setRefundDownloadMessage(\"다운로드 실패: \" + err)\n      );\n    } catch (error) {\n      console.error(\"환불 파일 다운로드 오류:\", error);\n      setRefundDownloadMessage(\"다운로드 중 오류 발생: \" + error.message);\n    }\n  };\n\n  return (\n    <div className={styles.mainbody}>\n      {/* 고객 파일 섹션 */}\n      <div className={styles.rowContainer}>\n        <div className={styles.excelcontainer}>\n          <h3>고객 파일 업로드 (엑셀, SSE 진행도)</h3>\n          <ExcelFileInputbox\n            name=\"customerFileUpload\"\n            handleChange={handleCustomerFileChange}\n            value={customerFile ? customerFile.name : \"\"}\n            isupload={!!customerFile}\n          />\n          <button className={styles.contractButton} onClick={handleCustomerUpload}>\n            고객 파일 업로드\n          </button>\n          {customerMessage && <p>{customerMessage}</p>}\n          {customerProgress && (\n            <>\n              <p>진행도: {customerProgress}</p>\n              {renderProgressBar(customerProgress)}\n            </>\n          )}\n          <h3>고객 파일 다운로드</h3>\n          <button className={styles.editButton} onClick={handleRegFileDownload}>\n            고객 파일 다운로드\n          </button>\n          {regMessage && <p>{regMessage}</p>}\n          {regProgress && (\n            <>\n              <p>진행도: {regProgress}</p>\n              {renderProgressBar(regProgress)}\n            </>\n          )}\n        </div>\n      </div>\n      <hr />\n\n      {/* 입금내역 파일 섹션 */}\n      <div className={styles.rowContainer}>\n        <div className={styles.excelcontainer}>\n          <h3>입금내역 업로드 (엑셀, SSE 진행도)</h3>\n          <ExcelFileInputbox\n            name=\"depositFileUpload\"\n            handleChange={handleDepositFileChange}\n            value={depositFile ? depositFile.name : \"\"}\n            isupload={!!depositFile}\n          />\n          <button className={styles.contractButton} onClick={handleDepositUpload}>\n            입금내역 업로드\n          </button>\n          {depositMessage && <p>{depositMessage}</p>}\n          {depositProgress && (\n            <>\n              <p>진행도: {depositProgress}</p>\n              {renderProgressBar(depositProgress)}\n            </>\n          )}\n          <h3>입금내역 엑셀 다운로드</h3>\n          <button className={styles.editButton} onClick={handleDepDownload}>\n            입금내역 다운로드\n          </button>\n          {depDownloadMessage && <p>{depDownloadMessage}</p>}\n          {depDownloadProgress && (\n            <>\n              <p>진행도: {depDownloadProgress}</p>\n              {renderProgressBar(depDownloadProgress)}\n            </>\n          )}\n        </div>\n      </div>\n      <hr />\n\n      {/* 환불 파일 섹션 */}\n      <div className={styles.rowContainer}>\n        <div className={styles.excelcontainer}>\n          <h3>환불 파일 업로드 (엑셀, SSE 진행도)</h3>\n          <ExcelFileInputbox\n            name=\"refundFileUpload\"\n            handleChange={handleRefundFileChange}\n            value={refundFile ? refundFile.name : \"\"}\n            isupload={!!refundFile}\n          />\n          <button className={styles.contractButton} onClick={handleRefundUpload}>\n            환불 파일 업로드\n          </button>\n          {refundMessage && <p>{refundMessage}</p>}\n          {refundProgress && (\n            <>\n              <p>진행도: {refundProgress}</p>\n              {renderProgressBar(refundProgress)}\n            </>\n          )}\n          <h3>환불 파일 다운로드</h3>\n          <button className={styles.editButton} onClick={handleRefundDownload}>\n            환불 파일 다운로드\n          </button>\n          {refundDownloadMessage && <p>{refundDownloadMessage}</p>}\n          {refundDownloadProgress && (\n            <>\n              <p>진행도: {refundDownloadProgress}</p>\n              {renderProgressBar(refundDownloadProgress)}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default withAuth(FilecontrolPage);\n"
            }
        },
        "inputmoney": {
            "__files__": {
                "page.js": "\"use client\";\n\nimport styles from \"@/styles/Inputmoneysearch.module.scss\";\nimport { Searchbox } from \"@/components/Inputbox\";\nimport Link from \"next/link\";\nimport { searchnameState, searchnumberState } from \"@/utils/atom\";\nimport { namesearchSelector } from \"@/utils/selector\";\nimport { useEffect, useState } from \"react\";\nimport { useRecoilValueLoadable, useSetRecoilState } from \"recoil\";\nimport { CgSearch } from \"react-icons/cg\";\nimport withAuth from \"@/utils/hoc/withAuth\";\n\nconst SearchList = ({ name, number }) => {\n  let searchname = name.length > 1 ? name : \"\";\n  let searchnumber = number.length > 1 ? number : \"\";\n\n  const setNameState = useSetRecoilState(searchnameState);\n  const setNumberState = useSetRecoilState(searchnumberState);\n\n  useEffect(() => {\n    setNameState(searchname);\n    setNumberState(searchnumber);\n  }, [searchname, searchnumber, setNameState, setNumberState]);\n\n  let searchdata = useRecoilValueLoadable(namesearchSelector);\n\n  if (searchdata.state === \"loading\") {\n    return <div>Loading...</div>;\n  }\n\n  if (searchdata.state === \"hasError\") {\n    return <div>Error fetching data</div>;\n  }\n\n  if (searchdata.state === \"hasValue\") {\n    return (\n      <div>\n        {searchdata.contents.map((k) => (\n          <Link\n            key={k.id}\n            className={styles.MainContainer}\n            href={`/inputmoney/userinfo/${k.id}`}\n          >\n            <div className={styles.CategoryContent}>\n              <div className={styles.CategoryBody1}>\n                <div className={styles.ContentFont}>{k.id}</div>\n              </div>\n              <div className={styles.CategoryBody1}>\n                <div className={styles.ContentFont}>{k.userinfo.name}</div>\n              </div>\n              <div className={styles.CategoryBody1}>\n                <div className={styles.ContentFont}>\n                  {k.data.type}-{k.data.group}-{k.data.turn}\n                </div>\n              </div>\n            </div>\n          </Link>\n        ))}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nfunction Inputmoneysearch() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const onNameChange = (e) => {\n    const text = e.target.value;\n    setName(text.replace(/ /g, \"\"));\n  };\n\n  const onNumberChange = (e) => {\n    const text = e.target.value;\n    setNumber(text.replace(/ /g, \"\"));\n  };\n\n  return (\n    <div className={styles.SelectContainer}>\n      <div className={styles.SelectTitleBody}>\n        <div className={styles.SelectTitle}>\n          <div className={styles.SelectTitleFont}>회원선택</div>\n        </div>\n        <div className={styles.Search}>\n          <div className={styles.SearchBody}>\n            <Searchbox\n              type=\"text\"\n              placeholder=\"관리번호\"\n              onChange={onNumberChange}\n            />\n            <Searchbox\n              type=\"text\"\n              placeholder=\"회원성함\"\n              onChange={onNameChange}\n            />\n          </div>\n        </div>\n        <div className={styles.CategoryBody}>\n          <div className={styles.CategoryBody1}>\n            <div className={styles.CategoryFont}>관리번호</div>\n          </div>\n          <div className={styles.CategoryBody1}>\n            <div className={styles.CategoryFont}>성명</div>\n          </div>\n          <div className={styles.CategoryBody1}>\n            <div className={styles.CategoryFont}>동호번호</div>\n          </div>\n        </div>\n        <div className={styles.Line}></div>\n        <SearchList name={name} number={number} />\n        <div className={styles.Line}></div>\n      </div>\n    </div>\n  );\n}\n\nexport default withAuth(Inputmoneysearch);\n"
            },
            "deposit": {
                "modify": {
                    "[id]": {
                        "__files__": {
                            "page.js": "\"use client\";\n// src/app/inputmoney/deposit/modify/[id]/page.js\nimport { usePathname, useRouter } from \"next/navigation\";\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"@/styles/DepositAdd.module.scss\";\nimport { InputboxGray } from \"@/components/Inputbox\";\nimport { fetchDepositHistory, updateDepositHistory } from \"@/utils/api\";\n\nfunction DepositModifyPage() {\n  const pathname = usePathname();\n  const depositId = pathname.split(\"/\")[4]; // URL에서 depositHistory id 추출\n  const router = useRouter();\n\n  // DepositHistory 엔티티와 동일한 필드명 사용\n  const [formData, setFormData] = useState({\n    transactionDateTime: \"\",\n    remarks: \"\",\n    details: \"\",\n    contractor: \"\",\n    withdrawnAmount: \"\",\n    depositAmount: \"\",\n    balanceAfter: \"\",\n    branch: \"\",\n    account: \"\",\n  });\n\n  // 단일 입금내역 페칭 (GET /deposit/{depositId})\n  useEffect(() => {\n    const loadDeposit = async () => {\n      try {\n        const data = await fetchDepositHistory(depositId);\n        setFormData({\n          transactionDateTime: data.transactionDateTime || \"\",\n          remarks: data.remarks || \"\",\n          details: data.details || \"\",\n          contractor: data.contractor || \"\",\n          withdrawnAmount: data.withdrawnAmount || \"\",\n          depositAmount: data.depositAmount || \"\",\n          balanceAfter: data.balanceAfter || \"\",\n          branch: data.branch || \"\",\n          account: data.account || \"\",\n        });\n      } catch (error) {\n        console.error(\"Error fetching deposit record:\", error);\n      }\n    };\n\n    if (depositId) {\n      loadDeposit();\n    }\n  }, [depositId]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSave = async (e) => {\n    e.preventDefault();\n    console.log(\"수정된 데이터:\", formData);\n    try {\n      await updateDepositHistory(depositId, formData);\n      alert(\"데이터가 저장되었습니다.\");\n      router.back();\n    } catch (error) {\n      console.error(\"Error updating deposit history:\", error);\n      alert(\"데이터 저장에 실패했습니다.\");\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <p></p>\n      <div className={styles.infoContainer}>\n        <div className={styles.unitbody}>\n          <div className={styles.titlebody}>\n            <span className={styles.title}>입금내역 ID</span>\n          </div>\n          <div className={styles.contentbody}>\n            <span>{depositId || \".\"}</span>\n          </div>\n        </div>\n        <div className={styles.unitbody}>\n          <div className={styles.titlebody}>\n            <span className={styles.title}>성명</span>\n          </div>\n          <div className={styles.contentbody}>\n            <span>{formData.contractor || \".\"}</span>\n          </div>\n        </div>\n      </div>\n\n      <h3>입금내역 수정</h3>\n      <p></p>\n      <form onSubmit={handleSave}>\n        <div className={styles.infoContainer}>\n          {/* 거래일시 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>거래일시</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"datetime-local\"\n                name=\"transactionDateTime\"\n                value={formData.transactionDateTime}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          {/* 적요 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>적요</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"remarks\"\n                value={formData.remarks}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          {/* 기재내용 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>기재내용</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"details\"\n                value={formData.details}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className={styles.infoContainer}>\n          {/* 계약자 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>계약자</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"contractor\"\n                value={formData.contractor}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          {/* 찾으신 금액 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>찾으신 금액</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"number\"\n                name=\"withdrawnAmount\"\n                value={formData.withdrawnAmount}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          {/* 맡기신 금액 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>맡기신 금액</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"number\"\n                name=\"depositAmount\"\n                value={formData.depositAmount}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className={styles.infoContainer}>\n          {/* 거래 후 잔액 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>거래 후 잔액</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"number\"\n                name=\"balanceAfter\"\n                value={formData.balanceAfter}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          {/* 취급점 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>취급점</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"branch\"\n                value={formData.branch}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          {/* 계좌 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>계좌</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"account\"\n                value={formData.account}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n        </div>\n        <div className={styles.buttonContainer}>\n          <button type=\"submit\" className={styles.contractButton}>\n            저장하기\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default DepositModifyPage;\n"
                        }
                    }
                },
                "[id]": {
                    "__files__": {
                        "page.js": "\"use client\";\nimport { useParams } from \"next/navigation\";\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"@/styles/DepositAdd.module.scss\";\nimport { InputboxGray } from \"@/components/Inputbox\";\nimport Link from \"next/link\";\nimport Swal from \"sweetalert2\";\n\nimport {\n  fetchDepositHistoriesByCustomerId,\n  createDepositHistory,\n  fetchPendingPhases,\n  fetchCustomerById,\n  deleteDepositHistory,\n} from \"@/utils/api\";\n\n// 중첩 필드 업데이트 헬퍼 (예: \"loanDetails.loanammount\")\nconst updateNestedField = (state, name, newValue) => {\n  const keys = name.split(\".\");\n  if (keys.length === 1) {\n    return { ...state, [name]: newValue };\n  } else {\n    const [parent, child] = keys;\n    return {\n      ...state,\n      [parent]: { ...state[parent], [child]: newValue },\n    };\n  }\n};\n\n// 숫자 입력값에 대해 실시간 포맷팅: 숫자만 남기고 toLocaleString 적용\nconst handleMoneyChange = (e, setFormData) => {\n  const { name, value } = e.target;\n  const numeric = value.replace(/\\D/g, \"\");\n  const formatted = numeric ? parseInt(numeric, 10).toLocaleString() : \"\";\n  setFormData((prev) => updateNestedField(prev, name, formatted));\n};\n\nfunction DepositAddPage() {\n  const { id: userId } = useParams();\n\n  const [isLoanRecord, setIsLoanRecord] = useState(false);\n  const [isRecordDeposit, setIsRecordDeposit] = useState(false);\n  // 고객의 대출초과액(loanExceedAmount)을 저장 (예: 500000 등)\n  const [statusLoanExceed, setStatusLoanExceed] = useState(0);\n\n  const [formData, setFormData] = useState({\n    transactionDateTime: \"\",\n    // \"적요\"는 description로 매핑\n    description: \"\",\n    // \"비고\" (remarks)\n    remarks: \"\",\n    details: \"\",\n    contractor: \"\",\n    withdrawnAmount: \"\",\n    depositAmount: \"\",\n    balanceAfter: \"\",\n    branch: \"\",\n    account: \"\",\n    depositPhase1: null,\n    customer: { id: userId },\n    loanDate: \"\",\n    loanDetails: {\n      loanbank: \"\",\n      loanammount: \"\",\n      selfdate: \"\", // 기존 selfPaymentDate 대신 selfdate 사용\n      selfammount: \"\",\n      loanselfsum: \"\",\n      loanselfcurrent: \"\",\n    },\n    targetPhases: [],\n  });\n\n  const [depositData, setDepositData] = useState([]);\n  const [pendingPhases, setPendingPhases] = useState([]);\n  const [selectedPhases, setSelectedPhases] = useState([]);\n  // expandedDeposits: { [depositId]: boolean }\n  const [expandedDeposits, setExpandedDeposits] = useState({});\n\n  useEffect(() => {\n    const loadDeposits = async () => {\n      try {\n        const data = await fetchDepositHistoriesByCustomerId(userId);\n        console.log(data);\n        setDepositData(data);\n      } catch (error) {\n        console.error(\"Error fetching deposits:\", error);\n        setDepositData([]);\n      }\n    };\n    if (userId) {\n      loadDeposits();\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    const loadPendingPhases = async () => {\n      try {\n        const data = await fetchPendingPhases(userId);\n        setPendingPhases(data || []);\n      } catch (error) {\n        console.error(\"Error fetching pending phases:\", error);\n        setPendingPhases([]);\n      }\n    };\n    const loadCustomerData = async () => {\n      try {\n        const customerData = await fetchCustomerById(userId);\n        console.log(\"Fetched Customer Data:\", customerData);\n        console.log(customerData.status.loanExceedAmount);\n        setFormData((prev) => ({\n          ...prev,\n          contractor:\n            customerData.customerData?.name || customerData.name || \"\",\n        }));\n        // 고객 데이터에서 loanExceedAmount 값을 가져와 상태에 저장 (없으면 0)\n        setStatusLoanExceed(\n          customerData.status?.loanExceedAmount ||\n            customerData.loanExceedAmmount ||\n            0\n        );\n      } catch (error) {\n        console.error(\"Error fetching customer data:\", error);\n      }\n    };\n    if (userId) {\n      loadCustomerData();\n      if (isLoanRecord) {\n        loadPendingPhases();\n      }\n    }\n  }, [userId, isLoanRecord]);\n\n  useEffect(() => {\n    setFormData((prev) => ({ ...prev, targetPhases: selectedPhases }));\n  }, [selectedPhases]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    if (name === \"loanDate\") {\n      setFormData((prev) => ({ ...prev, [name]: value }));\n    } else if (name.includes(\".\")) {\n      const [parent, child] = name.split(\".\");\n      setFormData((prev) => ({\n        ...prev,\n        [parent]: { ...prev[parent], [child]: value },\n      }));\n    } else {\n      setFormData((prev) => ({ ...prev, [name]: value }));\n    }\n  };\n\n  // \"사용할 대출/자납 합계\" = 대출액 + 자납액\n  const computedDeposit =\n    (Number(formData.loanDetails.loanammount.replace(/,/g, \"\")) || 0) +\n    (Number(formData.loanDetails.selfammount.replace(/,/g, \"\")) || 0);\n  // 대출/자납 잔액 = 고객의 대출초과액 - computedDeposit\n  const computedLoanBalance = statusLoanExceed - computedDeposit;\n\n  // 선택된 차수의 총 금액\n  const selectedPhasesSum = pendingPhases\n    .filter((phase) => selectedPhases.includes(phase.phaseNumber))\n    .reduce((acc, phase) => acc + (phase.feesum || 0), 0);\n\n  // 예상 잔액 = (대출/자납 잔액 - 선택된 차수의 금액) 가 음수면 0으로 처리\n  const [remainingAmount, setRemainingAmount] = useState(0);\n  useEffect(() => {\n    setRemainingAmount(Math.max(0, computedLoanBalance - selectedPhasesSum));\n  }, [computedLoanBalance, selectedPhasesSum]);\n\n  // 토글 함수: 해당 deposit id에 대해 확장 여부를 토글\n  const toggleExpanded = (id) => {\n    setExpandedDeposits((prev) => ({ ...prev, [id]: !prev[id] }));\n  };\n\n  // allocationDetail JSON 문자열을 사람이 읽기 좋은 형식으로 변환하는 헬퍼 함수\n  const formatAllocationDetail = (allocationDetail) => {\n    if (!allocationDetail) return \"\";\n    try {\n      const data = JSON.parse(allocationDetail);\n      // 예: { \"phase6\": { \"allocated\":1245000, \"remainingNeeded\":14655000 } }\n      return Object.entries(data)\n        .map(([key, value]) => {\n          const phaseNum = key.replace(\"phase\", \"\");\n          return `${phaseNum}차 납입 : ${Number(value.allocated).toLocaleString()}  ${phaseNum}차 완납까지 : ${Number(value.remainingNeeded).toLocaleString()}`;\n        })\n        .join(\"\\n\");\n    } catch (e) {\n      return allocationDetail;\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!formData.transactionDateTime) {\n      Swal.fire({\n        icon: \"warning\",\n        title: \"필수 입력값 누락\",\n        text: \"거래일시는 필수 입력값입니다.\",\n      });\n      return;\n    }\n\n    if (isLoanRecord) {\n      // 만약 대출/자납 잔액이 음수라면 제출을 중단\n      if (computedLoanBalance < 0) {\n        Swal.fire({\n          icon: \"warning\",\n          title: \"입력 오류\",\n          text: \"대출/자납 잔액이 음수입니다. 확인해주세요.\",\n        });\n        return;\n      }\n    }\n    let submitData = { ...formData };\n    const removeCommas = (val) =>\n      typeof val === \"string\" ? val.replace(/,/g, \"\") : val;\n    submitData.withdrawnAmount = removeCommas(submitData.withdrawnAmount);\n    submitData.depositAmount = removeCommas(submitData.depositAmount);\n    submitData.balanceAfter = removeCommas(submitData.balanceAfter);\n    submitData.loanDetails.loanammount = removeCommas(\n      submitData.loanDetails.loanammount\n    );\n    submitData.loanDetails.selfammount = removeCommas(\n      submitData.loanDetails.selfammount\n    );\n    submitData.loanDate = formData.loanDate;\n    submitData.loanDetails.selfdate = formData.loanDetails.selfdate; // self납일은 selfdate로 저장\n    submitData.targetPhases = selectedPhases;\n    if (isLoanRecord) {\n      submitData.withdrawnAmount = \"0\";\n      submitData.depositAmount = computedDeposit.toString();\n      submitData.loanDetails.loanselfsum = computedDeposit.toString();\n      // 대출/자납 잔액을 submitData.loanDetails.loanselfcurrent에 저장\n      submitData.loanDetails.loanselfcurrent = computedLoanBalance.toString();\n      submitData.loanStatus = \"o\";\n    }\n    try {\n      await createDepositHistory(submitData);\n      console.log(\"submitData:\", submitData);\n      Swal.fire({\n        icon: \"success\",\n        title: \"저장 완료\",\n        text: \"데이터가 성공적으로 저장되었습니다.\",\n      });\n\n      setDepositData(await fetchDepositHistoriesByCustomerId(userId));\n    } catch (error) {\n      console.log(\"submitData:\", submitData);\n      console.error(\"Error creating deposit history:\", error);\n      Swal.fire({\n        icon: \"error\",\n        title: \"저장 실패\",\n        text: \"데이터 저장에 실패했습니다.\",\n      });\n    }\n  };\n\n  const handleDeleteDeposit = async (depositId) => {\n    Swal.fire({\n      icon: \"warning\",\n      title: \"정말 삭제하시겠습니까?\",\n      showCancelButton: true,\n      confirmButtonText: \"삭제\",\n      cancelButtonText: \"취소\",\n    }).then(async (result) => {\n      if (result.isConfirmed) {\n        try {\n          await deleteDepositHistory(depositId);\n          Swal.fire({\n            icon: \"success\",\n            title: \"삭제되었습니다.\",\n          });\n          const updatedDeposits = await fetchDepositHistoriesByCustomerId(userId);\n          setDepositData(updatedDeposits);\n        } catch (error) {\n          console.error(\"Error deleting deposit history:\", error);\n          Swal.fire({\n            icon: \"error\",\n            title: \"삭제에 실패했습니다.\",\n          });\n        }\n      }\n    });\n  };\n\n  const handlePhaseSelection = (phase) => {\n    if (selectedPhases.includes(phase.phaseNumber)) {\n      setSelectedPhases(selectedPhases.filter((num) => num !== phase.phaseNumber));\n    } else {\n      setSelectedPhases([...selectedPhases, phase.phaseNumber]);\n    }\n  };\n\n  const chunkArray = (arr, chunkSize) => {\n    const chunks = [];\n    for (let i = 0; i < arr.length; i += chunkSize) {\n      chunks.push(arr.slice(i, i + chunkSize));\n    }\n    return chunks;\n  };\n\n  return (\n    <div className={styles.container}>\n      <p></p>\n      <div className={styles.infoContainer}>\n        <div className={styles.unitbody}>\n          <div className={styles.titlebody}>\n            <span className={styles.title}>관리번호</span>\n          </div>\n          <div className={styles.contentbody}>\n            <span>{userId || \".\"}</span>\n          </div>\n        </div>\n        <div className={styles.unitbody}>\n          <div className={styles.titlebody}>\n            <span className={styles.title}>성명</span>\n          </div>\n          <div className={styles.contentbody}>\n            <span>{formData.contractor || \".\"}</span>\n          </div>\n        </div>\n      </div>\n      <h3>현재 입금내역</h3>\n      <p></p>\n      <div className={styles.tableWrapper}>\n        <div className={styles.tablecontainer}>\n          <div className={styles.unitContainer}>거래일시</div>\n          <div className={styles.unitContainer}>적요</div>\n          <div className={styles.unitContainer}>기재내용</div>\n          <div className={styles.unitContainer}>비고</div>\n          <div className={styles.unitContainer}>계약자</div>\n          <div className={styles.unitContainer}>찾으신 금액</div>\n          <div className={styles.unitContainer}>맡기신 금액</div>\n          <div className={styles.unitContainer}>거래 후 잔액</div>\n          <div className={styles.unitContainer}>취급점</div>\n          <div className={styles.unitContainer}>계좌</div>\n          <div className={styles.unitContainer}>삭제</div>\n        </div>\n        {depositData.map((item, index) => (\n          <div key={index}>\n            <div className={styles.maincontainer}>\n              <div className={styles.rowContainer}>\n                <div className={styles.unitContainer}>\n                  {item.transactionDateTime || \".\"}\n                </div>\n                <div className={styles.unitContainer}>\n                  {item.description || \".\"}\n                </div>\n                <div className={styles.unitContainer}>\n                  {item.details || \".\"}\n                </div>\n                <div className={styles.unitContainer}>\n                  {item.remarks || \".\"}\n                </div>\n                <div className={styles.unitContainer}>\n                  {item.contractor || \".\"}\n                </div>\n                <div className={styles.unitContainer}>\n                  {item.withdrawnAmount\n                    ? Number(item.withdrawnAmount).toLocaleString()\n                    : \".\"}\n                </div>\n                <div className={styles.unitContainer}>\n                  {item.depositAmount\n                    ? Number(item.depositAmount).toLocaleString()\n                    : \".\"}\n                </div>\n                <div className={styles.unitContainer}>\n                  {item.balanceAfter\n                    ? Number(item.balanceAfter).toLocaleString()\n                    : \".\"}\n                </div>\n                <div className={styles.unitContainer}>\n                  {item.branch || \".\"}\n                </div>\n                <div className={styles.unitContainer}>\n                  {item.account || \".\"}\n                </div>\n              </div>\n              <div className={styles.unitContainer}>\n                {item.loanStatus === \"o\" ? (\n                  <button\n                    className={styles.TableButton2}\n                    onClick={() => toggleExpanded(item.id)}\n                  >\n                    {expandedDeposits[item.id] ? \"숨기기\" : \"상세보기\"}\n                  </button>\n                ) : (\n                  <Link href={`/inputmoney/deposit/modify/${item.id}`}>\n                    <button className={styles.TableButton}>수정하기</button>\n                  </Link>\n                )}\n                <button\n                  className={styles.TableButton}\n                  onClick={() => handleDeleteDeposit(item.id)}\n                >\n                  삭제하기\n                </button>\n              </div>\n            </div>\n            {item.loanStatus === \"o\" && expandedDeposits[item.id] && item.allocationDetail && (\n              <div className={styles.allocationDetail}>\n                <pre style={{ whiteSpace: \"pre-wrap\" }}>\n                  {formatAllocationDetail(item.allocationDetail)}\n                </pre>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <p></p>\n      <h3>입금내역 추가</h3>\n      <p></p>\n      <form onSubmit={handleSubmit}>\n        {/* 상단 입력란: 거래일시, 적요, 기재내용, 비고 */}\n        <div className={styles.infoContainer}>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>거래일시</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"datetime-local\"\n                name=\"transactionDateTime\"\n                value={formData.transactionDateTime}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>적요</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"description\"\n                value={formData.description}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>기재내용</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"details\"\n                value={formData.details}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          {/* 추가: 비고 */}\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>비고</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"remarks\"\n                value={formData.remarks}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n        </div>\n        {/* 중단 입력란: 계약자, depositPhase1, 찾으신 금액, 맡기신 금액 */}\n        <div className={styles.infoContainer}>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>계약자</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"contractor\"\n                value={formData.contractor}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          {!isLoanRecord && (\n            <>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <label className={styles.title}>찾으신 금액</label>\n                </div>\n                <div className={styles.contentbody}>\n                  <InputboxGray\n                    type=\"text\"\n                    name=\"withdrawnAmount\"\n                    value={formData.withdrawnAmount}\n                    onChange={(e) => handleMoneyChange(e, setFormData)}\n                    onFocus={(e) => handleMoneyChange(e, setFormData)}\n                  />\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <label className={styles.title}>맡기신 금액</label>\n                </div>\n                <div className={styles.contentbody}>\n                  <InputboxGray\n                    type=\"text\"\n                    name=\"depositAmount\"\n                    value={formData.depositAmount}\n                    onChange={(e) => handleMoneyChange(e, setFormData)}\n                    onFocus={(e) => handleMoneyChange(e, setFormData)}\n                  />\n                </div>\n              </div>\n            </>\n          )}\n          {isLoanRecord && (\n            <div className={styles.unitbody}>\n              <div className={styles.titlebody}>\n                <label className={styles.title}>\n                  {isLoanRecord ? \"대출액+자납액\" : \"맡기신 금액\"}\n                </label>\n              </div>\n              <div className={styles.contentbody}>\n                {isLoanRecord ? (\n                  <InputboxGray\n                    type=\"text\"\n                    name=\"depositAmount\"\n                    value={computedDeposit.toLocaleString()}\n                    disabled\n                  />\n                ) : (\n                  <InputboxGray\n                    type=\"text\"\n                    name=\"depositAmount\"\n                    value={formData.depositAmount}\n                    onChange={(e) => handleMoneyChange(e, setFormData)}\n                    onFocus={(e) => handleMoneyChange(e, setFormData)}\n                  />\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        {/* 하단 입력란: 거래 후 잔액, 취급점, 계좌 */}\n        <div className={styles.infoContainer}>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>거래 후 잔액</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"balanceAfter\"\n                value={formData.balanceAfter}\n                onChange={(e) => handleMoneyChange(e, setFormData)}\n                onFocus={(e) => handleMoneyChange(e, setFormData)}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>취급점</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"branch\"\n                value={formData.branch}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>계좌</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"account\"\n                value={formData.account}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n        </div>\n        <div className={styles.infoContainer}>\n          <div className={styles.unitbody}>\n            <label className={styles.title}>\n              <input\n                type=\"checkbox\"\n                checked={isLoanRecord}\n                onChange={(e) => setIsLoanRecord(e.target.checked)}\n              />\n              대출/자납 기록인가요?\n            </label>\n          </div>\n          <div className={styles.unitbody}>\n            <label className={styles.title}>\n              <input\n                type=\"checkbox\"\n                checked={isRecordDeposit}\n                onChange={(e) => {\n                  setIsRecordDeposit(e.target.checked);\n                  if (!e.target.checked) {\n                    setFormData((prev) => ({ ...prev, depositPhase1: null }));\n                  }\n                }}\n              />\n              기록용 (1차 'x' 등)\n            </label>\n          </div>\n        </div>\n        {isRecordDeposit && (\n          <div className={styles.infoContainer}>\n            <div className={styles.unitbody}>\n              <div className={styles.titlebody}>\n                <label className={styles.title}>기록용 depositPhase1</label>\n              </div>\n              <div className={styles.contentbody}>\n                <InputboxGray\n                  type=\"text\"\n                  name=\"depositPhase1\"\n                  value={formData.depositPhase1 || \"\"}\n                  onChange={handleInputChange}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n        {isLoanRecord && (\n          <>\n            <p></p>\n            <h3>사용할 대출정보 입력</h3>\n            <div className={styles.infoContainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <label className={styles.title}>대출액</label>\n                </div>\n                <div className={styles.contentbody}>\n                  <InputboxGray\n                    type=\"text\"\n                    name=\"loanDetails.loanammount\"\n                    value={formData.loanDetails.loanammount}\n                    onChange={(e) => handleMoneyChange(e, setFormData)}\n                    onFocus={(e) => handleMoneyChange(e, setFormData)}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className={styles.infoContainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <label className={styles.title}>자납액</label>\n                </div>\n                <div className={styles.contentbody}>\n                  <InputboxGray\n                    type=\"text\"\n                    name=\"loanDetails.selfammount\"\n                    value={formData.loanDetails.selfammount}\n                    onChange={(e) => handleMoneyChange(e, setFormData)}\n                    onFocus={(e) => handleMoneyChange(e, setFormData)}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className={styles.infoContainer}>\n              <div className={styles.row}>\n                <div className={styles.unitbody}>\n                  <div className={styles.titlebody}>\n                    <label className={styles.title}>사용할 대출/자납 합계</label>\n                  </div>\n                  <div className={styles.contentbody}>\n                    <InputboxGray\n                      type=\"text\"\n                      name=\"loanDetails.loanselfsum\"\n                      value={computedDeposit.toLocaleString()}\n                      disabled\n                    />\n                  </div>\n                </div>\n                <div className={styles.unitbody}>\n                  <div className={styles.titlebody}>\n                    <label className={styles.title}>대출/자납 잔액</label>\n                  </div>\n                  <div className={styles.contentbody}>\n                    <InputboxGray\n                      type=\"text\"\n                      name=\"loanDetails.loanselfcurrent\"\n                      value={computedLoanBalance.toLocaleString()}\n                      disabled\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <h4>📌 진행 예정 납부 차수 선택 (복수 선택 가능)</h4>\n            <div className={styles.infoContainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>예상 잔액</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <p>\n                    💰 <strong>{remainingAmount.toLocaleString()}₩</strong>\n                  </p>\n                </div>\n              </div>\n            </div>\n            {pendingPhases.length > 0 ? (\n              <ul>\n                {pendingPhases.map((phase) => {\n                  const phaseAmount = phase.feesum ?? 0;\n                  const isSelected = selectedPhases.includes(phase.phaseNumber);\n                  const isDisabled = isLoanRecord\n                    ? false\n                    : remainingAmount < phaseAmount && !isSelected;\n                  return (\n                    <li key={phase.phaseNumber}>\n                      <div className={styles.infoContainer}>\n                        <div className={styles.unitbody}>\n                          <div className={styles.titlebody}>\n                            <span className={styles.phaseTitle}>\n                              {phase.phaseNumber}차 총액(잔액)\n                            </span>\n                          </div>\n                          <div\n                            className={`${styles.contentbody2} ${\n                              isSelected ? styles.selected : \"\"\n                            } ${isDisabled ? styles.disabledPhase : \"\"}`}\n                            onClick={() =>\n                              !isDisabled && handlePhaseSelection(phase)\n                            }\n                          >\n                            <div className={styles.phaseAmount}>\n                              {phaseAmount.toLocaleString()}₩{\" \"}\n                              {phase.sum != null && (\n                                <span>({Number(phase.sum).toLocaleString()}₩)</span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </li>\n                  );\n                })}\n              </ul>\n            ) : (\n              <p>진행 예정 납부 차수가 없습니다.</p>\n            )}\n          </>\n        )}\n        <div className={styles.buttonContainer}>\n          <button type=\"submit\" className={styles.contractButton}>\n            추가하기\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default DepositAddPage;\n"
                    }
                }
            },
            "loan": {
                "[id]": {
                    "__files__": {
                        "page.js": "\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"next/navigation\";\nimport Swal from \"sweetalert2\";\nimport styles from \"@/styles/DepositAdd.module.scss\";\nimport { InputboxGray } from \"@/components/Inputbox\";\nimport { fetchCustomerById, fetchLoanUpdate } from \"@/utils/api\";\n\n// 날짜 포맷팅 헬퍼 함수: \"yyyy-MM-dd\" 형태의 값에 시간 정보를 추가해 \"yyyy-MM-ddT00:00\" 형태로 반환\nconst formatDateTimeLocal = (dateStr) => {\n  if (!dateStr) return \"\";\n  if (dateStr.includes(\"T\")) return dateStr;\n  return dateStr + \"T00:00\";\n};\n\n// 숫자 입력값에 대해 실시간 포맷팅 (콤마 추가)\nconst handleMoneyChange = (e, setLoanData) => {\n  const { name, value } = e.target;\n  const numeric = value.replace(/\\D/g, \"\");\n  const formatted = numeric ? parseInt(numeric, 10).toLocaleString() : \"\";\n  setLoanData((prev) => ({ ...prev, [name]: formatted }));\n};\n\nfunction LoanUpdatePage() {\n  const { id: userId } = useParams();\n\n  const [loanData, setLoanData] = useState({\n    loandate: \"\",\n    loanbank: \"\",\n    loanammount: \"\",\n    selfdate: \"\",\n    selfammount: \"\",\n  });\n  const [initialLoanData, setInitialLoanData] = useState(null);\n  const [statusLoanExceed, setStatusLoanExceed] = useState(\"\");\n\n  useEffect(() => {\n    if (userId) {\n      fetchCustomerById(userId)\n        .then((customerData) => {\n          if (customerData.loan) {\n            const fetchedLoanData = {\n              loandate: formatDateTimeLocal(customerData.loan.loandate || \"\"),\n              loanbank: customerData.loan.loanbank || \"\",\n              loanammount: customerData.loan.loanammount\n                ? customerData.loan.loanammount.toString()\n                : \"\",\n              selfdate: formatDateTimeLocal(customerData.loan.selfdate || \"\"),\n              selfammount: customerData.loan.selfammount\n                ? customerData.loan.selfammount.toString()\n                : \"\",\n            };\n            setLoanData(fetchedLoanData);\n            setInitialLoanData(fetchedLoanData);\n          }\n          if (\n            customerData.status &&\n            customerData.status.loanExceedAmount != null\n          ) {\n            setStatusLoanExceed(customerData.status.loanExceedAmount.toString());\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching customer data:\", error);\n        });\n    }\n  }, [userId]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setLoanData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  // 현재 대출/자납 총액: 초기(저장된) 데이터 기준\n  const currentLoanTotal = initialLoanData\n    ? (Number(initialLoanData.loanammount.replace(/,/g, \"\")) || 0) +\n      (Number(initialLoanData.selfammount.replace(/,/g, \"\")) || 0)\n    : 0;\n\n  // 예상 대출/자납 총액: 현재 입력된 값\n  const expectedLoanTotal =\n    (Number(loanData.loanammount.replace(/,/g, \"\")) || 0) +\n    (Number(loanData.selfammount.replace(/,/g, \"\")) || 0);\n\n  // 현재 대출/자납 잔액: 고객의 대출초과액 (DB에 저장된 값)\n  const currentLoanBalance = statusLoanExceed ? Number(statusLoanExceed) : 0;\n  // 예상 대출/자납 잔액: 고객의 대출초과액에서 예상 총액 차감 (음수면 0)\n  const expectedLoanBalance = Math.max(0, currentLoanBalance - expectedLoanTotal);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!loanData.loandate || !loanData.loanbank || !loanData.loanammount) {\n      Swal.fire({\n        icon: \"warning\",\n        title: \"필수 입력값 누락\",\n        text: \"대출일자, 대출은행, 대출액은 필수 입력값입니다.\",\n      });\n      return;\n    }\n\n    const updatedLoan = {\n      loandate: loanData.loandate,\n      loanbank: loanData.loanbank,\n      loanammount: Number(loanData.loanammount.replace(/,/g, \"\")),\n      selfdate: loanData.selfdate,\n      selfammount: Number(loanData.selfammount.replace(/,/g, \"\")),\n    };\n\n    try {\n      await fetchLoanUpdate(userId, updatedLoan, () => {});\n      Swal.fire({\n        icon: \"success\",\n        title: \"수정 완료\",\n        text: \"대출/자납 정보가 성공적으로 수정되었습니다.\",\n      });\n      const customerData = await fetchCustomerById(userId);\n      if (\n        customerData.status &&\n        customerData.status.loanExceedAmount != null\n      ) {\n        setStatusLoanExceed(customerData.status.loanExceedAmount.toString());\n      }\n    } catch (error) {\n      console.error(\"Error updating loan data:\", error);\n      Swal.fire({\n        icon: \"error\",\n        title: \"수정 실패\",\n        text: \"대출/자납 정보 수정에 실패했습니다.\",\n      });\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <h2>대출/자납 정보 수정</h2>\n      <div className={styles.infoContainer}>\n        <div className={styles.unitbody}>\n          <div className={styles.titlebody}>\n            <span className={styles.title}>관리번호</span>\n          </div>\n          <div className={styles.contentbody}>\n            <span>{userId || \"N/A\"}</span>\n          </div>\n        </div>\n      </div>\n      <form onSubmit={handleSubmit}>\n        {/* 첫 번째 행: 대출일자 / 대출액 / 대출은행 */}\n        <div className={styles.infoContainer}>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>대출일자</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"datetime-local\"\n                name=\"loandate\"\n                value={loanData.loandate}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>대출액</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"loanammount\"\n                value={loanData.loanammount}\n                onChange={(e) => handleMoneyChange(e, setLoanData)}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>대출은행</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"loanbank\"\n                value={loanData.loanbank}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n        </div>\n        {/* 두 번째 행: 자납일 / 자납액 */}\n        <div className={styles.infoContainer}>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>자납일</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"datetime-local\"\n                name=\"selfdate\"\n                value={loanData.selfdate}\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <label className={styles.title}>자납액</label>\n            </div>\n            <div className={styles.contentbody}>\n              <InputboxGray\n                type=\"text\"\n                name=\"selfammount\"\n                value={loanData.selfammount}\n                onChange={(e) => handleMoneyChange(e, setLoanData)}\n              />\n            </div>\n          </div>\n        </div>\n        {/* 현재/예상 대출/자납 정보 표기 (수정하기 버튼 바로 위) */}\n        <div className={styles.infoContainer}>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <span className={styles.title}>현재 대출/자납 총액</span>\n            </div>\n            <div className={styles.contentbody}>\n              <span>{currentLoanTotal.toLocaleString()}₩</span>\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <span className={styles.title}>현재 대출/자납 잔액</span>\n            </div>\n            <div className={styles.contentbody}>\n              <span>{currentLoanBalance.toLocaleString()}₩</span>\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <span className={styles.title}>예상 대출/자납 총액</span>\n            </div>\n            <div className={styles.contentbody}>\n              <span>{expectedLoanTotal.toLocaleString()}₩</span>\n            </div>\n          </div>\n          <div className={styles.unitbody}>\n            <div className={styles.titlebody}>\n              <span className={styles.title}>예상 대출/자납 잔액</span>\n            </div>\n            <div className={styles.contentbody}>\n              <span>{expectedLoanBalance.toLocaleString()}₩</span>\n            </div>\n          </div>\n        </div>\n        <div className={styles.buttonContainer}>\n          <button type=\"submit\" className={styles.contractButton}>\n            수정하기\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default LoanUpdatePage;\n"
                    }
                }
            },
            "payinfo": {
                "[id]": {
                    "[cha]": {
                        "__files__": {
                            "page.js": "// src/app/inputmoney/payinfo/[id]/[cha].js\n\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { useForm } from \"react-hook-form\";\nimport { userinfoSelector } from \"@/utils/selector\";\nimport { useridState, chasuState } from \"@/utils/atom\";\nimport { useRecoilValueLoadable, useRecoilState } from \"recoil\";\nimport { fetchPhaseData, updatePhaseDataPartial } from \"@/utils/api\";\nimport { Inputbox2, Inputbox_M } from \"@/components/Inputbox\";\nimport { Button_Y, Button_N } from \"@/components/Button\";\nimport styles from \"@/styles/Inputmoneypay.module.scss\";\nimport { BsDatabase } from \"react-icons/bs\";\nimport withAuth from \"@/utils/hoc/withAuth\";\n\n// 숫자 포맷 함수\nconst formatNumber = (value) => {\n  if (!value) return \"0\";\n  const numberString = value.toString().replace(/[^0-9]/g, \"\");\n  return numberString.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\nconst parseNumber = (value) => {\n  if (!value) return \"0\";\n  return value.toString().replace(/,/g, \"\");\n};\n\nfunction Inputmoneypay() {\n  const { register, handleSubmit, setValue, watch } = useForm();\n  // 수정 가능한 필드들\n  const [charge, setCharge] = useState(\"0\");       // 부담금\n  const [service, setService] = useState(\"0\");     // 업무대행비\n  const [discount, setDiscount] = useState(\"0\");   // 할인액\n  const [exemption, setExemption] = useState(\"0\"); // 면제액\n  const [move, setMove] = useState(\"\");            // 이동\n\n  // 읽기 전용 필드\n  const [charged, setCharged] = useState(\"0\");     // 납입금액 (수정 불가)\n  const [feesum, setFeesum] = useState(0);         // 총액 (계산용)\n  const [total, setTotal] = useState(0);           // 남은금액 (계산용)\n\n  const pathname = usePathname();\n  const router = useRouter();\n\n  const [IdState, setIdState] = useRecoilState(useridState);\n  const [ChasuState, setChasuState] = useRecoilState(chasuState);\n  const [phaseId, setPhaseId] = useState(null);\n  const [userChasuData, setUserChasuData] = useState(null);\n\n  const [userData, setUserData] = useState(null);\n  const userselectordata = useRecoilValueLoadable(userinfoSelector);\n\n  // URL에서 userid와 chasu 추출\n  useEffect(() => {\n    const regex = /\\/(\\d+)\\/(\\d+)$/;\n    const match = pathname.match(regex);\n\n    if (match) {\n      const extractedId = parseInt(match[1], 10);\n      const extractedChasu = parseInt(match[2], 10);\n      setIdState(extractedId);\n      setChasuState(extractedChasu);\n    }\n  }, [pathname, setIdState, setChasuState]);\n\n  // 사용자 정보 가져오기\n  useEffect(() => {\n    if (userselectordata.state === \"hasValue\") {\n      const userdata = userselectordata.contents;\n      if (userdata === undefined) {\n        console.log(\"잘못된 접근입니다\");\n      } else {\n        setUserData(userdata);\n      }\n    }\n  }, [userselectordata]);\n\n  // Phase 데이터 가져오기\n  useEffect(() => {\n    if (IdState && ChasuState) {\n      fetchPhaseData(IdState, ChasuState)\n        .then((phase) => {\n          console.log(phase);\n          if (phase) {\n            setUserChasuData(phase);\n            setPhaseId(phase.id);\n            setCharge(formatNumber(phase.charge));\n            setService(formatNumber(phase.service));\n            setDiscount(formatNumber(phase.discount));\n            setExemption(formatNumber(phase.exemption));\n            setMove(phase.move || \"\");\n            setCharged(formatNumber(phase.charged));\n          } else {\n            console.log(\"해당 차수가 존재하지 않습니다.\");\n          }\n        })\n        .catch((error) => {\n          console.error(\"Phase 데이터를 가져오는 중 오류 발생:\", error);\n        });\n    }\n  }, [IdState, ChasuState]);\n\n  // 남은금액 및 총액 계산 (수정 가능한 값 기준)\n  useEffect(() => {\n    calculateTotal();\n  }, [charge, service, discount, exemption, charged]);\n\n  const calculateTotal = () => {\n    const chargeValue = parseInt(parseNumber(charge)) || 0;\n    const serviceValue = parseInt(parseNumber(service)) || 0;\n    const discountValue = parseInt(parseNumber(discount)) || 0;\n    const exemptionValue = parseInt(parseNumber(exemption)) || 0;\n    const chargedValue = parseInt(parseNumber(charged)) || 0;\n\n    const feesumValue = chargeValue + serviceValue - discountValue - exemptionValue;\n    setFeesum(feesumValue);\n\n    const totalValue = feesumValue - chargedValue;\n    setTotal(totalValue);\n  };\n\n  const onChange = (e) => {\n    const { name, value } = e.target;\n    const formattedValue = formatNumber(value);\n\n    switch (name) {\n      case \"charge\":\n        setCharge(formattedValue === \"0\" ? \"\" : formattedValue);\n        break;\n      case \"service\":\n        setService(formattedValue === \"0\" ? \"\" : formattedValue);\n        break;\n      case \"discount\":\n        setDiscount(formattedValue === \"0\" ? \"\" : formattedValue);\n        break;\n      case \"exemption\":\n        setExemption(formattedValue === \"0\" ? \"\" : formattedValue);\n        break;\n      case \"move\":\n        setMove(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // 제출 시 수정 가능한 필드만 전송 (납입금액은 수정하지 않음)\n  const onSubmit = (data) => {\n    const partialData = {\n      charge: parseNumber(charge),\n      service: parseNumber(service),\n      discount: parseNumber(discount),\n      exemption: parseNumber(exemption),\n      move: move,\n    };\n\n    if (IdState && ChasuState) {\n      updatePhaseDataPartial(IdState, ChasuState, partialData)\n        .then(() => {\n          router.push(`/inputmoney/userinfo/${IdState}`);\n        })\n        .catch((error) => {\n          console.error(\"Phase 업데이트 중 오류 발생:\", error);\n        });\n    } else {\n      console.error(\"유효한 고객 ID 또는 차수 정보가 없습니다.\");\n    }\n  };\n\n  // planneddate, fullpaiddate 등은 읽기 전용으로 처리\n  const plannedDateValue =\n    userChasuData &&\n    userChasuData.planneddate &&\n    userChasuData.planneddate.match(/^\\d{4}-\\d{2}-\\d{2}$/)\n      ? userChasuData.planneddate\n      : \"\";\n  const fullPaidDateValue =\n    userChasuData &&\n    userChasuData.fullpaiddate &&\n    userChasuData.fullpaiddate.match(/^\\d{4}-\\d{2}-\\d{2}$/)\n      ? userChasuData.fullpaiddate\n      : \"\";\n\n  return (\n    <>\n      {userChasuData &&\n        userselectordata.state === \"hasValue\" &&\n        userData && (\n          <div className={styles.Container}>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className={styles.Mainbody}>\n                <div className={styles.MainTitle}>\n                  <div className={styles.MainTitle1}>\n                    <div className={styles.SearchClientNum}>\n                      <div className={styles.SearchFont1}>회원번호 : </div>\n                      <div className={styles.SearchFont2}>{IdState}</div>\n                    </div>\n                    <div className={styles.SearchClientNum}>\n                      <div className={styles.SearchFont1}>성함 : </div>\n                      <div className={styles.SearchFont2}>\n                        {userData.customerData?.name}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className={styles.InputBody}>\n                  <div className={styles.InputBodyTitle}>\n                    <div className={styles.IBTIcon}>\n                      <div className={styles.Icon} style={{ color: \"#7152F3\" }}>\n                        <BsDatabase style={{ width: \"100%\", height: \"100%\" }} />\n                      </div>\n                    </div>\n                    <div className={styles.IBTText}>\n                      {ChasuState}차 납입\n                    </div>\n                  </div>\n                  <div className={styles.Line}></div>\n\n                  {/* 예정일자, 완납일자는 읽기 전용 */}\n                  <div className={styles.SIBLayer}>\n                    <div className={styles.SearchFont}>완납일자</div>\n                    <Inputbox2\n                      type=\"date\"\n                      {...register(\"fullpaiddate\")}\n                      defaultValue={fullPaidDateValue}\n                      readOnly\n                    />\n                  </div>\n                  <div className={styles.SIBLayer}>\n                    <div className={styles.SearchFont}>예정일자</div>\n                    <Inputbox2\n                      type=\"date\"\n                      {...register(\"planneddate\")}\n                      defaultValue={plannedDateValue}\n                      readOnly\n                    />\n                  </div>\n                  {/* 수정 가능한 필드 */}\n                  <div className={styles.IBLayer}>\n                    <Inputbox_M\n                      type=\"text\"\n                      placeholder=\"부담금\"\n                      name=\"charge\"\n                      {...register(\"charge\")}\n                      onChange={onChange}\n                      value={charge}\n                    />\n                    <Inputbox_M\n                      type=\"text\"\n                      placeholder=\"업무대행비\"\n                      name=\"service\"\n                      {...register(\"service\")}\n                      onChange={onChange}\n                      value={service}\n                    />\n                  </div>\n                  <div className={styles.IBLayer}>\n                    <Inputbox_M\n                      type=\"text\"\n                      placeholder=\"할인액\"\n                      name=\"discount\"\n                      {...register(\"discount\")}\n                      onChange={onChange}\n                      value={discount}\n                    />\n                    <Inputbox_M\n                      type=\"text\"\n                      placeholder=\"면제액\"\n                      name=\"exemption\"\n                      {...register(\"exemption\")}\n                      onChange={onChange}\n                      value={exemption}\n                    />\n                  </div>\n                  <div className={styles.IBLayer}>\n                    <Inputbox_M\n                      type=\"text\"\n                      placeholder=\"이동\"\n                      name=\"move\"\n                      {...register(\"move\")}\n                      onChange={onChange}\n                      value={move}\n                    />\n                    {/* 납입금액은 readOnly */}\n                    <Inputbox_M\n                      type=\"text\"\n                      placeholder=\"납입금액\"\n                      name=\"charged\"\n                      {...register(\"charged\")}\n                      value={charged}\n                      readOnly\n                    />\n                  </div>\n                  <div className={styles.IBLayer}>\n                    <div className={styles.IBInputBox_S}>\n                      <div className={styles.SearchFont1}>총액 :</div>\n                      <div className={styles.SearchFont2}>\n                        {feesum.toLocaleString()}₩\n                      </div>\n                    </div>\n                  </div>\n                  <div className={styles.IBLayer}>\n                    <div className={styles.IBInputBox_S}>\n                      <div className={styles.SearchFont1}>남은금액 :</div>\n                      <div className={styles.SearchFont2}>\n                        {total.toLocaleString()}₩\n                      </div>\n                    </div>\n                  </div>\n                  <div className={styles.IBBottonLayer}>\n                    <Link href={`/inputmoney/userinfo/${IdState}`}>\n                      <Button_N type=\"button\">\n                        <div className={styles.BottonFont2}>취소</div>\n                      </Button_N>\n                    </Link>\n                    <Button_Y type=\"submit\">\n                      <div className={styles.BottonFont}>확인</div>\n                    </Button_Y>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        )}\n    </>\n  );\n}\n\nexport default withAuth(Inputmoneypay);\n"
                        }
                    }
                }
            },
            "userinfo": {
                "[id]": {
                    "__files__": {
                        "page.js": "\"use client\";\n// src/app/inputmoney/userinfo/[id]/page.js\n\nimport styles from \"@/styles/Inputmoney.module.scss\";\nimport { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { usePathname, useRouter } from \"next/navigation\";\n\nimport { useridState } from \"@/utils/atom\";\nimport {\n  useRecoilValueLoadable,\n  useRecoilState,\n  useRecoilRefresher_UNSTABLE,\n} from \"recoil\";\nimport { userinfoSelector } from \"@/utils/selector\";\n\nimport { BsBagDash, BsDatabase } from \"react-icons/bs\";\nimport { FaEdit, FaFileInvoice } from \"react-icons/fa\";\nimport ChasuPreBody from \"@/components/ChasuPreBody\";\nimport ChasuFinBody from \"@/components/ChasuFinBody\";\nimport { SearchButton, ModifyButton } from \"@/components/Button\";\n\nimport withAuth from \"@/utils/hoc/withAuth\";\nimport { cancelCustomer } from \"@/utils/api\";\n\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nconst MySwal = withReactContent(Swal);\n\nfunction Inputmoney() {\n  const refreshUserInfo = useRecoilRefresher_UNSTABLE(userinfoSelector); // Recoil 데이터 강제 새로고침 훅\n  const pathname = usePathname();\n  const splitpath = pathname.split(\"/\");\n  const [IdState, setIdState] = useRecoilState(useridState);\n\n  const [userData, setUserData] = useState(null);\n  const [loanData, setLoanData] = useState(null);\n  const [loanex, setLoanex] = useState(null);\n\n  const router = useRouter();\n\n  useEffect(() => {\n    if (splitpath.length > 3) {\n      setIdState(splitpath[3]);\n    }\n  }, [splitpath, setIdState]);\n\n  const userselectordata = useRecoilValueLoadable(userinfoSelector);\n\n  useEffect(() => {\n    // 컴포넌트가 마운트될 때마다 userinfoSelector를 강제로 새로고침\n    refreshUserInfo();\n  }, [IdState, refreshUserInfo]);\n\n  useEffect(() => {\n    if (userselectordata.state === \"hasValue\") {\n      const userdata = userselectordata.contents;\n      if (userdata === undefined) {\n        console.log(\"잘못된 접근입니다\");\n      } else {\n        setUserData(userdata);\n        setLoanData(userdata.loan);\n        setLoanex(userdata.status.loanExceedAmount);\n      }\n    }\n  }, [userselectordata]);\n\n  // 상태 업데이트 후 loanex 값 확인 (디버깅용)\n  useEffect(() => {\n    console.log(\"Updated loanex:\", loanex);\n  }, [loanex]);\n\n  // 기존 해약 로직은 그대로 유지합니다.\n  const handleCancel = () => {\n    MySwal.fire({\n      title: \"해약하시겠습니까?\",\n      text: \"해약을 진행하면 가입 타입이 'x'로 변경됩니다.\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"예\",\n      cancelButtonText: \"아니오\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        cancelCustomer(IdState)\n          .then(() => {\n            MySwal.fire(\n              \"해약 완료!\",\n              \"고객의 가입 타입이 'x'로 변경되었습니다.\",\n              \"success\"\n            );\n            setTimeout(() => {\n              // 해약 후 데이터 새로고침\n              refreshUserInfo();\n              router.push(`/inputmoney/userinfo/${IdState}`);\n            }, 2000);\n          })\n          .catch((error) => {\n            MySwal.fire(\n              \"해약 실패!\",\n              \"해약 처리 중 오류가 발생했습니다.\",\n              \"error\"\n            );\n          });\n      }\n    });\n  };\n\n  // 대출추가 버튼 클릭 시 지정된 경로로 이동하는 함수\n  const handleLoanAdd = () => {\n    router.push(`/inputmoney/loan/${userData.id}`);\n  };\n\n  return (\n    <>\n      {userselectordata.state === \"hasValue\" && userData && (\n        <div className={styles.Container}>\n          <div className={styles.Mainbody}>\n            <div className={styles.SearchBody}>\n              <div className={styles.SearchNum}>\n                <div className={styles.SearchFont1}>관리번호 :</div>\n                <div className={styles.SearchFont2}>{userData.id}</div>\n              </div>\n              <div className={styles.SearchName}>\n                <div className={styles.SearchFont1}>성함 :</div>\n                <div className={styles.SearchFont2}>\n                  {userData.customerData?.name}\n                </div>\n              </div>\n              <div className={styles.SearchCha}>\n                <div className={styles.SearchFont1}>가입차순 :</div>\n                <div className={styles.SearchFont2}>{userData.batch}</div>\n              </div>\n              <div className={styles.SearchType}>\n                <div className={styles.SearchFont1}>가입타입 :</div>\n                <div className={styles.SearchFont2}>{userData.type}</div>\n              </div>\n            </div>\n            <div className={styles.buttonContainer}>\n              <Link href={`/inputmoney/deposit/${userData.id}`}>\n                <button className={styles.contractButton}>\n                  <FaFileInvoice className={styles.editIcon} />\n                  입금내역 확인/추가\n                </button>\n              </Link>\n            </div>\n            <div className={styles.MainContent}>\n              <div\n                className={styles.Content}\n                style={{ overflowY: \"auto\", maxHeight: \"calc(100vh - 200px)\" }}\n              >\n                <div className={styles.ContentTitle}>\n                  <div className={styles.ContentTitleIcon_G}></div>\n                  <div className={styles.ContentTitleFont}>진행된 납부</div>\n                </div>\n                <ChasuFinBody userId={userData.id} />\n              </div>\n              <div\n                className={styles.Content}\n                style={{ overflowY: \"auto\", maxHeight: \"calc(100vh - 200px)\" }}\n              >\n                <div className={styles.ContentTitle}>\n                  <div className={styles.ContentTitleIcon_Y}></div>\n                  <div className={styles.ContentTitleFont}>진행 예정 납부</div>\n                </div>\n                <ChasuPreBody userId={userData.id} />\n              </div>\n              <div className={styles.Content}>\n                <div className={styles.ContentTitle}>\n                  <div className={styles.ContentTitleIcon_R}></div>\n                  <div className={styles.ContentTitleFont}>\n                    대출 / 자납 / 해약\n                  </div>\n                </div>\n                <div className={styles.ContentBody_L}>\n                  <div className={styles.ContentBodyTitle_L}>\n                    <div className={styles.CBTIcon}>\n                      <div className={styles.Icon}>\n                        <BsBagDash style={{ width: \"100%\", height: \"100%\" }} />\n                      </div>\n                    </div>\n                    <div className={styles.CBTText}>\n                      <div className={styles.CBTCha}>\n                        <div className={styles.CBTChaFont}>대출 / 자납</div>\n                      </div>\n                      <div className={styles.CBTDate}>\n                        <div className={styles.CBTDateFont}>\n                          대출일 :{\" \"}\n                          {loanData?.loandate\n                            ? loanData.loandate.slice(0, 10)\n                            : \"없음\"}\n                        </div>\n                        <div className={styles.CBTDateFont}>\n                          자납일 :{\" \"}\n                          {loanData?.selfdate\n                            ? loanData.selfdate.slice(0, 10)\n                            : \"없음\"}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  {/* 대출추가 버튼: 클릭 시 deposit/loan/[id] 페이지로 이동 */}\n                  <div className={styles.CBBottonBody}>\n                    <ModifyButton onClick={handleLoanAdd}>\n                      <div className={styles.CBBottonFont}>대출추가</div>\n                    </ModifyButton>\n                  </div>\n                  <div className={styles.CBSum}>\n                    <div className={styles.CBMoneyImg}>\n                      <div className={styles.Icon2}>\n                        <BsDatabase style={{ width: \"100%\", height: \"100%\" }} />\n                      </div>\n                    </div>\n                    <div className={styles.CBSumText}>대출액</div>\n                    <div className={styles.CBSumNum}>\n                      {(loanData?.loanammount || 0).toLocaleString()} ₩\n                    </div>\n                  </div>\n                  <div className={styles.CBSum}>\n                    <div className={styles.CBMoneyImg}>\n                      <div className={styles.Icon2}>\n                        <BsDatabase style={{ width: \"100%\", height: \"100%\" }} />\n                      </div>\n                    </div>\n                    <div className={styles.CBSumText}>자납액</div>\n                    <div className={styles.CBSumNum}>\n                      {(loanData?.selfammount || 0).toLocaleString()} ₩\n                    </div>\n                  </div>\n                  <div className={styles.CBSum}>\n                    <div className={styles.CBMoneyImg}>\n                      <div className={styles.Icon2}>\n                        <BsDatabase style={{ width: \"100%\", height: \"100%\" }} />\n                      </div>\n                    </div>\n                    <div className={styles.CBSumText}>잔액</div>\n                    <div className={styles.CBSumNum}>\n                      {(loanex || 0).toLocaleString()} ₩\n                    </div>\n                  </div>\n                  <div className={styles.CBSum}>\n                    <div className={styles.CBMoneyImg}>\n                      <div className={styles.Icon2}>\n                        <BsDatabase style={{ width: \"100%\", height: \"100%\" }} />\n                      </div>\n                    </div>\n                    <div className={styles.CBSumText}>총액</div>\n                    <div className={styles.CBSumNum}>\n                      {(\n                        (loanData?.selfammount || 0) +\n                        (loanData?.loanammount || 0)\n                      ).toLocaleString()} ₩\n                    </div>\n                  </div>\n                </div>\n                {/* 해약 섹션 */}\n                <div className={styles.ContentBody}>\n                  <div className={styles.ContentBodyTitle}>\n                    <div className={styles.CBTIcon}>\n                      <div className={styles.Icon}>\n                        <BsBagDash style={{ width: \"100%\", height: \"100%\" }} />\n                      </div>\n                    </div>\n                    <div className={styles.CBTText}>\n                      <div className={styles.CBTCha}>\n                        <div className={styles.CBTChaFont}>해약</div>\n                      </div>\n                      <div className={styles.CBTDate}>\n                        <div className={styles.CBTDateFont}>해약 시 주의</div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className={styles.CBBottonBody}>\n                    <ModifyButton onClick={handleCancel}>\n                      <div className={styles.CBBottonFont}>해약하기</div>\n                    </ModifyButton>\n                  </div>\n                </div>\n                {/* 해약 섹션 끝 */}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default withAuth(Inputmoney);\n"
                    }
                }
            }
        },
        "latefees": {
            "__files__": {
                "page.js": "// pages/latefees/page.js\n\"use client\";\n\nimport { useState } from \"react\";\nimport SearchForm from \"@/components/SearchForm\";\nimport withAuth from \"@/utils/hoc/withAuth\";\nimport LateFeeList from \"@/components/LateFeeList\";\nimport { saveAs } from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport styles from \"@/styles/Latefees.module.scss\"; // 스타일 임포트\nimport categoryMapping from \"@/utils/categoryMapping\";\nimport { FaPrint } from \"react-icons/fa6\"; // FaPrint 아이콘 임포트\n\nfunction LateFees() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [lateFees, setLateFees] = useState([]);\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: \"ascending\",\n  });\n\n  // 엑셀 내보내기 핸들러\n  const handleExport = () => {\n    if (lateFees.length === 0) {\n      alert(\"내보낼 데이터가 없습니다.\");\n      return;\n    }\n\n    // 정렬된 데이터를 기준으로 엑셀 생성\n    const sortedData = [...lateFees];\n    if (sortConfig.key) {\n      sortedData.sort((a, b) => {\n        let aValue = a[sortConfig.key];\n        let bValue = b[sortConfig.key];\n\n        // null 또는 undefined 처리\n        if (aValue === null || aValue === undefined) return 1;\n        if (bValue === null || bValue === undefined) return -1;\n\n        if (typeof aValue === \"string\") {\n          aValue = aValue.toLowerCase();\n          bValue = bValue.toLowerCase();\n        }\n\n        if (aValue < bValue) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (aValue > bValue) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n\n    // 엑셀에 넣을 데이터 포맷팅\n    const exportData = sortedData.map((fee) => ({\n      ID: fee.id,\n      \"마지막 미납 차수\": fee.lastUnpaidPhaseNumber || \"없음\",\n      분류: categoryMapping[fee.customertype] || \"N/A\",\n      성명: fee.name || \"N/A\",\n      가입일: fee.registerdate ? fee.registerdate.slice(0, 10) : \"N/A\",\n      연체기준일: fee.lateBaseDate ? fee.lateBaseDate.slice(0, 10) : \"N/A\",\n      최근납부: fee.recentPaymentDate\n        ? fee.recentPaymentDate.slice(0, 10)\n        : \"N/A\",\n      일수: fee.daysOverdue,\n      \"연체율 (%)\": fee.lateRate.toFixed(2),\n      연체금액: fee.overdueAmount,\n      납입금액: fee.paidAmount,\n      연체료: fee.lateFee,\n      \"내야할 돈 합계\": fee.totalOwed,\n    }));\n\n    const worksheet = XLSX.utils.json_to_sheet(exportData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"LateFees\");\n\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: \"xlsx\",\n      type: \"array\",\n    });\n    const data = new Blob([excelBuffer], {\n      type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\",\n    });\n\n    // 현재 날짜를 \"YYYYMMDD\" 형식으로 포맷팅\n    const currentDate = new Date();\n    const year = currentDate.getFullYear();\n    const month = String(currentDate.getMonth() + 1).padStart(2, \"0\");\n    const day = String(currentDate.getDate()).padStart(2, \"0\");\n    const formattedDate = `${year}${month}${day}`;\n\n    saveAs(data, `LateFees_${formattedDate}.xlsx`);\n  };\n\n  return (\n    <>\n      <div className={styles.headerContainer}>\n        <h3> </h3>\n      </div>\n      <SearchForm\n        name={name}\n        setName={setName}\n        number={number}\n        setNumber={setNumber}\n      />\n      <h3></h3>\n      <div className={styles.exportContainer}>\n          <FaPrint\n            onClick={handleExport}\n            style={{color:\"#5c41c2\"}}\n            className={styles.printIcon}\n            title=\"엑셀로 출력\" \n          />\n          <button onClick={handleExport} className={styles.exportButton}>\n            엑셀로 출력\n          </button>\n        </div>\n      <LateFeeList\n        name={name}\n        number={number}\n        linkBase=\"/latefees/\"\n        setLateFees={setLateFees}\n        sortConfig={sortConfig}\n        setSortConfig={setSortConfig}\n      />\n    </>\n  );\n}\n\nexport default withAuth(LateFees);\n"
            }
        },
        "login": {
            "__files__": {
                "page.js": "\"use client\";\nimport { LoginInputbox } from \"@/components/Inputbox\";\nimport { Button, CheckButton } from \"@/components/Button\";\nimport styles from \"@/styles/Login.module.scss\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { fetchLogin } from \"@/utils/api\";\nimport Swal from \"sweetalert2\";\nimport AuthContext from \"@/utils/context/AuthContext\";\n\nexport default function Login() {\n  const { login } = useContext(AuthContext);\n  const [userform, setUserform] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const handleChange = (e) => {\n    setUserform({\n      ...userform,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetchLogin(userform.username, userform.password);\n      const token = response.data.token;\n      login(userform.username, token);\n      Swal.fire({\n        title: \"로그인 성공\",\n        text: \"로그인에 성공했습니다!\",\n        icon: \"success\",\n        confirmButtonText: \"확인\",\n      }).then(() => {\n        router.push(\"/dashboard\");\n      });\n      console.log(\"Login successful:\", response.data);\n    } catch (error) {\n      const errorMessage =\n        error?.response?.data?.message || \"로그인에 실패했습니다.\";\n      console.error(\"Login error:\", errorMessage);\n      Swal.fire({\n        title: \"로그인 실패\",\n        text: errorMessage,\n        icon: \"error\",\n        confirmButtonText: \"확인\",\n      });\n    }\n  };\n\n  if (isLoggedIn) {\n    return (\n      <div className={styles.container}>\n        <div className={styles.childcontainer}>\n          <h1>이미 로그인 되어있습니다</h1>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.childcontainer}>\n        <h1>환영합니다👋</h1>\n        <h3>민간임대주택 회원관리시스템에 오신것을 환영합니다!</h3>\n        <form onSubmit={handleSubmit}>\n          <LoginInputbox\n            name=\"username\"\n            placeholder=\"아이디\"\n            onChange={handleChange}\n          />\n          <LoginInputbox\n            name=\"password\"\n            placeholder=\"비밀번호\"\n            type=\"password\"\n            onChange={handleChange}\n          />\n          <div className={styles.checkcontainer}>\n            <CheckButton />\n            <span className={styles.remembertext}>아이디 기억하기</span>\n          </div>\n          <Button type=\"submit\">로그인</Button>\n        </form>\n      </div>\n    </div>\n  );\n}\n"
            }
        },
        "modify": {
            "[id]": {
                "__files__": {
                    "page.js": "\"use client\";\nimport styles from \"@/styles/Create.module.scss\";\nimport Swal from \"sweetalert2\";\nimport {\n  Inputbox,\n  PostInputbox2,\n  InputAreabox,\n  DropInputbox,\n  FileInputbox,\n  Checkbox,\n  MGMInputbox,\n} from \"@/components/Inputbox\";\nimport { Button_Y } from \"@/components/Button\";\nimport withAuth from \"@/utils/hoc/withAuth\";\n\nimport { useForm, Controller } from \"react-hook-form\";\nimport { useState, useEffect } from \"react\";\nimport {\n  updateUser,\n  fetchCustomerById,\n  createFile,\n  deleteFile,\n} from \"@/utils/api\";\nimport { useRouter } from \"next/navigation\";\n\nimport {\n  banklist,\n  classificationlist,\n  typeidlist,\n  typelist,\n  grouplist,\n  turnlist,\n} from \"@/components/droplistdata\";\n\nfunction Modify({ params }) {\n  const router = useRouter();\n  const { id } = params;\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    watch,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const [isupload, setIsupload] = useState({\n    isuploaded: false,\n    sealcertificateprovided: false,\n    selfsignatureconfirmationprovided: false,\n    commitmentletterprovided: false,\n    idcopyprovided: false,\n    freeoption: false,\n    forfounding: false,\n    agreement: false,\n    preferenceattachment: false,\n    prizeattachment: false,\n    exemption7: false,\n    investmentfile: false,\n    contract: false,\n  });\n\n  const [file, setFile] = useState(null);\n  const [existingFileInfo, setExistingFileInfo] = useState(\"\");\n\n  const [initialLegalPostNumber, setInitialLegalPostNumber] = useState(\"\");\n  const [initialLegalAddress, setInitialLegalAddress] = useState(\"\");\n  const [initialPostreceivePostNumber, setInitialPostreceivePostNumber] = useState(\"\");\n  const [initialPostreceiveAddress, setInitialPostreceiveAddress] = useState(\"\");\n\n  const [formattedRegisterPrice, setFormattedRegisterPrice] = useState(\"\");\n  const [formattedDepositAmmount, setFormattedDepositAmmount] = useState(\"\");\n\n  // 휴대폰 번호 화면 표시값 (기본 접두사 \"010)\" 제공)\n  const [phoneDisplay, setPhoneDisplay] = useState(\"010)\");\n\n  const formatNumberWithCommas = (value) => {\n    const numericValue = value.replace(/[^0-9]/g, \"\");\n    if (!numericValue) return \"\";\n    return parseInt(numericValue, 10).toLocaleString();\n  };\n\n  const handleRegisterPriceChange = (e) => {\n    const formattedValue = formatNumberWithCommas(e.target.value);\n    setFormattedRegisterPrice(formattedValue);\n    const rawValue = formattedValue.replace(/,/g, \"\");\n    setValue(\"registerprice\", rawValue ? parseInt(rawValue, 10) : null);\n  };\n\n  const handleDepositAmmountChange = (e) => {\n    const formattedValue = formatNumberWithCommas(e.target.value);\n    setFormattedDepositAmmount(formattedValue);\n    const rawValue = formattedValue.replace(/,/g, \"\");\n    setValue(\"deposits.depositammount\", rawValue ? parseInt(rawValue, 10) : null);\n  };\n\n  // 휴대폰 번호 포맷팅 핸들러 (Modify 페이지)\n  const handlePhoneNumberChange = (e, onChange) => {\n    let value = e.target.value;\n    if (value === \"010)\") {\n      setPhoneDisplay(\"010)\");\n      onChange(\"\");\n      return;\n    }\n    if (value.startsWith(\"010)\")) {\n      value = value.slice(4);\n    }\n    let digits = value.replace(/\\D/g, \"\");\n    digits = digits.substring(0, 8);\n    let formatted = digits;\n    if (digits.length > 4) {\n      formatted = digits.slice(0, 4) + \"-\" + digits.slice(4);\n    }\n    const displayValue = \"010)\" + formatted;\n    setPhoneDisplay(displayValue);\n    onChange(digits);\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const customer = await fetchCustomerById(id);\n        console.log(\"받은 고객 데이터:\", customer);\n        if (customer) {\n          setInitialLegalPostNumber(customer.legalAddress.postnumber || \"\");\n          setInitialLegalAddress(customer.legalAddress.post || \"\");\n          setInitialPostreceivePostNumber(customer.postreceive.postnumberreceive || \"\");\n          setInitialPostreceiveAddress(customer.postreceive.postreceive || \"\");\n\n          // reset 시 기존 해지 정보와 추가 해지정보 초기값 설정\n          reset({\n            customertype: customer.customertype,\n            type: customer.type,\n            groupname: customer.groupname,\n            turn: customer.turn,\n            batch: customer.batch,\n            registerdate: customer.registerdate,\n            registerprice: customer.registerprice,\n            registerpath: customer.registerpath,\n            additional: customer.additional || \"\",\n            prizewinning: customer.prizewinning,\n            CustomerData: {\n              name: customer.customerData.name,\n              phone: customer.customerData.phone,\n              resnumfront: customer.customerData.resnumfront,\n              resnumback: customer.customerData.resnumback,\n              email: customer.customerData.email,\n            },\n            LegalAddress: {\n              postnumber: customer.legalAddress.postnumber,\n              post: customer.legalAddress.post,\n              detailaddress: customer.legalAddress.detailaddress,\n            },\n            Postreceive: {\n              postnumberreceive: customer.postreceive.postnumberreceive,\n              postreceive: customer.postreceive.postreceive,\n              detailaddressreceive: customer.postreceive.detailaddressreceive,\n            },\n            Financial: {\n              bankname: customer.financial.bankname,\n              accountnum: customer.financial.accountnum,\n              accountholder: customer.financial.accountholder,\n              trustcompanydate: customer.financial.trustcompanydate,\n            },\n            deposits: {\n              depositdate: customer.deposits?.depositdate,\n              depositammount: customer.deposits?.depositammount,\n            },\n            responsible: {\n              generalmanagement: customer.responsible?.generalmanagement || \"\",\n              division: customer.responsible?.division || \"\",\n              team: customer.responsible?.team || \"\",\n              managername: customer.responsible?.managername || \"\",\n            },\n            MGM: customer.mgm,\n            dahim: customer.dahim,\n            firstemp: customer.firstemp,\n            secondemp: customer.secondemp,\n            meetingattend: customer.meetingattend,\n            agenda: customer.agenda,\n            exemption7: customer.attachments?.exemption7,\n            investmentfile: customer.attachments?.investmentfile,\n            contract: customer.attachments?.contract,\n            agreement: customer.attachments?.agreement,\n            preferenceattachment: customer.attachments?.preferenceattachment,\n            prizeattachment: customer.attachments?.prizeattachment,\n            sealcertificateprovided: customer.attachments?.sealcertificateprovided,\n            selfsignatureconfirmationprovided: customer.attachments?.selfsignatureconfirmationprovided,\n            commitmentletterprovided: customer.attachments?.commitmentletterprovided,\n            idcopyprovided: customer.attachments?.idcopyprovided,\n            freeoption: customer.attachments?.freeoption,\n            forfounding: customer.attachments?.forfounding,\n            prizename: customer.attachments?.prizename,\n            prizedate: customer.attachments?.prizedate,\n            // 기존 해지 정보\n            cancel: {\n              canceldate: customer.cancel?.canceldate || \"\",\n              refunddate: customer.cancel?.refunddate || \"\",\n              refundamount: customer.cancel?.refundamount || \"\",\n            },\n            // 추가 해지정보 (고객 수정 시 새로 입력할 값)\n            cancelInfo: {\n              reason: \"\",\n              remarks: \"\",\n              source: \"\",\n            },\n          });\n\n          // 금액 포맷팅\n          if (customer?.registerprice) {\n            setFormattedRegisterPrice(customer.registerprice.toLocaleString());\n          }\n          if (customer.deposits?.depositammount) {\n            setFormattedDepositAmmount(customer.deposits.depositammount.toLocaleString());\n          }\n          // 기존 파일 정보 설정 (있다면)\n          if (customer.attachments && customer.attachments.fileinfo) {\n            setExistingFileInfo(customer.attachments.fileinfo);\n          }\n          // 체크박스 초기값\n          setIsupload({\n            isuploaded: false,\n            sealcertificateprovided: customer.attachments?.sealcertificateprovided || false,\n            selfsignatureconfirmationprovided: customer.attachments?.selfsignatureconfirmationprovided || false,\n            commitmentletterprovided: customer.attachments?.commitmentletterprovided || false,\n            idcopyprovided: customer.attachments?.idcopyprovided || false,\n            freeoption: customer.attachments?.freeoption || false,\n            forfounding: customer.attachments?.forfounding || false,\n            agreement: customer.attachments?.agreement || false,\n            preferenceattachment: customer.attachments?.preferenceattachment || false,\n            prizeattachment: customer.attachments?.prizeattachment || false,\n            exemption7: customer.attachments?.exemption7 || false,\n            investmentfile: customer.attachments?.investmentfile || false,\n            contract: customer.attachments?.contract || false,\n          });\n          // 휴대폰 번호 화면값 설정 (저장된 값은 하이픈 없는 숫자이므로 포맷 적용)\n          if (customer.customerData && customer.customerData.phone) {\n            const digits = customer.customerData.phone;\n            let formatted = digits;\n            if (digits.length > 4) {\n              formatted = digits.slice(0, 4) + \"-\" + digits.slice(4);\n            }\n            setPhoneDisplay(\"010)\" + formatted);\n          }\n        }\n      } catch (error) {\n        console.error(\"고객 정보를 가져오는데 실패했습니다:\", error);\n      }\n    };\n    getData();\n  }, [id, reset, setValue]);\n\n  const handleCheckboxChange = (e) => {\n    const { name, checked } = e.target;\n    setIsupload((prev) => ({\n      ...prev,\n      [name]: checked,\n    }));\n  };\n\n  const handleFileChange = (e) => {\n    const { files } = e.target;\n    if (files && files.length > 0) {\n      const selectedFile = files[0];\n      setFile(selectedFile);\n      setIsupload((prev) => ({\n        ...prev,\n        isuploaded: true,\n      }));\n    }\n  };\n\n  const onError = (errors) => {\n    console.log(\"검증 오류:\", errors);\n    const errorMessages = [];\n    for (const field in errors) {\n      if (errors.hasOwnProperty(field)) {\n        if (errors[field].message) {\n          errorMessages.push(errors[field].message);\n        } else if (typeof errors[field] === \"object\" && errors[field] !== null) {\n          for (const subField in errors[field]) {\n            if (\n              errors[field].hasOwnProperty(subField) &&\n              errors[field][subField].message\n            ) {\n              errorMessages.push(errors[field][subField].message);\n            }\n          }\n        }\n      }\n    }\n    const errorMessage = errorMessages.join(\"\\n\");\n    Swal.fire({\n      icon: \"warning\",\n      title: \"필수 항목 누락\",\n      text: errorMessage,\n    });\n  };\n\n  const onSubmit = async (data) => {\n    try {\n      // cancelInfo가 없으면 기본값을 넣어줍니다.\n      const cancelInfo = data.cancelInfo || { reason: \"\", remarks: \"\", source: \"\" };\n\n      const parsedData = {\n        ...data,\n        CustomerData: {\n          ...data.CustomerData,\n          resnumfront: parseInt(data.CustomerData.resnumfront),\n          resnumback: parseInt(data.CustomerData.resnumback),\n        },\n        registerprice: parseInt(data.registerprice),\n        deposits: {\n          ...data.deposits,\n          depositammount: parseInt(data.deposits.depositammount),\n        },\n        cancelInfo: {\n          reason: cancelInfo.reason || \"\",\n          remarks: cancelInfo.remarks || \"\",\n          source: cancelInfo.source || \"\",\n        },\n      };\n\n      let uploadedFileInfo = existingFileInfo;\n      if (file) {\n        if (existingFileInfo) {\n          await deleteFile(existingFileInfo);\n        }\n        const uploadResponse = await createFile(file, parseInt(id, 10));\n        uploadedFileInfo = uploadResponse.data;\n      }\n\n      const attachments = {\n        ...isupload,\n        fileinfo: uploadedFileInfo,\n        prizename: data.prizename,\n        prizedate: data.prizedate,\n      };\n\n      const customerData = {\n        id: parseInt(id),\n        customertype: parsedData.customertype,\n        registerpath: parsedData.registerpath,\n        type: parsedData.type,\n        groupname: parsedData.groupname,\n        turn: parsedData.turn,\n        batch: parsedData.batch,\n        registerdate: parsedData.registerdate,\n        registerprice: parsedData.registerprice,\n        CustomerData: parsedData.CustomerData,\n        Financial: parsedData.Financial,\n        LegalAddress: { ...parsedData.LegalAddress },\n        Postreceive: { ...parsedData.Postreceive },\n        MGM: parsedData.MGM,\n        responsible: parsedData.responsible,\n        deposits: parsedData.deposits,\n        attachments: attachments,\n        dahim: parsedData.dahim,\n        firstemp: parsedData.firstemp,\n        secondemp: parsedData.secondemp,\n        meetingattend: parsedData.meetingattend,\n        agenda: parsedData.agenda,\n        prizewinning: parsedData.prizewinning,\n        exemption7: parsedData.exemption7,\n        investmentfile: parsedData.investmentfile,\n        contract: parsedData.contract,\n        agreement: parsedData.agreement,\n        preferenceattachment: parsedData.preferenceattachment,\n        prizeattachment: parsedData.prizeattachment,\n        sealcertificateprovided: parsedData.sealcertificateprovided,\n        selfsignatureconfirmationprovided: parsedData.selfsignatureconfirmationprovided,\n        commitmentletterprovided: parsedData.commitmentletterprovided,\n        idcopyprovided: parsedData.idcopyprovided,\n        freeoption: parsedData.freeoption,\n        forfounding: parsedData.forfounding,\n        additional: parsedData.additional,\n        cancel: parsedData.cancel,\n        cancelInfo: parsedData.cancelInfo,\n      };\n\n      console.log(\"수정할 데이터:\");\n      console.log(customerData);\n\n      const updateUserResponse = await updateUser(id, customerData);\n\n      Swal.fire({\n        icon: \"success\",\n        title: \"회원정보가 수정되었습니다.\",\n        text:\n          \"관리번호 : \" +\n          updateUserResponse.id +\n          \"/ 회원명 : \" +\n          parsedData.CustomerData.name,\n      });\n\n      reset();\n      setFile(null);\n      setIsupload({\n        isuploaded: false,\n        sealcertificateprovided: false,\n        selfsignatureconfirmationprovided: false,\n        commitmentletterprovided: false,\n        idcopyprovided: false,\n        freeoption: false,\n        forfounding: false,\n        agreement: false,\n        preferenceattachment: false,\n        prizeattachment: false,\n        exemption7: false,\n        investmentfile: false,\n        contract: false,\n      });\n      setFormattedRegisterPrice(\"\");\n      setFormattedDepositAmmount(\"\");\n      setPhoneDisplay(\"010)\");\n      window.scrollTo(0, 0);\n      router.push(`/search/${id}`);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      Swal.fire({\n        icon: \"error\",\n        title: \"회원정보 수정 실패\",\n        text: \"회원 정보를 수정하는 동안 오류가 발생했습니다. 다시 시도해주세요.\",\n      });\n    }\n  };\n\n  const prizeattachmentChecked = watch(\"prizeattachment\", false);\n  const customerType = watch(\"customertype\");\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit(onSubmit, onError)}>\n        {/* 1. 회원정보 수정 */}\n        <h3>회원 정보 수정</h3>\n        <div className={styles.content_container}>\n          <div className={styles.Font}>관리번호 : {id}</div>\n          <h1></h1>\n          <div className={styles.inputRow}>\n            <div className={styles.inputLabel}>이름 *</div>\n            <Inputbox\n              type=\"text\"\n              register={register(\"CustomerData.name\", {\n                required: \"이름을 입력해주세요.\",\n              })}\n              isError={!!errors.CustomerData?.name}\n            />\n          </div>\n          <div className={styles.inputRow}>\n            <div className={styles.inputLabel}>휴대폰 번호 *</div>\n            <Controller\n              name=\"CustomerData.phone\"\n              control={control}\n              defaultValue=\"\"\n              rules={{ required: \"휴대폰 번호를 입력해주세요.\" }}\n              render={({ field: { onChange } }) => (\n                <Inputbox\n                  type=\"tel\"\n                  placeholder=\"휴대폰 번호 *\"\n                  value={phoneDisplay}\n                  onChange={(e) => handlePhoneNumberChange(e, onChange)}\n                  isError={!!errors.CustomerData?.phone}\n                />\n              )}\n            />\n          </div>\n          <div className={styles.inputRow}>\n            <div className={styles.inputLabel}>주민번호 앞자리 *</div>\n            <Inputbox\n              type=\"number\"\n              register={register(\"CustomerData.resnumfront\", {\n                required: \"주민번호 앞자리를 입력해주세요.\",\n              })}\n              isError={!!errors.CustomerData?.resnumfront}\n            />\n          </div>\n          <div className={styles.inputRow}>\n            <div className={styles.inputLabel}>주민번호 뒷자리 *</div>\n            <Inputbox\n              type=\"number\"\n              register={register(\"CustomerData.resnumback\", {\n                required: \"주민번호 뒷자리를 입력해주세요.\",\n              })}\n              isError={!!errors.CustomerData?.resnumback}\n            />\n          </div>\n          <div className={styles.inputRow}>\n            <div className={styles.inputLabel}>이메일</div>\n            <Inputbox\n              type=\"email\"\n              register={register(\"CustomerData.email\", {})}\n              isError={!!errors.CustomerData?.email}\n            />\n          </div>\n          <div className={styles.inputRow}>\n            <div className={styles.inputLabel}>분류 *</div>\n            <DropInputbox\n              list={classificationlist}\n              register={register(\"customertype\", {\n                required: \"분류를 선택해주세요.\",\n              })}\n              isError={!!errors.customertype}\n            />\n          </div>\n          <div className={styles.inputRow}>\n            <div className={styles.inputLabel}>가입경로</div>\n            <Inputbox\n              type=\"text\"\n              register={register(\"registerpath\", {})}\n              isError={!!errors.registerpath}\n            />\n          </div>\n          <div className={styles.inputRow}>\n            <div className={styles.inputLabel}>은행 *</div>\n            <DropInputbox\n              list={banklist}\n              register={register(\"Financial.bankname\", {\n                required: \"은행을 선택해주세요.\",\n              })}\n              isError={!!errors.Financial?.bankname}\n            />\n          </div>\n          <div className={styles.inputRow}>\n            <div className={styles.inputLabel}>계좌번호 *</div>\n            <Inputbox\n              type=\"text\"\n              register={register(\"Financial.accountnum\", {\n                required: \"계좌번호를 입력해주세요.\",\n              })}\n              isError={!!errors.Financial?.accountnum}\n            />\n          </div>\n          <div className={styles.inputRow}>\n            <div className={styles.inputLabel}>예금주 *</div>\n            <Inputbox\n              type=\"text\"\n              register={register(\"Financial.accountholder\", {\n                required: \"예금주를 입력해주세요.\",\n              })}\n              isError={!!errors.Financial?.accountholder}\n            />\n          </div>\n          <div className={styles.InputboxField}>\n            <div className={styles.InputFont}>법정주소 *</div>\n            <PostInputbox2\n              register={register}\n              setValue={setValue}\n              namePrefix=\"LegalAddress\"\n              postcodeName=\"LegalAddress.postnumber\"\n              addressName=\"LegalAddress.post\"\n              initialPostNumber={initialLegalPostNumber}\n              initialAddress={initialLegalAddress}\n              isError={\n                !!errors.LegalAddress?.postnumber ||\n                !!errors.LegalAddress?.post ||\n                !!errors.LegalAddress?.detailaddress\n              }\n            />\n            <div className={styles.inputRow}>\n              <Inputbox\n                type=\"text\"\n                register={register(\"LegalAddress.detailaddress\", {\n                  required: \"법정주소를 입력해주세요.\",\n                })}\n                isError={!!errors.LegalAddress?.detailaddress}\n              />\n            </div>\n          </div>\n          <div className={styles.InputboxField}>\n            <div className={styles.InputFont}>우편물 주소지 *</div>\n            <PostInputbox2\n              register={register}\n              setValue={setValue}\n              namePrefix=\"Postreceive\"\n              postcodeName=\"Postreceive.postnumberreceive\"\n              addressName=\"Postreceive.postreceive\"\n              initialPostNumber={initialPostreceivePostNumber}\n              initialAddress={initialPostreceiveAddress}\n              isError={\n                !!errors.Postreceive?.postnumberreceive ||\n                !!errors.Postreceive?.postreceive ||\n                !!errors.Postreceive?.detailaddressreceive\n              }\n            />\n            <div className={styles.inputRow}>\n              <Inputbox\n                type=\"text\"\n                register={register(\"Postreceive.detailaddressreceive\", {\n                  required: \"우편물 주소지를 입력해주세요.\",\n                })}\n                isError={!!errors.Postreceive?.detailaddressreceive}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 해지/환불 정보: 고객 분류가 \"x\"인 경우 렌더링 */}\n        {customerType?.toLowerCase() === \"x\" && (\n          <>\n            <h3>해지/환불 정보</h3>\n            <div className={styles.content_container}>\n              <div className={styles.inputRow}>\n                <div className={styles.inputLabel}>해지일자 *</div>\n                <Inputbox\n                  type=\"date\"\n                  register={register(\"cancel.canceldate\", {\n                    required: \"해지일자를 입력해주세요.\",\n                  })}\n                  isError={!!errors.cancel?.canceldate}\n                />\n              </div>\n              <div className={styles.inputRow}>\n                <div className={styles.inputLabel}>환급일자 *</div>\n                <Inputbox\n                  type=\"date\"\n                  register={register(\"cancel.refunddate\", {\n                    required: \"환급일자를 입력해주세요.\",\n                  })}\n                  isError={!!errors.cancel?.refunddate}\n                />\n              </div>\n              <div className={styles.inputRow}>\n                <div className={styles.inputLabel}>환급액 *</div>\n                <Inputbox\n                  type=\"number\"\n                  register={register(\"cancel.refundamount\", {\n                    required: \"환급액을 입력해주세요.\",\n                  })}\n                  isError={!!errors.cancel?.refundamount}\n                />\n              </div>\n              <div className={styles.inputRow}>\n                <div className={styles.inputLabel}>사유 *</div>\n                <Inputbox\n                  type=\"text\"\n                  register={register(\"cancelInfo.reason\", {\n                    required: \"해지 사유를 입력해주세요.\",\n                  })}\n                  isError={!!errors.cancelInfo?.reason}\n                />\n              </div>\n              <div className={styles.inputRow}>\n                <div className={styles.inputLabel}>출처 *</div>\n                <Inputbox\n                  type=\"text\"\n                  register={register(\"cancelInfo.source\", {\n                    required: \"출처를 입력해주세요.\",\n                  })}\n                  isError={!!errors.cancelInfo?.source}\n                />\n              </div>\n              <div className={styles.inputRow}>\n                <div className={styles.inputLabel}>비고</div>\n                <Inputbox\n                  type=\"text\"\n                  register={register(\"cancelInfo.remarks\")}\n                  isError={!!errors.cancelInfo?.remarks}\n                />\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* 다힘 (dahim) */}\n        <h3>다힘</h3>\n        <div className={styles.mainbody}>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>시상</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"시상\"\n                defaultValue={watch(\"dahim.dahimsisang\") || \"\"}\n                register={register(\"dahim.dahimsisang\")}\n                isError={!!errors.dahim?.dahimsisang}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>일자</div>\n              <MGMInputbox\n                type=\"date\"\n                defaultValue={watch(\"dahim.dahimdate\") || \"\"}\n                register={register(\"dahim.dahimdate\")}\n                isError={!!errors.dahim?.dahimdate}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>6/30선지급</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"6/30선지급\"\n                defaultValue={watch(\"dahim.dahimprepaid\") || \"\"}\n                register={register(\"dahim.dahimprepaid\")}\n                isError={!!errors.dahim?.dahimprepaid}\n              />\n            </div>\n          </div>\n\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>1회차청구</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"1회차청구\"\n                defaultValue={watch(\"dahim.dahimfirst\") || \"\"}\n                register={register(\"dahim.dahimfirst\")}\n                isError={!!errors.dahim?.dahimfirst}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>금액(만원)</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"금액(만원)\"\n                defaultValue={watch(\"dahim.dahimfirstpay\") || \"\"}\n                register={register(\"dahim.dahimfirstpay\")}\n                isError={!!errors.dahim?.dahimfirstpay}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>일자</div>\n              <MGMInputbox\n                type=\"date\"\n                defaultValue={watch(\"dahim.dahimdate2\") || \"\"}\n                register={register(\"dahim.dahimdate2\")}\n                isError={!!errors.dahim?.dahimdate2}\n              />\n            </div>\n          </div>\n\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>2회차청구</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"2회차청구\"\n                defaultValue={watch(\"dahim.dahimsecond\") || \"\"}\n                register={register(\"dahim.dahimsecond\")}\n                isError={!!errors.dahim?.dahimsecond}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>금액</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"금액\"\n                defaultValue={watch(\"dahim.dahimsecondpay\") || \"\"}\n                register={register(\"dahim.dahimsecondpay\")}\n                isError={!!errors.dahim?.dahimsecondpay}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>일자</div>\n              <MGMInputbox\n                type=\"date\"\n                defaultValue={watch(\"dahim.dahimdate3\") || \"\"}\n                register={register(\"dahim.dahimdate3\")}\n                isError={!!errors.dahim?.dahimdate3}\n              />\n            </div>\n          </div>\n\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>합계</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"합계\"\n                defaultValue={watch(\"dahim.dahimsum\") || \"\"}\n                register={register(\"dahim.dahimsum\")}\n                isError={!!errors.dahim?.dahimsum}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>출처</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"출처\"\n                defaultValue={watch(\"dahim.dahimsource\") || \"\"}\n                register={register(\"dahim.dahimsource\")}\n                isError={!!errors.dahim?.dahimsource}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 관리 정보 */}\n        <h3>관리 정보</h3>\n        <div className={`${styles.content_container} ${styles.responsibleContainer}`}>\n          <div className={styles.responsibleRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>총괄 *</div>\n              <MGMInputbox\n                type=\"text\"\n                register={register(\"responsible.generalmanagement\", {\n                  required: \"총괄을 입력해주세요.\",\n                })}\n                isError={!!errors.responsible?.generalmanagement}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>본부 *</div>\n              <MGMInputbox\n                type=\"text\"\n                register={register(\"responsible.division\", {\n                  required: \"본부를 입력해주세요.\",\n                })}\n                isError={!!errors.responsible?.division}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>팀 *</div>\n              <MGMInputbox\n                type=\"text\"\n                register={register(\"responsible.team\", {\n                  required: \"팀을 입력해주세요.\",\n                })}\n                isError={!!errors.responsible?.team}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>성명 *</div>\n              <MGMInputbox\n                type=\"text\"\n                register={register(\"responsible.managername\", {\n                  required: \"성명을 입력해주세요.\",\n                })}\n                isError={!!errors.responsible?.managername}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* MGM */}\n        <h3>MGM</h3>\n        <div className={`${styles.content_container} ${styles.mgmContainer}`}>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>업체명</div>\n              <MGMInputbox\n                type=\"text\"\n                register={register(\"MGM.mgmcompanyname\")}\n                isError={!!errors.MGM?.mgmcompanyname}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>이름</div>\n              <MGMInputbox\n                type=\"text\"\n                register={register(\"MGM.mgmname\")}\n                isError={!!errors.MGM?.mgmname}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>은행명</div>\n              <MGMInputbox\n                type=\"text\"\n                register={register(\"MGM.mgminstitution\")}\n                isError={!!errors.MGM?.mgminstitution}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>계좌</div>\n              <MGMInputbox\n                type=\"text\"\n                register={register(\"MGM.mgmaccount\")}\n                isError={!!errors.MGM?.mgmaccount}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 1차(직원) */}\n        <h3>1차(직원)</h3>\n        <div className={styles.mainbody}>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>차순</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"차순\"\n                defaultValue={watch(\"firstemp.firstemptimes\") || \"\"}\n                register={register(\"firstemp.firstemptimes\")}\n                isError={!!errors.firstemp?.firstemptimes}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>지급일</div>\n              <div className={styles.dateInputContainer}>\n                <MGMInputbox\n                  type=\"date\"\n                  defaultValue={watch(\"firstemp.firstempdate\") || \"\"}\n                  register={register(\"firstemp.firstempdate\")}\n                  isError={!!errors.firstemp?.firstempdate}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 2차(직원) */}\n        <h3>2차(직원)</h3>\n        <div className={styles.mainbody}>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>차순</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"차순\"\n                defaultValue={watch(\"secondemp.secondemptimes\") || \"\"}\n                register={register(\"secondemp.secondemptimes\")}\n                isError={!!errors.secondemp?.secondemptimes}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>지급일</div>\n              <div className={styles.dateInputContainer}>\n                <MGMInputbox\n                  type=\"date\"\n                  defaultValue={watch(\"secondemp.secondempdate\") || \"\"}\n                  register={register(\"secondemp.secondempdate\")}\n                  isError={!!errors.secondemp?.secondempdate}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 비고 -> additional */}\n        <h3>비고</h3>\n        <div className={styles.content_container}>\n          <div className={styles.inputRow}>\n            <InputAreabox\n              type=\"text\"\n              register={register(\"additional\")}\n              isError={!!errors.additional}\n            />\n          </div>\n        </div>\n\n        {/* 총회 참석여부 */}\n        <h3>총회참석여부</h3>\n        <div className={styles.mainbody}>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>서면</div>\n              <Inputbox\n                type=\"text\"\n                placeholder=\"서면\"\n                defaultValue={watch(\"meetingattend.ftofattend\") || \"\"}\n                register={register(\"meetingattend.ftofattend\")}\n                isError={!!errors.meetingattend?.ftofattend}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>직접</div>\n              <Inputbox\n                type=\"text\"\n                placeholder=\"직접\"\n                defaultValue={watch(\"meetingattend.selfattend\") || \"\"}\n                register={register(\"meetingattend.selfattend\")}\n                isError={!!errors.meetingattend?.selfattend}\n              />\n            </div>\n          </div>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>대리</div>\n              <Inputbox\n                type=\"text\"\n                placeholder=\"대리\"\n                defaultValue={watch(\"meetingattend.behalfattend\") || \"\"}\n                register={register(\"meetingattend.behalfattend\")}\n                isError={!!errors.meetingattend?.behalfattend}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 안건 */}\n        <h3>안건</h3>\n        <div className={styles.mainbody}>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제1호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제1호\"\n                defaultValue={watch(\"agenda.agenda1\") || \"\"}\n                register={register(\"agenda.agenda1\")}\n                isError={!!errors.agenda?.agenda1}\n              />\n            </div>\n          </div>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제2-1호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제2-1호\"\n                defaultValue={watch(\"agenda.agenda2_1\") || \"\"}\n                register={register(\"agenda.agenda2_1\")}\n                isError={!!errors.agenda?.agenda2_1}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제2-2호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제2-2호\"\n                defaultValue={watch(\"agenda.agenda2_2\") || \"\"}\n                register={register(\"agenda.agenda2_2\")}\n                isError={!!errors.agenda?.agenda2_2}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제2-3호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제2-3호\"\n                defaultValue={watch(\"agenda.agenda2_3\") || \"\"}\n                register={register(\"agenda.agenda2_3\")}\n                isError={!!errors.agenda?.agenda2_3}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제2-4호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제2-4호\"\n                defaultValue={watch(\"agenda.agenda2_4\") || \"\"}\n                register={register(\"agenda.agenda2_4\")}\n                isError={!!errors.agenda?.agenda2_4}\n              />\n            </div>\n          </div>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제3호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제3호\"\n                defaultValue={watch(\"agenda.agenda3\") || \"\"}\n                register={register(\"agenda.agenda3\")}\n                isError={!!errors.agenda?.agenda3}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제4호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제4호\"\n                defaultValue={watch(\"agenda.agenda4\") || \"\"}\n                register={register(\"agenda.agenda4\")}\n                isError={!!errors.agenda?.agenda4}\n              />\n            </div>\n          </div>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제5호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제5호\"\n                defaultValue={watch(\"agenda.agenda5\") || \"\"}\n                register={register(\"agenda.agenda5\")}\n                isError={!!errors.agenda?.agenda5}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제6호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제6호\"\n                defaultValue={watch(\"agenda.agenda6\") || \"\"}\n                register={register(\"agenda.agenda6\")}\n                isError={!!errors.agenda?.agenda6}\n              />\n            </div>\n          </div>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제7호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제7호\"\n                defaultValue={watch(\"agenda.agenda7\") || \"\"}\n                register={register(\"agenda.agenda7\")}\n                isError={!!errors.agenda?.agenda7}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제8호</div>\n              <MGMInputbox\n                type=\"text\"\n                placeholder=\"제8호\"\n                defaultValue={watch(\"agenda.agenda8\") || \"\"}\n                register={register(\"agenda.agenda8\")}\n                isError={!!errors.agenda?.agenda8}\n              />\n            </div>\n          </div>\n          <div className={styles.mgmRow}>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제9호</div>\n              <MGMInputbox\n                type=\"text\"\n                defaultValue={watch(\"agenda.agenda9\") || \"\"}\n                register={register(\"agenda.agenda9\")}\n                isError={!!errors.agenda?.agenda9}\n              />\n            </div>\n            <div className={styles.inputColumnRow}>\n              <div className={styles.inputColumnLabel}>제10호</div>\n              <MGMInputbox\n                type=\"text\"\n                defaultValue={watch(\"agenda.agenda10\") || \"정보없음\"}\n                register={register(\"agenda.agenda10\")}\n                isError={!!errors.agenda?.agenda10}\n              />\n            </div>\n          </div>\n        </div>\n\n        <h1></h1>\n        <Button_Y type=\"submit\">수정하기</Button_Y>\n        <h1></h1>\n      </form>\n    </div>\n  );\n}\n\nexport default withAuth(Modify);\n"
                }
            }
        },
        "search": {
            "__files__": {
                "page.js": "// pages/search/page.js\n\"use client\";\n\nimport { useState } from \"react\";\nimport SearchForm from \"@/components/SearchForm\";\nimport SearchList from \"@/components/SearchList\";\nimport styles from \"@/styles/Search.module.scss\";\nimport { typelist, grouplist, turnlist } from \"@/components/droplistdata\";\nimport withAuth from \"@/utils/hoc/withAuth\";\n\nfunction Search() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  return (\n    <>\n      <h3> </h3>\n      <SearchForm\n        name={name}\n        setName={setName}\n        number={number}\n        setNumber={setNumber}\n      />\n      {typeof window !== \"undefined\" && (\n        <SearchList\n          name={name}\n          number={number}\n          linkBase=\"/search/\"\n        />\n      )}\n    </>\n  );\n}\n\nexport default withAuth(Search);\n"
            },
            "overdue": {
                "[phasenumber]": {
                    "__files__": {
                        "page.js": "\"use client\";\n\nimport { useSearchParams, useParams } from \"next/navigation\";\nimport { useMemo } from \"react\";\nimport { saveAs } from \"file-saver\";\nimport * as XLSX from \"xlsx\";\n\n// 숫자 천단위 콤마 처리 함수\nfunction formatNumberWithComma(num) {\n  if (num == null || isNaN(num)) return \"0\";\n  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nexport default function OverduePage() {\n  const params = useParams();\n  const phasenumber = params.phasenumber;\n  const searchParams = useSearchParams();\n\n  const overdueAmount = searchParams.get(\"amount\")\n    ? parseFloat(searchParams.get(\"amount\"))\n    : 0;\n  const userid = searchParams.get(\"userid\") || \"정보 없음\";\n  const name = searchParams.get(\"name\") || \"정보 없음\";\n\n  // 연체율 8%\n  const lateRate = 0.08;\n  const today = new Date();\n\n  // 30일부터 1일까지 내림차순 날짜 리스트 생성\n  const daysArray = Array.from({ length: 30 }, (_, i) => 30 - i); \n  // daysArray = [30, 29, 28, ..., 1]\n\n  const data = useMemo(() => {\n    let previousOverdueFee = overdueAmount * lateRate; // 첫 날(30일 후) 연체료\n    const result = [];\n    // 첫 날(가장 먼 날짜): overdueFee = overdueAmount * lateRate\n    // 둘째 날부터: overdueFee = previousOverdueFee * (1 + lateRate)\n    for (let i = 0; i < daysArray.length; i++) {\n      const day = daysArray[i];\n      const date = new Date(today);\n      date.setDate(date.getDate() + day);\n\n      let overdueFee;\n      if (i === 0) {\n        // 첫 날\n        overdueFee = previousOverdueFee;\n      } else {\n        // 두 번째 날부터 전날 연체료 * (1 + lateRate)\n        overdueFee = previousOverdueFee * (1 + lateRate);\n        previousOverdueFee = overdueFee; // 다음날 계산을 위해 업데이트\n      }\n\n      // 납부금액 = 연체금액 + 당일 연체료\n      const totalPayment = overdueAmount + overdueFee;\n\n      result.push({\n        날짜: date.toISOString().slice(0, 10),\n        일수: `${day}일`,\n        연체율: `${(lateRate * 100).toFixed(2)}%`,\n        연체료: Math.round(overdueFee),\n        납부금액: Math.round(totalPayment),\n      });\n    }\n\n    return result;\n  }, [overdueAmount, lateRate, today]);\n\n  // 엑셀 내보내기 핸들러\n  const handleExport = () => {\n    if (data.length === 0) {\n      alert(\"내보낼 데이터가 없습니다.\");\n      return;\n    }\n\n    // 엑셀에 넣을 데이터 포맷팅\n    const worksheet = XLSX.utils.json_to_sheet(data);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"OverdueFees\");\n\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: \"xlsx\",\n      type: \"array\",\n    });\n    const blob = new Blob([excelBuffer], {\n      type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\",\n    });\n\n    // 현재 날짜를 \"YYYYMMDD\" 형식으로 포맷팅\n    const currentDate = new Date();\n    const year = currentDate.getFullYear();\n    const month = String(currentDate.getMonth() + 1).padStart(2, \"0\");\n    const day = String(currentDate.getDate()).padStart(2, \"0\");\n    const formattedDate = `${year}${month}${day}`;\n\n    saveAs(blob, `Overdue_${userid}_${phasenumber}_${formattedDate}.xlsx`);\n  };\n\n  return (\n    <div style={{ padding: \"20px\" }}>\n      <div style={headerContainerStyle}>\n        <h1>일자별 연체료 ({phasenumber}차)</h1>\n        <button\n          style={exportButtonStyle}\n          onClick={handleExport}\n          title=\"엑셀로 출력\"\n        >\n          엑셀로 출력\n        </button>\n      </div>\n      <p>관리번호: {userid}</p>\n      <p>이름: {name}</p>\n      <p>연체금액: {formatNumberWithComma(overdueAmount)}원</p>\n\n      <table style={{ borderCollapse: \"collapse\", width: \"100%\" }}>\n        <thead>\n          <tr>\n            <th style={thStyle}>날짜</th>\n            <th style={thStyle}>일수</th>\n            <th style={thStyle}>연체율</th>\n            <th style={thStyle}>연체료</th>\n            <th style={thStyle}>납부금액</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((row, i) => (\n            <tr key={i}>\n              <td style={tdStyle}>{row.날짜}</td>\n              <td style={tdStyle}>{row.일수}</td>\n              <td style={tdStyle}>{row.연체율}</td>\n              <td style={tdStyle}>{formatNumberWithComma(row.연체료)}원</td>\n              <td style={tdStyle}>{formatNumberWithComma(row.납부금액)}원</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\n// 스타일 객체\nconst headerContainerStyle = {\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  marginBottom: \"20px\",\n};\n\nconst exportButtonStyle = {\n  backgroundColor: \"#5c9ef5\",\n  borderRadius: \"4px\",\n  padding: \"8px 12px\",\n  cursor: \"pointer\",\n  color: \"#fff\",\n  border: \"none\",\n};\n\nconst thStyle = {\n  border: \"1px solid #ccc\",\n  background: \"#f2f2f2\",\n  padding: \"8px\",\n  textAlign: \"center\",\n};\n\nconst tdStyle = {\n  border: \"1px solid #ccc\",\n  padding: \"8px\",\n  textAlign: \"center\",\n};\n"
                    }
                }
            },
            "[id]": {
                "__files__": {
                    "page.js": "// src/app/search/[id]/page.js\n\"use client\";\n\nimport styles from \"@/styles/Userinfo.module.scss\";\nimport { useParams, usePathname, useRouter } from \"next/navigation\";\nimport {\n  useRecoilValueLoadable,\n  useSetRecoilState,\n  useRecoilRefresher_UNSTABLE,\n} from \"recoil\";\nimport { userinfoSelector } from \"@/utils/selector\";\nimport { useEffect } from \"react\";\nimport { useridState } from \"@/utils/atom\";\nimport { DownloadButton, LinkButton } from \"@/components/Button\";\nimport withAuth from \"@/utils/hoc/withAuth\";\nimport { FaEdit, FaFileInvoice } from \"react-icons/fa\";\nimport categoryMapping from \"@/utils/categoryMapping\";\nimport Link from \"next/link\";\nimport { downloadFormat1, downloadFormat2 } from \"@/utils/api\";\n\nfunction Search() {\n  const params = useParams();\n  const userid = params.id;\n  const setIdState = useSetRecoilState(useridState);\n  const refreshUserInfo = useRecoilRefresher_UNSTABLE(userinfoSelector);\n  const pathname = usePathname();\n  const splitpath = pathname.split(\"/\");\n  const sortMapping = categoryMapping;\n  const router = useRouter();\n\n  const handleDownloadFormat1 = () => {\n    console.log(1);\n    if (!userid) return;\n    downloadFormat1(userid);\n  };\n\n  const handleDownloadFormat2 = () => {\n    if (!userid) return;\n    downloadFormat2(userid);\n  };\n\n  const formatPhoneNumber = (phone) => {\n    if (!phone || phone.length !== 8) return phone || \"정보 없음\";\n    return `010)${phone.slice(0, 4)}-${phone.slice(4)}`;\n  };\n\n  useEffect(() => {\n    if (userid) {\n      setIdState(userid);\n      refreshUserInfo();\n    } else {\n      console.error(\"유효하지 않은 사용자 ID입니다.\");\n    }\n  }, [userid, setIdState, refreshUserInfo]);\n\n  const userselectordata = useRecoilValueLoadable(userinfoSelector);\n\n  const getFileName = (filePath) => {\n    if (!filePath) return \"\";\n    return filePath.split(/[/\\\\]/).pop();\n  };\n\n  const formatNumberWithComma = (num) => {\n    if (num == null) return \"정보 없음\";\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  if (!userid) return null;\n\n  switch (userselectordata.state) {\n    case \"hasValue\":\n      const userdata = userselectordata.contents;\n      if (!userdata) {\n        return <h1>잘못된 접근입니다</h1>;\n      } else {\n        // 대출 및 자납 정보의 합계 계산\n        const loanAmount = userdata.loan?.loanammount;\n        const selfAmount = userdata.loan?.selfammount;\n        let totalLoanSelf = null;\n        console.log(userdata.phases)\n        if (loanAmount != null && selfAmount != null) {\n          totalLoanSelf = loanAmount + selfAmount;\n        } else if (loanAmount != null) {\n          totalLoanSelf = loanAmount;\n        } else if (selfAmount != null) {\n          totalLoanSelf = selfAmount;\n        }\n\n        return (\n          <>\n            {/* 1. 회원정보 */}\n            <h3></h3>\n\n            <div className={styles.buttonContainer}>\n              {/* 일반 신청서 다운로드 버튼 */}\n              <button\n                className={styles.contractButton}\n                onClick={handleDownloadFormat1}\n              >\n                <FaFileInvoice className={styles.editIcon} />\n                일반 신청서\n              </button>\n              {/* 일반 부속 서류 다운로드 버튼 */}\n              <button\n                className={styles.contractButton}\n                onClick={handleDownloadFormat2}\n              >\n                <FaFileInvoice className={styles.editIcon} />\n                일반 부속 서류\n              </button>\n              {/* 수정 버튼 */}\n              <Link href={`/modify/${userid}`} passHref>\n                <button className={styles.editButton}>\n                  <FaEdit className={styles.editIcon} />\n                  수정\n                </button>\n              </Link>\n            </div>\n\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>관리번호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.id || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>성명</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.customerData?.name || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>주민번호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.customerData?.resnumfront || \"정보 없음\"}-\n                    {userdata.customerData?.resnumback || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>이메일</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.customerData?.email || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>휴대전화</span>\n                </div>\n                <div className={styles.contentbody}>\n                <span>\n                    {userdata.customerData?.phone\n                      ? formatPhoneNumber(userdata.customerData.phone)\n                      : \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>타입</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.type || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>군</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.groupname || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>순번</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.turn || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>가입차순</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.batch || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>분류</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {sortMapping[userdata.customertype] || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>가입일자</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.registerdate\n                      ? userdata.registerdate.slice(0, 10)\n                      : \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>가입가</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.registerprice\n                      ? formatNumberWithComma(userdata.registerprice)\n                      : \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>예약금 납입일자</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.deposits?.depositdate\n                      ? userdata.deposits.depositdate.slice(0, 10)\n                      : \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>예약금</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.deposits?.depositammount\n                      ? formatNumberWithComma(userdata.deposits.depositammount)\n                      : \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>신탁사제출일</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.financial?.trustcompanydate\n                      ? userdata.financial.trustcompanydate.slice(0, 10)\n                      : \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n\n            </div>\n\n            <div className={styles.rowcontainer}>\n              <div className={styles.postunitbody}>\n                <div className={styles.posttitlebody}>\n                  <span className={styles.title}>법정주소</span>\n                </div>\n                <div className={styles.postcontentbody}>\n                  <span>\n                    우편번호:{\" \"}\n                    {userdata.legalAddress?.postnumber || \"정보 없음\"}\n                  </span>\n                  <br />\n                  <span>{userdata.legalAddress?.post || \"정보 없음\"}, </span>\n                  <span>\n                    {userdata.legalAddress?.detailaddress || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.postunitbody}>\n                <div className={styles.posttitlebody}>\n                  <span className={styles.title}>우편물 수령주소</span>\n                </div>\n                <div className={styles.postcontentbody}>\n                  <span>\n                    우편번호:{\" \"}\n                    {userdata.postreceive?.postnumberreceive || \"정보 없음\"}\n                  </span>\n                  <br />\n                  <span>\n                    {userdata.postreceive?.postreceive || \"정보 없음\"},{\" \"}\n                  </span>\n                  <span>\n                    {userdata.postreceive?.detailaddressreceive || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>은행명</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.financial?.bankname || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>계좌번호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.financial?.accountnum || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>예금주</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.financial?.accountholder || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>7차 면제</span>\n                </div>\n                <div className={styles.contentbody}>\n                  {userdata.attachments?.exemption7 ? (\n                    <span>✔️</span>\n                  ) : (\n                    <span>❌</span>\n                  )}\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>출자금</span>\n                </div>\n                <div className={styles.contentbody}>\n                  {userdata.attachments?.investmentfile ? (\n                    <span>✔️</span>\n                  ) : (\n                    <span>❌</span>\n                  )}\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>지산A동 계약서</span>\n                </div>\n                <div className={styles.contentbody}>\n                  {userdata.attachments?.contract ? (\n                    <span>✔️</span>\n                  ) : (\n                    <span>❌</span>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* 다힘 */}\n            <hr />\n            <h3>다힘</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>시상</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.dahim?.dahimsisang || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>일자</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.dahim?.dahimdate || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>6/30선지급</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.dahim?.dahimprepaid || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>1회차청구</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.dahim?.dahimfirst || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>금액(만원)</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.dahim?.dahimfirstpay || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>일자</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.dahim?.dahimdate2 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>출처</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.dahim?.dahimsource || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>2회차청구</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.dahim?.dahimsecond || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>금액(만원)</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.dahim?.dahimsecondpay || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>일자</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.dahim?.dahimdate3 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>합계(만원)</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {totalLoanSelf != null\n                      ? formatNumberWithComma(totalLoanSelf)\n                      : \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* 납입금 관리 */}\n            <hr />\n            <h3>납입금 관리</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.linkbutton}>\n                <Link href={`/inputmoney/userinfo/${splitpath[2]}`}>\n                  <LinkButton>바로가기</LinkButton>\n                </Link>\n              </div>\n            </div>\n            <hr />\n\n            {/* 납입차수 정보 */}\n            <h3>납입차수 정보</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <table className={styles.phase_table}>\n                  <thead>\n                    <tr>\n                      <th className={styles.narrowColumn2}>차수</th>\n                      <th>예정일자</th>\n                      <th>완납일자</th>\n                      <th>부담금</th>\n                      <th>할인액</th>\n                      <th>면제액</th>\n                      <th>업무 대행비</th>\n                      <th>실납부액</th>\n                      <th className={styles.narrowColumn}>이동</th>\n                      <th>차수별 합계</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {[\n                      \n                      ...userdata.phases,\n                      ...Array.from(\n                        { length: 10 - (userdata.phases?.length || 0) },\n                        (_, i) => ({\n                          phaseNumber:\n                            (userdata.phases?.length || 0) + i + 1,\n                        })\n                      ),\n                    ].map((phase, index) => {\n                      // 연체 판단 로직\n                      const isOverdue =\n                        phase.planneddate &&\n                        new Date(phase.planneddate) < new Date() &&\n                        !phase.fullpaiddate;\n\n                      const overdueAmount = phase.feesum || 0;\n\n                      const handleRowClick = () => {\n                        if (isOverdue) {\n                          const url = `/search/overdue/${phase.phaseNumber}?amount=${overdueAmount}&userid=${userdata.id}&name=${encodeURIComponent(\n                            userdata.customerData?.name || \"\"\n                          )}`;\n                          router.push(url);\n                        }\n                      };\n\n                      return (\n                        <tr\n                          key={index}\n                          className={isOverdue ? styles.overduePhase : \"\"}\n                          style={{\n                            cursor: isOverdue ? \"pointer\" : \"default\",\n                          }}\n                          onClick={handleRowClick}\n                        >\n                          <td>{phase.phaseNumber || \"없음\"}</td>\n                          <td>\n                            {phase.planneddate\n                              ? parseInt(phase.planneddate.slice(0, 4), 10) > 2099\n                                  ? phase.planneddateString\n                                  : phase.planneddate.slice(0, 10)\n                              : \"없음\"}\n                          </td>\n                          <td>\n                            {phase.fullpaiddate\n                              ? phase.fullpaiddate.slice(0, 10)\n                              : \"없음\"}\n                          </td>\n                          <td>\n                            {phase.charge\n                              ? formatNumberWithComma(phase.charge)\n                              : \"없음\"}\n                          </td>\n                          <td>\n                            {phase.discount\n                              ? formatNumberWithComma(phase.discount)\n                              : \"없음\"}\n                          </td>\n                          <td>\n                            {phase.exemption\n                              ? formatNumberWithComma(phase.exemption)\n                              : \"없음\"}\n                          </td>\n                          <td>\n                            {phase.service\n                              ? formatNumberWithComma(phase.service)\n                              : \"없음\"}\n                          </td>\n                          <td>\n                            {phase.charged\n                              ? formatNumberWithComma(phase.charged)\n                              : \"없음\"}\n                          </td>\n                          <td className={styles.narrowColumn}>\n                            {phase.move || \"없음\"}\n                          </td>\n                          <td>\n                            {phase.phaseNumber\n                              ? formatNumberWithComma(\n                                  userdata.phases\n                                    ?.filter(\n                                      (p) =>\n                                        p.phaseNumber === phase.phaseNumber\n                                    )\n                                    .reduce(\n                                      (sum, p) => sum + (p.feesum || 0),\n                                      0\n                                    )\n                                )\n                              : \"없음\"}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n                <div className={styles.phase_sum}>\n                  <span>\n                    총합계:{\" \"}\n                    {formatNumberWithComma(\n                      userdata.phases\n                        ? userdata.phases.reduce(\n                            (sum, phase) => sum + (phase.feesum || 0),\n                            0\n                          )\n                        : 0\n                    )}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <hr />\n\n            {/* 대출 및 자납 정보 */}\n            <h3>대출 및 자납 정보</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <table className={styles.loan_table}>\n                  <thead>\n                    <tr>\n                      <th>대출일자</th>\n                      <th>은행</th>\n                      <th>대출액</th>\n                      <th>자납일자</th>\n                      <th>자납액</th>\n                      <th>합계</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {userdata.loan ? (\n                      <tr>\n                        <td>\n                          {userdata.loan.loandate\n                            ? userdata.loan.loandate.slice(0, 10)\n                            : \"N/A\"}\n                        </td>\n                        <td>{userdata.loan.loanbank || \"정보 없음\"}</td>\n                        <td>\n                          {userdata.loan.loanammount\n                            ? formatNumberWithComma(userdata.loan.loanammount)\n                            : \"N/A\"}\n                        </td>\n                        <td>\n                          {userdata.loan.selfdate\n                            ? userdata.loan.selfdate.slice(0, 10)\n                            : \"N/A\"}\n                        </td>\n                        <td>\n                          {userdata.loan.selfammount\n                            ? formatNumberWithComma(userdata.loan.selfammount)\n                            : \"N/A\"}\n                        </td>\n                        <td>\n                          {totalLoanSelf != null\n                            ? formatNumberWithComma(totalLoanSelf)\n                            : \"정보 없음\"}\n                        </td>\n                      </tr>\n                    ) : (\n                      <tr>\n                        <td colSpan=\"6\">대출 및 자납 정보가 없습니다.</td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n            <hr />\n\n            {/* 총 면제금액 및 납입 총액 */}\n            <h3>총 면제금액 및 납입 총액</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>총 면제금액</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.phases\n                      ? formatNumberWithComma(\n                          userdata.phases.reduce(\n                            (sum, phase) => sum + (phase.exemption || 0),\n                            0\n                          )\n                        )\n                      : \"0\"}\n                  </span>\n                </div>\n              </div>\n\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>납입 총액</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.phases\n                      ? formatNumberWithComma(\n                          userdata.phases.reduce(\n                            (sum, phase) => sum + (phase.charged || 0),\n                            0\n                          )\n                        )\n                      : \"0\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <hr />\n\n            {/* 부속서류 */}\n            <h3>부속서류</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>부속 서류</span>\n                </div>\n                <div className={styles.contentbody}>\n                  {userdata.attachments?.isuploaded &&\n                  userdata.attachments?.fileinfo ? (\n                    <DownloadButton\n                      userid={userdata.id}\n                      filename={getFileName(userdata.attachments.fileinfo)}\n                    >\n                      다운로드\n                    </DownloadButton>\n                  ) : (\n                    <span>파일이 없습니다.</span>\n                  )}\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>부속 서류 상태</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <div className={styles.attachmentsGrid}>\n                    <div>\n                      <span>인감증명서</span>\n                      {userdata.attachments?.sealcertificateprovided ? (\n                        <span>✔️</span>\n                      ) : (\n                        <span>❌</span>\n                      )}\n                    </div>\n                    <div>\n                      <span>본인서명확인서</span>\n                      {userdata.attachments?.selfsignatureconfirmationprovided ? (\n                        <span>✔️</span>\n                      ) : (\n                        <span>❌</span>\n                      )}\n                    </div>\n                    <div>\n                      <span>신분증</span>\n                      {userdata.attachments?.idcopyprovided ? (\n                        <span>✔️</span>\n                      ) : (\n                        <span>❌</span>\n                      )}\n                    </div>\n                    <div>\n                      <span>확약서</span>\n                      {userdata.attachments?.commitmentletterprovided ? (\n                        <span>✔️</span>\n                      ) : (\n                        <span>❌</span>\n                      )}\n                    </div>\n                    <div>\n                      <span>창준위용</span>\n                      {userdata.attachments?.forfounding ? (\n                        <span>✔️</span>\n                      ) : (\n                        <span>❌</span>\n                      )}\n                    </div>\n                    <div>\n                      <span>무상옵션</span>\n                      {userdata.attachments?.freeoption ? (\n                        <span>✔️</span>\n                      ) : (\n                        <span>❌</span>\n                      )}\n                    </div>\n                    <div>\n                      <span>선호도조사</span>\n                      {userdata.attachments?.preferenceattachment ? (\n                        <span>✔️</span>\n                      ) : (\n                        <span>❌</span>\n                      )}\n                    </div>\n                    <div>\n                      <span>총회동의서</span>\n                      {userdata.attachments?.agreement ? (\n                        <span>✔️</span>\n                      ) : (\n                        <span>❌</span>\n                      )}\n                    </div>\n                    <div>\n                      <span>사은품</span>\n                      {userdata.attachments?.prizeattachment ? (\n                        <span>✔️</span>\n                      ) : (\n                        <span>❌</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* 사은품명 / 지급일자 표시 */}\n            {userdata.attachments?.prizeattachment && (\n              <div className={styles.rowcontainer}>\n                <div className={styles.unitbody}>\n                  <div className={styles.titlebody}>\n                    <span className={styles.title}>사은품명</span>\n                  </div>\n                  <div className={styles.contentbody}>\n                    <span>\n                      {userdata.attachments?.prizename || \"정보 없음\"}\n                    </span>\n                  </div>\n                </div>\n                <div className={styles.unitbody}>\n                  <div className={styles.titlebody}>\n                    <span className={styles.title}>사은품 지급일자</span>\n                  </div>\n                  <div className={styles.contentbody}>\n                    <span>\n                      {userdata.attachments?.prizedate\n                        ? userdata.attachments.prizedate.slice(0, 10)\n                        : \"정보 없음\"}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <hr />\n\n            {/* MGM */}\n            <h3>MGM</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>업체명</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.mgm?.mgmcompanyname || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>이름</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.mgm?.mgmname || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>은행명</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.mgm?.mgminstitution || \"정보 없음\"}</span>\n                </div>\n              </div>\n              <div className={styles.unitbody}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>계좌</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.mgm?.mgmaccount || \"정보 없음\"}</span>\n                </div>\n              </div>\n            </div>\n            <hr />\n\n            {/* 1차(직원) */}\n            <h3>1차(직원)</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>차순</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.firstemp?.firstemptimes || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>지급일</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.firstemp?.firstempdate || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <hr />\n\n            {/* 2차(직원) */}\n            <h3>2차(직원)</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>차순</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.secondemp?.secondemptimes || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>지급일</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.secondemp?.secondempdate || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <hr />\n\n            {/* 비고 */}\n            <h3>비고</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>기타</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>{userdata.additional || \"정보 없음\"}</span>\n                </div>\n              </div>\n            </div>\n            <hr />\n\n            {/* 총회 참석여부 */}\n            <h3>총회 참석 여부</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>서면</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.meetingattend?.ftofattend || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>직접</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.meetingattend?.selfattend || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>대리</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.meetingattend?.behalfattend || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <hr />\n\n            {/* 안건 */}\n            <h3>안건</h3>\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제1호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda1 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제2-1호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda2_1 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제2-2호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda2_2 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제2-3호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda2_3 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제2-4호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda2_4 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제3호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda3 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제4호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda4 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제5호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda5 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제6호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda6 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제7호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda7 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제8호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda8 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className={styles.rowcontainer}>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제9호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda9 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.unitbody} style={{ width: \"100%\" }}>\n                <div className={styles.titlebody}>\n                  <span className={styles.title}>제10호</span>\n                </div>\n                <div className={styles.contentbody}>\n                  <span>\n                    {userdata.agenda?.agenda10 || \"정보 없음\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <hr />\n          </>\n        );\n      }\n\n    case \"loading\":\n      console.log(\"loading\");\n      return <></>;\n\n    case \"hasError\":\n      throw userselectordata.contents;\n  }\n}\n\nexport default withAuth(Search);\n"
                }
            }
        },
        "signup": {
            "__files__": {
                "page.js": "\"use client\";\nimport { LoginInputbox } from \"@/components/Inputbox\";\nimport { Button } from \"@/components/Button\";\nimport styles from \"@/styles/Signup.module.scss\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\"; // Import useRouter\nimport Swal from \"sweetalert2\"; // Import SweetAlert2\nimport { fetchSignup } from \"@/utils/api\";\n\nexport default function Signup() {\n  const [userform, setUserform] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    roles: [\"user\"], //default 는 유저\n  });\n\n  const router = useRouter(); // Initialize useRouter\n\n  const handleChange = (e) => {\n    setUserform({\n      ...userform,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetchSignup(\n        userform.username,\n        userform.email,\n        userform.password,\n        userform.roles\n      );\n      Swal.fire({\n        title: \"회원가입 성공\",\n        text: \"회원가입이 완료되었습니다!\",\n        icon: \"success\",\n        confirmButtonText: \"확인\",\n      }).then(() => {\n        router.push(\"/dashboard\"); // Redirect to dashboard\n      });\n      console.log(\"Signup successful:\", response.data);\n    } catch (error) {\n      console.error(\"Signup error:\", error.response.data.message);\n      Swal.fire({\n        title: \"회원가입 실패\",\n        text: error.response.data.message || \"회원가입에 실패했습니다.\",\n        icon: \"error\",\n        confirmButtonText: \"확인\",\n      });\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.childcontainer}>\n        <h1 className={styles.title}>회원가입</h1>\n        <form className={styles.form} onSubmit={handleSubmit}>\n          <LoginInputbox\n            className={styles.input}\n            name=\"username\"\n            placeholder=\"사용자 이름 (아이디)\"\n            onChange={handleChange}\n          />\n          <LoginInputbox\n            className={styles.input}\n            name=\"email\"\n            placeholder=\"이메일\"\n            type=\"email\"\n            onChange={handleChange}\n          />\n          <LoginInputbox\n            className={styles.input}\n            name=\"password\"\n            placeholder=\"비밀번호\"\n            type=\"password\"\n            onChange={handleChange}\n          />\n          <Button className={styles.button} type=\"submit\">\n            회원가입\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n}\n"
            }
        },
        "testpage": {
            "__files__": {
                "page.js": "import Test from \"@/components/Test\"\n\nexport default function Testpage() {\n  return (\n      <>\n        <h1>thisistestpage</h1>\n        <Test></Test>\n      </>\n    )\n}\n"
            }
        }
    },
    "components": {
        "__files__": {
            "Button.js": "// src/components/Button.js\n\"use client\";\nimport styles from \"@/img/Button.module.scss\";\nimport { useState } from 'react';\nimport { CgSearch } from \"react-icons/cg\";\nimport { FaFileDownload } from \"react-icons/fa\";\nimport { downloadFile } from \"@/utils/api\";\n\nexport const Button = (props) => {\n    return (\n        <button className={styles.buttonstyle}>\n            {props.children}\n        </button>\n    )\n}\nexport const LinkButton = (props) => {\n    return (\n        <button className={styles.linkbuttonstyle}>\n            {props.children}\n        </button>\n    )\n}\n\nconst iconstyle = { fontSize: \"1.5em\", marginLeft: \"10px\", marginTop: \"10px\" };\n\nexport const DownloadButton = ({ userid, filename, children }) => {\n    const handleClick = () => {\n        downloadFile(userid, filename);\n    }\n\n    return (\n        <button className={styles.downloadbuttonstyle} onClick={handleClick}>\n            {children || \"다운로드\"}\n        </button>\n    )\n}\n\nexport const RegDownloadButton = ({ children }) => {\n    const handleClick = async () => {\n      try {\n        await downloadRegFile();\n      } catch (error) {\n        console.error(\"Reg 파일 다운로드 실패:\", error);\n      }\n    };\n  \n    return (\n      <button className={styles.downloadbuttonstyle} onClick={handleClick}>\n        {children || \"Reg 파일 다운로드\"}\n      </button>\n    );\n  };\n\nexport const CgSearchButton = (props) => {\n    return (\n        <button className={styles.CgButton}>\n            <CgSearch />\n            {props.children}\n        </button>\n    )\n}\n\nexport const CheckButton = (props) => {\n    const { name, value } = props;\n    return (\n        <input type=\"checkbox\" className={styles.checkstyle} name={name} value={value} />\n    )\n}\n\n// Button_Y 컴포넌트 수정\nexport const Button_Y = ({ type = \"submit\", onClick, children, ...rest }) => {\n    return (\n      <button\n        type={type}\n        className={styles.buttonstyle_y}\n        onClick={onClick}\n        {...rest}\n      >\n        {children}\n      </button>\n    );\n  };\n\nexport const Button_N = (props) => {\n    return (\n        <button className={styles.buttonstyle_n}>\n            {props.children}\n        </button>\n    )\n}\n\nexport const SearchButton = (props) => {\n    return (\n        <button className={styles.searchbuttonstyle}>\n            {props.children}\n        </button>\n    )\n}\n\nexport const ModifyButton = (props) => {\n    return (\n        <button className={styles.modifybutton} onClick={props.onClick}>\n            {props.children}\n        </button>\n    )\n}\n\nexport const ChecButton = (props) => {\n    return (\n        <button className={styles.checkbutton}>\n            {props.children}\n        </button>\n    )\n}\n\nexport const PaymentScheduleButton = (props) => {\n    const [isActivePayment, setIsActivePayment] = useState(props.isclear); // 납입 버튼 활성화 상태를 관리하는 상태\n    const setValue = props.setValue;\n    const handlePaymentClick = () => {\n        setIsActivePayment(true); // 납입 버튼 활성화\n        setValue('isclear', true);\n    };\n\n    const handleScheduleClick = () => {\n        setIsActivePayment(false); // 예정 버튼 활성화\n        setValue('isclear', false);\n    };\n\n    return (\n        <>\n            <button type=\"button\" className={`${styles.toggleButton} ${isActivePayment ? styles.active : ''}`} onClick={handlePaymentClick}>\n                <div className={styles.ButtonFont}>납입</div>\n            </button>\n            <button type=\"button\" className={`${styles.toggleButton} ${!isActivePayment ? styles.active : ''}`} onClick={handleScheduleClick}>\n                <div className={styles.ButtonFont2}>예정</div>\n            </button>\n        </>\n    );\n};\n",
            "ChasuFinBody.js": "import { useState, useEffect } from \"react\";\nimport { BsBagDash, BsDatabase } from \"react-icons/bs\";\nimport { ModifyButton } from \"@/components/Button\";\nimport styles from \"@/styles/Inputmoney.module.scss\";\nimport Link from \"next/link\";\nimport { fetchCompletedPhases } from \"@/utils/api\";\n\nconst ChasuFinBody = ({ userId }) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (userId) {\n      fetchData();\n    }\n  }, [userId]);\n\n  const fetchData = async () => {\n    try {\n      const fetchedData = await fetchCompletedPhases(userId);\n      setData(fetchedData); // 원본 데이터 저장\n      console.log(\"Fetched Data:\", fetchedData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  if (!data || data.length === 0) {\n    return <div className={styles.ContentPreBody}>\n      <div className={styles.ContentBodyTitle}>완납된 납부 내역이 없습니다.</div>\n    </div>\n      ;\n  }\n\n  return (\n    <div>\n      {data\n        .filter(item => item.feesum !== 0) // ✅ 총액이 0인 항목 제외\n        .map((item, index) => (\n          <div key={index} className={styles.ContentFinBody}>\n            <div className={styles.ContentBodyTitle}>\n              <div className={styles.CBTIcon}>\n                <div className={styles.Icon}>\n                  <BsBagDash style={{ width: \"100%\", height: \"100%\" }} />\n                </div>\n              </div>\n              <div className={styles.CBTText}>\n                <div className={styles.CBTCha}>\n                  <div className={styles.CBTChaFont}>{item.phaseNumber}차 납부</div>\n                </div>\n                <div className={styles.CBTDate}>\n                  <div className={styles.CBTDateFont}>\n                    완납일자: {item.fullpaiddate ? item.fullpaiddate : \"N/A\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className={styles.CBBottonBody}>\n              <ModifyButton>\n                <Link href={`/inputmoney/payinfo/${userId}/${item.phaseNumber}`}>\n                  <div className={styles.CBBottonFont}>납부수정</div>\n                </Link>\n              </ModifyButton>\n            </div>\n            <div className={styles.CBSum}>\n              <div className={styles.CBMoneyImg}>\n                <div className={styles.Icon2}>\n                  <BsDatabase style={{ width: \"100%\", height: \"100%\" }} />\n                </div>\n              </div>\n              <div className={styles.CBSumText}>{item.phaseNumber}차 총액</div>\n              <div className={styles.CBSumNum}>\n                {item.feesum.toLocaleString()} ₩\n              </div>\n            </div>\n            <div className={styles.CBSum}>\n              <div className={styles.CBMoneyImg}>\n                <div className={styles.Icon2}>\n                  <BsDatabase style={{ width: \"100%\", height: \"100%\" }} />\n                </div>\n              </div>\n              <div className={styles.CBSumText}>납입금액</div>\n              <div className={styles.CBSumNum} style={{ color: \"#3E9C12\" }}>\n                {item.charged ? item.charged.toLocaleString() : 0} ₩\n              </div>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ChasuFinBody;\n",
            "ChasuPreBody.js": "import { useState, useEffect } from \"react\";\nimport { BsBagDash, BsDatabase } from \"react-icons/bs\";\nimport { ModifyButton } from \"@/components/Button\";\nimport styles from \"@/styles/Inputmoney.module.scss\";\nimport Link from \"next/link\";\nimport { fetchPendingPhases } from \"@/utils/api\";\n\nconst ChasuPreBody = ({ userId }) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (userId) {\n      fetchData();\n    }\n  }, [userId]);\n\n  const fetchData = async () => {\n    try {\n      const fetchedData = await fetchPendingPhases(userId);\n      setData(fetchedData);\n      console.log(fetchedData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Helper function to determine the display value for planned date\n  const getDisplayPlannedDate = (phase) => {\n    const { planneddate, planneddateString } = phase;\n\n    if (!planneddate) {\n      return \"\"; // Return empty string if planneddate is undefined or null\n    }\n\n    const date = new Date(planneddate);\n    const cutoff = new Date(\"2100-01-01\");\n\n    if (isNaN(date.getTime())) {\n      // If planneddate is not a valid date\n      return planneddateString || \"\";\n    }\n\n    if (date > cutoff) {\n      return planneddateString || \"\";\n    }\n\n    // Format the date as desired, e.g., YYYY-MM-DD\n    return date.toISOString().split(\"T\")[0];\n  };\n\n  if (!data || data.length === 0) {\n    return <p>예정된 납부 내역이 없습니다.</p>;\n  }\n\n  return (\n    <div>\n      {data.map((item, index) => (\n        <div key={index} className={styles.ContentPreBody}>\n          <div className={styles.ContentBodyTitle}>\n            <div className={styles.CBTIcon}>\n              <div className={styles.Icon}>\n                <BsBagDash style={{ width: \"100%\", height: \"100%\" }} />\n              </div>\n            </div>\n            <div className={styles.CBTText}>\n              <div className={styles.CBTCha}>\n                <div className={styles.CBTChaFont}>{item.phaseNumber}차 납부</div>\n              </div>\n              <div className={styles.CBTDate}>\n                <div className={styles.CBTDateFont}>\n                  예정일자: {getDisplayPlannedDate(item) || \"N/A\"}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className={styles.CBBottonBody}>\n            <ModifyButton onClick={() => {}}>\n              <Link href={`/inputmoney/payinfo/${userId}/${item.phaseNumber}`}>\n                <div className={styles.CBBottonFont}>납부수정</div>\n              </Link>\n            </ModifyButton>\n          </div>\n          <div className={styles.CBSum}>\n            <div className={styles.CBMoneyImg}>\n              <div className={styles.Icon2}>\n                <BsDatabase style={{ width: \"100%\", height: \"100%\" }} />\n              </div>\n            </div>\n            <div className={styles.CBSumText}>{item.phaseNumber}차 총액</div>\n            <div className={styles.CBSumNum}>\n              {item.feesum ? item.feesum.toLocaleString() : 0} ₩\n            </div>\n          </div>\n          <div className={styles.CBSum}>\n            <div className={styles.CBMoneyImg}>\n              <div className={styles.Icon2}>\n                <BsDatabase style={{ width: \"100%\", height: \"100%\" }} />\n              </div>\n            </div>\n            <div className={styles.CBSumText}>납입금액</div>\n            <div className={styles.CBSumNum}>\n              {item.charged ? item.charged.toLocaleString() : 0} ₩\n            </div>\n          </div>\n          <div className={styles.CBSum}>\n            <div className={styles.CBMoneyImg}>\n              <div className={styles.Icon2}>\n                <BsDatabase style={{ width: \"100%\", height: \"100%\" }} />\n              </div>\n            </div>\n            <div className={styles.CBSumText}>미납금액</div>\n            <div className={styles.CBSumNum} style={{ color: \"#D11414\" }}>\n              {item.sum ? item.sum.toLocaleString() : 0} ₩\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ChasuPreBody;\n",
            "ConfirmationModal.js": "// src/components/ConfirmationModal.js\nimport React from \"react\";\nimport styles from \"@/styles/ConfirmationModal.module.scss\";\n\nconst ConfirmationModal = ({ message, onConfirm, onCancel }) => {\n  return (\n    <div className={styles.modalOverlay}>\n      <div className={styles.modalContent}>\n        <p>{message}</p>\n        <div className={styles.buttonContainer}>\n          <button onClick={onConfirm} className={styles.confirmButton}>\n            예\n          </button>\n          <button onClick={onCancel} className={styles.cancelButton}>\n            아니오\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmationModal;\n",
            "droplistdata.js": "// /components/droplistdata.js\n\nexport const sortlist = [\n  {\n    value: \"1\",\n    item: \"청약\",\n  },\n];\n\nexport const banklist = [\n  {\n    value: \"TOSS\",\n    item: \"토스(TOSS)\",\n  },\n  {\n    value: \"KAKAOBANK\",\n    item: \"카카오뱅크\",\n  },\n  ,\n  {\n    value: \"SHINHAN\",\n    item: \"신한은행\",\n  },\n  {\n    value: \"IBK\",\n    item: \"IBK기업은행\",\n  },\n  {\n    value: \"KOOKMIN\",\n    item: \"KB국민은행\",\n  },\n  {\n    value: \"SUHYUP\",\n    item: \"수협은행\",\n  },\n  {\n    value: \"NH\",\n    item: \"농협은행\",\n  },\n  {\n    value: \"HANA\",\n    item: \"KEB하나은행\",\n  },\n  {\n    value: \"SHIN\",\n    item: \"신한은행\",\n  },\n  {\n    value: \"IBK\",\n    item: \"IBK기업은행\",\n  },\n  {\n    value: \"SC\",\n    item: \"SC제일은행\",\n  },\n  {\n    value: \"HWAN\",\n    item: \"외환은행\",\n  },\n  {\n    value: \"CITY\",\n    item: \"한국시티은행\",\n  },\n  {\n    value: \"KN\",\n    item: \"경남은행\",\n  },\n  {\n    value: \"GJ\",\n    item: \"광주은행\",\n  },\n  {\n    value: \"DG\",\n    item: \"대구은행\",\n  },\n  {\n    value: \"BS\",\n    item: \"부산은행\",\n  },\n  {\n    value: \"JB\",\n    item: \"전북은행\",\n  },\n  {\n    value: \"JEJU\",\n    item: \"제주은행\",\n  },\n  {\n    value: \"INDUSTRY\",\n    item: \"한국산업은행\",\n  },\n  {\n    value: \"EXPORT\",\n    item: \"한국수출은행\",\n  },\n];\nexport const classificationlist = [\n  //분류\n  {\n    value: \"c\",\n    item: \"청약\",\n  },\n  {\n    value: \"j\",\n    item: \"정계약\",\n  },\n  {\n    value: \"r\",\n    item: \"수정\",\n  },\n  {\n    value: \"p\",\n    item: \"업대\",\n  },\n  {\n    value: \"t\",\n    item: \"창준위\",\n  },\n  {\n    value: \"g\",\n    item: \"지주\",\n  },\n  {\n    value: \"x\",\n    item: \"해지\",\n  },\n];\nexport const cancellist = [\n  {\n    value: \"x\",\n    item: \"해지\",\n  },\n];\nexport const sintacklist = [\n  {\n    value: \"MOGUNGHWA\",\n    item: \"무궁화신탁\",\n  },\n  {\n    value: \"KYOBO\",\n    item: \"교보자산신탁\",\n  },\n  {\n    value: \"DASIN\",\n    item: \"대신자산신탁\",\n  },\n  {\n    value: \"SINYOUNG\",\n    item: \"신영부동산신탁\",\n  },\n];\n\nexport const typeidlist = [\n  //가입 차순\n  {\n    value: \"2차\",\n    item: \"2차\",\n  },\n  // {\n  //   value: \"1-1차\",\n  //   item: \"1-1차\",\n  // },\n  // {\n  //   value: \"1-2차\",\n  //   item: \"1-2차\",\n  // },\n  // {\n  //   value: \"1-3차\",\n  //   item: \"1-3차\",\n  // },\n  // {\n  //   value: \"1-4차\",\n  //   item: \"1-4차\",\n  // },\n  // {\n  //   value: \"1-5차\",\n  //   item: \"1-5차\",\n  // },\n  // {\n  //   value: \"2차\",\n  //   item: \"2차\",\n  // },\n];\n\nexport const typelist = [\n  //타입\n  {\n    value: \"44\",\n    item: \"44\",\n  },\n  {\n    value: \"49\",\n    item: \"49\",\n  },\n  {\n    value: \"70\",\n    item: \"70\",\n  },\n  {\n    value: \"84A\",\n    item: \"84A\",\n  },\n  {\n    value: \"84B\",\n    item: \"84B\",\n  },\n];\n\nexport const grouplist = [\n  //군\n  {\n    value: \"가\",\n    item: \"가\",\n  },\n  {\n    value: \"나\",\n    item: \"나\",\n  },\n  {\n    value: \"다\",\n    item: \"다\",\n  },\n  {\n    value: \"라\",\n    item: \"라\",\n  },\n  {\n    value: \"마\",\n    item: \"마\",\n  },\n  {\n    value: \"바\",\n    item: \"바\",\n  },\n  {\n    value: \"사\",\n    item: \"사\",\n  },\n];\n\nexport const turnlist = [\n  //순번\n  {\n    value: \"1\",\n    item: \"1\",\n  },\n  {\n    value: \"2\",\n    item: \"2\",\n  },\n  {\n    value: \"3\",\n    item: \"3\",\n  },\n  {\n    value: \"4\",\n    item: \"4\",\n  },\n  {\n    value: \"5\",\n    item: \"5\",\n  },\n];\n",
            "Header.js": "\"use client\";\nimport React, { useContext } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { usePathname } from \"next/navigation\";\nimport { AiOutlineBell } from \"react-icons/ai\";\nimport styles from \"../styles/Header.module.scss\";\nimport AuthContext from \"@/utils/context/AuthContext\";\n\nconst iconstyle = { fontSize: \"1.5em\", float: \"left\", margin: \"13px\" };\n\nconst Header = () => {\n  const router = useRouter();\n  const pathname = usePathname();\n  const splitpath = pathname.split(\"/\");\n  const headertitle = {\n    dashboard: \"회원관리시스템이 정상 작동중입니다 👋🏻\",\n    search: \"회원 정보 검색\",\n    create: \"회원 정보 입력\",\n    createwithdraw: \"해약 회원 정보 입력\",\n    modify: \"회원 정보 수정\",\n    inputmoney: \"납입금 관리\",\n    deposit: \"회원 입금 내역\",\n    latefees: \"전체 회원 연체료\",\n    control: \"차수 관리\",\n    filecontrol: \"엑셀 관리\"\n  };\n  const subtitle = {\n    dashboard: \"덕소 리버 베르데포레 \",\n    search: \"회원정보를 한번에 확인할 수 있는 페이지입니다.\",\n    create: \"신규 회원정보를 생성할 수 있는 페이지입니다.\",\n    createwithdraw: \"해약 회원정보를 생성할 수 있는 페이지입니다.\",\n    modify: \"기존 회원정보를 수정할 수 있는 페이지입니다.\",\n    inputmoney: \"회원의 납입금을 한번에 관리할 수 있는 페이지입니다.\",\n    deposit: \"회원들의 입금 내역을 확인할 수 있는 페이지입니다.(임시)\",\n    latefees: \"회원들의 연체료를 조회할 수 있는 페이지입니다.\",\n    control:\n      \"차수별 납입금을 한번에 확인하고 수정,생성,삭제를 진행할 수 있습니다. [개발중]\",\n    filecontrol: \"고객 정보가 담긴 엑셀 파일을 업로드, 다운로드할 수 있는 페이지입니다.\"\n  };\n\n  const { isLoggedIn, username, logout } = useContext(AuthContext);\n\n  const handleLogout = () => {\n    logout();\n    router.push(\"/login\");\n  };\n\n  const handleLogin = () => {\n    router.push(\"/login\");\n  };\n\n  return (\n    <div className={styles.maincontainer}>\n      <div className={styles.container}>\n        <h1 className={styles.title}>{headertitle[splitpath[1]]}</h1>\n        <h3 className={styles.subtitle}>{subtitle[splitpath[1]]}</h3>\n      </div>\n      <div className={styles.rightcontainer}>\n        <AiOutlineBell style={iconstyle} />\n        <div className={styles.loginbody}>\n          {isLoggedIn ? (\n            <div className={styles.usercontainer}>\n              <div className={styles.Name}>\n                <h1 className={styles.name}>{username}</h1>\n              </div>\n              <div className={styles.loginfo}>\n                <h3 className={styles.role}>Logged in</h3>\n                <button onClick={handleLogout} className={styles.logoutButton}>\n                  <h3 className={styles.role}>\n                    <div className={styles.logoutbutton}>로그아웃</div>\n                  </h3>\n                </button>\n              </div>\n            </div>\n          ) : (\n            <div className={styles.button}>\n              <button onClick={handleLogin} className={styles.loginButton}>\n                <div className={styles.ButtonFont}>로그인</div>\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n",
            "Inputbox.js": "\"use client\";\n\nimport React, { forwardRef, useState, useEffect } from \"react\";\nimport styles from \"@/styles/Inputbox.module.scss\";\nimport { IoMdCloudUpload } from \"react-icons/io\";\n\nexport const Checkbox = (props) => {\n  const { label, name, onChange, checked, register, isError, ...rest } = props;\n  const { onChange: onChangeFromRegister, onBlur, name: fieldName, ref } = register;\n  \n  return (\n    <label className={`${styles.customCheckbox} ${isError ? styles.errorInput : ''}`}>\n      <input\n        type=\"checkbox\"\n        name={fieldName}\n        checked={checked} // controlled 방식으로 처리\n        ref={ref}\n        onBlur={onBlur}\n        onChange={(e) => {\n          if (onChangeFromRegister) onChangeFromRegister(e);\n          if (onChange) onChange(e);\n        }}\n        {...rest}\n      />\n      <span className={styles.checkboxText}>{label}</span>\n    </label>\n  );\n};\n\nexport const Spanbox = ({ children }) => {\n  return <span className={styles.spancontainer}>{children}</span>;\n};\n\nexport const Inputbox = (props) => {\n  const {\n    type,\n    placeholder,\n    onChange,\n    date_placeholder,\n    name,\n    defaultValue,\n    value,\n    register,\n    isError,\n    ...rest\n  } = props;\n\n  return (\n    <input\n      className={`${styles.inputcontainer} ${isError ? styles.errorInput : ''}`}\n      data-placeholder={date_placeholder}\n      type={type}\n      name={name}\n      onChange={onChange}\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n      value={value}\n      {...register}\n      {...rest}\n    />\n  );\n};\n\nexport const MGMInputbox = (props) => {\n  const {\n    type,\n    placeholder,\n    onChange,\n    name,\n    defaultValue,\n    value,\n    register,\n    isError,\n    ...rest\n  } = props;\n\n  return (\n    <input\n      className={`${styles.mgmInputContainer} ${isError ? styles.errorInput : ''}`}\n      type={type}\n      name={name}\n      onChange={onChange}\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n      value={value}\n      {...register}\n      {...rest}\n    />\n  );\n};\n\nexport const InputboxSmall = (props) => {\n  const {\n    type,\n    placeholder,\n    onChange,\n    date_placeholder,\n    name,\n    defaultValue,\n    value,\n    register,\n    isError,\n    ...rest\n  } = props;\n\n  return (\n    <input\n      className={`${styles.inputcontainerSmall} ${isError ? styles.errorInput : ''}`}\n      data-placeholder={date_placeholder}\n      type={type}\n      name={name}\n      onChange={onChange}\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n      value={value}\n      {...register}\n      {...rest}\n    />\n  );\n};\n\nexport const Inputbox2 = forwardRef((props, ref) => {\n  const {\n    type,\n    placeholder,\n    onChange,\n    date_placeholder,\n    name,\n    defaultValue,\n    value,\n    isError,\n    ...rest\n  } = props;\n\n  return (\n    <input\n      className={`${styles.inputcontainer} ${isError ? styles.errorInput : ''}`}\n      data-placeholder={date_placeholder}\n      type={type}\n      name={name}\n      onChange={onChange}\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n      value={value}\n      ref={ref}\n      {...rest}\n    />\n  );\n});\n\nexport const InputAreabox = (props) => {\n  const {\n    type,\n    placeholder,\n    onChange,\n    date_placeholder,\n    name,\n    defaultValue,\n    value,\n    register,\n    isError,\n    ...rest\n  } = props;\n\n  return (\n    <textarea\n      className={`${styles.areacontainer} ${isError ? styles.errorInput : ''}`}\n      data-placeholder={date_placeholder}\n      type={type}\n      name={name}\n      onChange={onChange}\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n      value={value}\n      {...register}\n      {...rest}\n    />\n  );\n};\n\nexport const Searchbox = (props) => {\n  const { type, placeholder, onChange, date_placeholder, name, register, isError, ...rest } = props;\n\n  return (\n    <input\n      className={`${styles.searchclient} ${isError ? styles.errorInput : ''}`}\n      data-placeholder={date_placeholder}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      onChange={onChange}\n      {...register}\n      {...rest}\n    />\n  );\n};\n\nexport const Inputbox_L = (props) => {\n  const { type, placeholder, onChange, date_placeholder, name, defaultValue, register, isError, ...rest } = props;\n\n  return (\n    <input\n      className={`${styles.inputcontainer_L} ${isError ? styles.errorInput : ''}`}\n      data-placeholder={date_placeholder}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      onChange={onChange}\n      defaultValue={defaultValue}\n      {...register}\n      {...rest}\n    />\n  );\n};\n\nexport const Inputbox_M = (props) => {\n  const {\n    type,\n    placeholder,\n    onChange,\n    date_placeholder,\n    name,\n    defaultValue,\n    value,\n    register,\n    isError,\n    ...rest\n  } = props;\n\n  return (\n    <>\n      <div className={styles.SearchFont}>{placeholder}</div>\n      <input\n        className={`${styles.inputcontainer_M} ${isError ? styles.errorInput : ''}`}\n        data-placeholder={date_placeholder}\n        type={type}\n        name={name}\n        onChange={onChange}\n        value={value}\n        defaultValue={defaultValue}\n        {...register}\n        {...rest}\n      />\n    </>\n  );\n};\n\nexport const LoginInputbox = (props) => {\n  const { type, placeholder, value, onChange, name, register, isError, ...rest } = props;\n\n  return (\n    <input\n      className={`${styles.logininputcontainer} ${isError ? styles.errorInput : ''}`}\n      type={type}\n      name={name}\n      value={value}\n      onChange={onChange}\n      placeholder={placeholder}\n      {...register}\n      {...rest}\n    />\n  );\n};\n\nexport const LongInputbox = (props) => {\n  const { type, placeholder, register, isError, ...rest } = props;\n\n  return (\n    <input\n      className={`${styles.Longinputcontainer} ${isError ? styles.errorInput : ''}`}\n      type={type}\n      placeholder={placeholder}\n      {...register}\n      {...rest}\n    />\n  );\n};\n\nexport const DropInputbox = (props) => {\n  const { list, placeholder, register, isError, ...rest } = props;\n\n  return (\n    <select\n      className={`${styles.Dropinputcontainer} ${isError ? styles.errorInput : ''}`}\n      {...register}\n      {...rest}\n    >\n      {list.map((i, index) => {\n        return (\n          <option key={index} value={i.value}>\n            {i.item}\n          </option>\n        );\n      })}\n    </select>\n  );\n};\n\nconst iconstyle = {\n  fontSize: \"3.4em\",\n  textAlign: \"center\",\n  color: \"#7152F3\",\n  paddingRight: \"10%\",\n  paddingLeft: \"7%\",\n};\n\nexport const FileInputbox = (props) => {\n  const { handleChange, isupload, value, name, register, isError, ...rest } = props;\n  const { onChange: registerOnChange, onBlur, ref, ...restRegister } = register || {};\n\n  const combinedOnChange = (e) => {\n    handleChange(e);\n    if (registerOnChange) registerOnChange(e);\n  };\n\n  return (\n    <label className={styles.Fileinputcontainer} htmlFor={name}>\n      <input\n        type=\"file\"\n        id={name}\n        onChange={combinedOnChange}\n        className={styles.fileInput}\n        name={name}\n        ref={ref}\n        {...restRegister}\n        {...rest}\n      />\n      <p style={{ textAlign: \"center\", margin: 0 }}>\n        <IoMdCloudUpload style={iconstyle} />\n      </p>\n      {isupload ? (\n        <>\n          <p className={styles.successtext}>업로드 완료</p>\n          <p className={styles.successfilename}>\n            {value}\n          </p>\n        </>\n      ) : (\n        <>\n          <p className={styles.filetext}>\n            드래그 드랍 또는 <span className={styles.texthighlight}>업로드 할 파일</span>을 선택해주세요\n          </p>\n          <p className={styles.filetypetext}>파일형식 : PDF, PNG, JPEG</p>\n        </>\n      )}\n      {isError && <span className={styles.error}>파일을 업로드해주세요.</span>}\n    </label>\n  );\n};\n\nexport function ExcelFileInputbox(props) {\n  const {\n    handleChange,\n    isupload,\n    value,\n    name,\n    register,\n    isError,\n    ...rest\n  } = props;\n\n  const { onChange: registerOnChange, onBlur, ref, ...restRegister } = register || {};\n\n  const combinedOnChange = (e) => {\n    if (handleChange) handleChange(e);\n    if (registerOnChange) registerOnChange(e);\n  };\n\n  const iconStyle = {\n    fontSize: \"2rem\",\n    color: \"#999\",\n  };\n\n  return (\n    <label className={styles.Fileinputcontainer} htmlFor={name}>\n      <input\n        type=\"file\"\n        id={name}\n        onChange={combinedOnChange}\n        className={styles.fileInput}\n        name={name}\n        ref={ref}\n        {...restRegister}\n        {...rest}\n      />\n      <p style={{ textAlign: \"center\", margin: 0 }}>\n        <IoMdCloudUpload style={iconStyle} />\n      </p>\n      {isupload ? (\n        <>\n          <p className={styles.successtext}>업로드 완료</p>\n          <p className={styles.successfilename}>{value}</p>\n        </>\n      ) : (\n        <>\n          <p className={styles.filetext}>\n            드래그 드롭 또는{\" \"}\n            <span className={styles.texthighlight}>업로드 할 파일</span>을 선택해주세요\n          </p>\n          <p className={styles.filetypetext}>파일형식 : XLSX / XLS</p>\n        </>\n      )}\n      {isError && <span className={styles.error}>파일을 업로드해주세요.</span>}\n    </label>\n  );\n}\n\nexport const PostInputbox = ({ register, setValue, namePrefix, postcodeName, addressName, isError }) => {\n  const [postnumber, setPostnumber] = useState(\"우편번호\");\n  const [post, setPost] = useState(\"주소\");\n\n  const getpost = () => {\n    if (typeof window !== 'undefined' && window.daum) {\n      new window.daum.Postcode({\n        oncomplete: function (data) {\n          const zonecode = data.zonecode;\n          const roadAddress = data.roadAddress;\n\n          setPostnumber(zonecode);\n          setPost(roadAddress);\n\n          const postcodeField = postcodeName || `${namePrefix}.postnumber`;\n          const addressField = addressName || `${namePrefix}.post`;\n\n          setValue(postcodeField, zonecode);\n          setValue(addressField, roadAddress);\n        },\n      }).open();\n    } else {\n      console.error(\"Daum Postcode 라이브러리가 로드되지 않았습니다.\");\n    }\n  };\n\n  return (\n    <div className={styles.postContainer}>\n      <input\n        type=\"button\"\n        onClick={getpost}\n        value={postnumber}\n        className={`${styles.postcontainer} ${isError ? styles.errorInput : ''}`}\n      />\n      <input\n        type=\"button\"\n        onClick={getpost}\n        value={post}\n        className={`${styles.postcontainer} ${isError ? styles.errorInput : ''}`}\n      />\n      {isError && <span className={styles.error}>주소를 입력해주세요.</span>}\n\n      <input\n        type=\"hidden\"\n        {...register(postcodeName || `${namePrefix}.postnumber`, { required: \"우편번호를 입력해주세요.\" })}\n      />\n      <input\n        type=\"hidden\"\n        {...register(addressName || `${namePrefix}.post`, { required: \"주소를 입력해주세요.\" })}\n      />\n    </div>\n  );\n};\n\nexport const PostInputbox2 = ({ register, setValue, namePrefix, postcodeName, addressName, isError, initialPostNumber, initialAddress }) => {\n  const [postnumber, setPostnumber] = useState(initialPostNumber || \"우편번호\");\n  const [post, setPost] = useState(initialAddress || \"주소\");\n\n  useEffect(() => {\n    setPostnumber(initialPostNumber || \"우편번호\");\n    setPost(initialAddress || \"주소\");\n  }, [initialPostNumber, initialAddress]);\n\n  const getpost = () => {\n    if (typeof window !== 'undefined' && window.daum) {\n      new window.daum.Postcode({\n        oncomplete: function (data) {\n          const zonecode = data.zonecode;\n          const roadAddress = data.roadAddress;\n\n          setPostnumber(zonecode);\n          setPost(roadAddress);\n\n          const postcodeField = postcodeName || `${namePrefix}.postnumber`;\n          const addressField = addressName || `${namePrefix}.post`;\n\n          setValue(postcodeField, zonecode);\n          setValue(addressField, roadAddress);\n        },\n      }).open();\n    } else {\n      console.error(\"Daum Postcode 라이브러리가 로드되지 않았습니다.\");\n    }\n  };\n\n  return (\n    <div className={styles.postContainer2}>\n      <input\n        type=\"button\"\n        onClick={getpost}\n        value={postnumber}\n        className={`${styles.postcontainer} ${isError ? styles.errorInput : ''}`}\n      />\n      <input\n        type=\"button\"\n        onClick={getpost}\n        value={post}\n        className={`${styles.postcontainer} ${isError ? styles.errorInput : ''}`}\n      />\n      {isError && <span className={styles.error}>주소를 입력해주세요.</span>}\n\n      <input\n        type=\"hidden\"\n        {...register(postcodeName || `${namePrefix}.postnumber`, { required: \"우편번호를 입력해주세요.\" })}\n      />\n      <input\n        type=\"hidden\"\n        {...register(addressName || `${namePrefix}.post`, { required: \"주소를 입력해주세요.\" })}\n      />\n    </div>\n  );\n};\n\n\nexport const InputboxGray = (props) => {\n  const {\n    type,\n    placeholder,\n    onChange,\n    name,\n    value,\n    register,\n    isError,\n    ...rest\n  } = props;\n\n  return (\n    <div className={`${styles.grayInputWrapper} ${isError ? styles.errorInputWrapper : ''}`}>\n      <input\n        className={`${styles.grayInput} ${isError ? styles.errorInput : ''}`}\n        type={type}\n        name={name}\n        onChange={onChange}\n        value={value}\n        placeholder={placeholder}\n        {...register}\n        {...rest}\n      />\n    </div>\n  );\n};\n",
            "LateFeeList.js": "// src/components/LateFeeList.js\n\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchLateFees, cancelCustomer } from \"@/utils/api\";\nimport styles from \"@/styles/Latefees.module.scss\";\nimport categoryMapping from \"@/utils/categoryMapping\";\nimport ConfirmationModal from \"@/components/ConfirmationModal\";\nimport Swal from \"sweetalert2\";\nimport Link from \"next/link\";\nimport { AiOutlineArrowUp, AiOutlineArrowDown } from \"react-icons/ai\";\n\nconst LateFeeList = ({\n  name,\n  number,\n  linkBase,\n  setLateFees,\n  sortConfig,\n  setSortConfig,\n}) => {\n  const [localLateFees, setLocalLateFees] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedCustomerId, setSelectedCustomerId] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    const currentName = name;\n    const currentNumber = number;\n\n    const fetchData = async () => {\n      try {\n        const data = await fetchLateFees(name, number);\n        if (isMounted && currentName === name && currentNumber === number) {\n          setLocalLateFees(data);\n          setLateFees(data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching late fees:\", error);\n      }\n    };\n\n    fetchData();\n    return () => {\n      isMounted = false;\n    };\n  }, [name, number, setLateFees]);\n\n  // 정렬 핸들러\n  const handleSort = (key) => {\n    let direction = \"ascending\";\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n  };\n\n  // 정렬 아이콘\n  const getSortIcon = (key) => {\n    if (sortConfig.key === key) {\n      return sortConfig.direction === \"ascending\" ? (\n        <AiOutlineArrowUp size={10} color=\"#7152F3\" />\n      ) : (\n        <AiOutlineArrowDown size={10} color=\"#7152F3\" />\n      );\n    }\n    // 기본 아이콘\n    return <AiOutlineArrowDown size={10} />;\n  };\n\n  // 정렬된 데이터\n  const sortedLateFees = React.useMemo(() => {\n    let sortableFees = [...localLateFees];\n    if (sortConfig.key !== null) {\n      sortableFees.sort((a, b) => {\n        let aValue = a[sortConfig.key];\n        let bValue = b[sortConfig.key];\n\n        if (aValue === null || aValue === undefined) return 1;\n        if (bValue === null || bValue === undefined) return -1;\n\n        if (typeof aValue === \"string\") {\n          aValue = aValue.toLowerCase();\n          bValue = bValue.toLowerCase();\n        }\n\n        if (aValue < bValue) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (aValue > bValue) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableFees;\n  }, [localLateFees, sortConfig]);\n\n  // 상위 컴포넌트 상태 업데이트\n  useEffect(() => {\n    setLateFees(sortedLateFees);\n  }, [sortedLateFees, setLateFees]);\n\n  // 회원 해지\n  const handleDelete = async (id) => {\n    try {\n      await cancelCustomer(id);\n      Swal.fire({\n        icon: \"success\",\n        title: \"회원 해지\",\n        text: \"회원이 성공적으로 해지되었습니다.\",\n        confirmButtonText: \"확인\",\n      }).then(() => {\n        const updatedFees = localLateFees.filter((fee) => fee.id !== id);\n        setLocalLateFees(updatedFees);\n        setLateFees(updatedFees);\n      });\n    } catch (error) {\n      console.error(\"Error cancelling customer:\", error);\n      Swal.fire({\n        icon: \"error\",\n        title: \"해지 실패\",\n        text: \"회원 해지 중 오류가 발생했습니다.\",\n        confirmButtonText: \"확인\",\n      });\n    }\n  };\n\n  // 모달 열기\n  const openConfirmation = (id) => {\n    setSelectedCustomerId(id);\n    setIsModalOpen(true);\n  };\n\n  // 모달 확인 -> 해지 진행\n  const confirmDelete = () => {\n    if (selectedCustomerId !== null) {\n      handleDelete(selectedCustomerId);\n      setSelectedCustomerId(null);\n      setIsModalOpen(false);\n    }\n  };\n\n  // 모달 취소\n  const cancelDelete = () => {\n    setSelectedCustomerId(null);\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div className={styles.tableWrapper}>\n      {/* 테이블 헤더 */}\n      <div className={styles.tablecontainer}>\n        <div className={styles.unitContainer} onClick={() => handleSort(\"id\")}>\n          <span>\n            ID\n            <span className={styles.sortIcon}>{getSortIcon(\"id\")}</span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"lastUnpaidPhaseNumber\")}\n        >\n          <span>\n            마지막 미납 차수\n            <span className={styles.sortIcon}>\n              {getSortIcon(\"lastUnpaidPhaseNumber\")}\n            </span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"customertype\")}\n        >\n          <span>\n            분류\n            <span className={styles.sortIcon}>\n              {getSortIcon(\"customertype\")}\n            </span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"name\")}\n        >\n          <span>\n            성명\n            <span className={styles.sortIcon}>{getSortIcon(\"name\")}</span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"registerdate\")}\n        >\n          <span>\n            가입일\n            <span className={styles.sortIcon}>\n              {getSortIcon(\"registerdate\")}\n            </span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"lateBaseDate\")}\n        >\n          <span>\n            연체기준일\n            <span className={styles.sortIcon}>\n              {getSortIcon(\"lateBaseDate\")}\n            </span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"recentPaymentDate\")}\n        >\n          <span>\n            최근납부\n            <span className={styles.sortIcon}>\n              {getSortIcon(\"recentPaymentDate\")}\n            </span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"daysOverdue\")}\n        >\n          <span>\n            일수\n            <span className={styles.sortIcon}>\n              {getSortIcon(\"daysOverdue\")}\n            </span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"lateRate\")}\n        >\n          <span>\n            연체율 (%)\n            <span className={styles.sortIcon}>{getSortIcon(\"lateRate\")}</span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"overdueAmount\")}\n        >\n          <span>\n            연체금액\n            <span className={styles.sortIcon}>\n              {getSortIcon(\"overdueAmount\")}\n            </span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"paidAmount\")}\n        >\n          <span>\n            납입금액\n            <span className={styles.sortIcon}>{getSortIcon(\"paidAmount\")}</span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"lateFee\")}\n        >\n          <span>\n            연체료\n            <span className={styles.sortIcon}>{getSortIcon(\"lateFee\")}</span>\n          </span>\n        </div>\n        <div\n          className={styles.unitContainer}\n          onClick={() => handleSort(\"totalOwed\")}\n        >\n          <span>\n            내야할 돈 합계\n            <span className={styles.sortIcon}>{getSortIcon(\"totalOwed\")}</span>\n          </span>\n        </div>\n      </div>\n\n      {/* 테이블 바디 */}\n      {sortedLateFees.map((fee) => (\n        <div className={styles.maincontainer} key={fee.id}>\n          <Link href={`/search/${fee.id}`} className={styles.link}>\n            <div className={styles.rowContainer}>\n              <div className={styles.unitContainer}>{fee.id}</div>\n              <div className={styles.unitContainer}>\n                {fee.lastUnpaidPhaseNumber !== null\n                  ? fee.lastUnpaidPhaseNumber\n                  : \"없음\"}\n              </div>\n              <div className={styles.unitContainer}>\n                {categoryMapping[fee.customertype] || \"N/A\"}\n              </div>\n              <div className={styles.unitContainer}>{fee.name || \"N/A\"}</div>\n              <div className={styles.unitContainer}>\n                {fee.registerdate ? fee.registerdate.slice(0, 10) : \"N/A\"}\n              </div>\n              <div className={styles.unitContainer}>\n                {fee.lateBaseDate ? fee.lateBaseDate.slice(0, 10) : \"N/A\"}\n              </div>\n              <div className={styles.unitContainer}>\n                {fee.recentPaymentDate\n                  ? fee.recentPaymentDate.slice(0, 10)\n                  : \"N/A\"}\n              </div>\n              <div className={styles.unitContainer}>{fee.daysOverdue}</div>\n              <div className={styles.unitContainer}>\n                {fee.lateRate.toFixed(2)}\n              </div>\n              <div className={styles.unitContainer}>\n                {fee.overdueAmount.toLocaleString()}원\n              </div>\n              <div className={styles.unitContainer}>\n                {fee.paidAmount.toLocaleString()}원\n              </div>\n              <div className={styles.unitContainer}>\n                {fee.lateFee.toFixed(2)}원\n              </div>\n              <div className={styles.unitContainer}>\n                {fee.totalOwed.toLocaleString()}원\n              </div>\n            </div>\n          </Link>\n        </div>\n      ))}\n\n      {/* 확인 모달 */}\n      {isModalOpen && (\n        <ConfirmationModal\n          message=\"정말로 회원을 해지하시겠습니까?\"\n          onConfirm={confirmDelete}\n          onCancel={cancelDelete}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LateFeeList;\n",
            "LoanBody.js": "// ChasuPreBody 컴포넌트\nimport { useState, useEffect } from \"react\";\nimport { fetchLoanInit } from '@/utils/api';\nimport { BsBagDash } from \"react-icons/bs\";\nimport { BsDatabase } from \"react-icons/bs\";\nimport { SearchButton, ModifyButton } from \"@/components/Button\";\nimport styles from \"@/styles/Inputmoney.module.scss\";\nimport Link from \"next/link\";\n\nconst LoanBody = ({ userId }) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const fetchedData = await fetchLoanInit();\n      setData(fetchedData);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <div className={styles.ContentBody_L}>\n                  <div className={styles.ContentBodyTitle_L}>\n                  <div className={styles.CBTIcon}>\n                      <div className={styles.Icon}>\n                        <BsBagDash style={{ width: '100%', height: '100%' }} />\n                      </div>\n                    </div>\n                    <div className={styles.CBTText}>\n                      <div className={styles.CBTCha}>\n                        <div className={styles.CBTChaFont}>대출 / 자납</div>\n                      </div>\n                      <div className={styles.CBTDate}>\n                        <div className={styles.CBTDateFont}>대출일 : {loanData.loandate?new Date(loanData.loandate).toLocaleDateString('KR-GB'):\"대출정보 없음.\"} </div>\n                        <div className={styles.CBTDateFont}>자납일 : {loanData.loandate?new Date(loanData.selfdate).toLocaleDateString('KR-GB'):\"대출정보 없음.\"}</div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className={styles.CBBottonBody}>\n                  <Link href = \"/inputmoney/loan\">\n                    <ModifyButton>\n                      <div className={styles.CBBottonFont}>대출수정</div>\n                    </ModifyButton>\n                  </Link>\n                  </div>\n                  <div className={styles.CBSum}>\n                  <div className={styles.CBMoneyImg}>\n                      <div className={styles.Icon2}>\n                        <BsDatabase style={{ width: '100%', height: '100%' }} />\n                      </div>\n                    </div>\n                    <div className={styles.CBSumText}>대출액</div>\n                    <div className={styles.CBSumNum}>{((loanData.price1 !== undefined ? loanData.price1 : 0) + (loanData.price2 !== undefined ? loanData.price2 : 0)).toLocaleString()} ₩</div>\n                  </div>\n                  <div className={styles.CBSum}>\n                  <div className={styles.CBMoneyImg}>\n                      <div className={styles.Icon2}>\n                        <BsDatabase style={{ width: '100%', height: '100%' }} />\n                      </div>\n                    </div>\n                    <div className={styles.CBSumText}>자납액</div>\n                    <div className={styles.CBSumNum}>{(loanData.selfprice !== undefined ? loanData.selfprice : 0).toLocaleString()} ₩</div>\n                  </div>\n                  <div className={styles.CBSum}>\n                  <div className={styles.CBMoneyImg}>\n                      <div className={styles.Icon2}>\n                        <BsDatabase style={{ width: '100%', height: '100%' }} />\n                      </div>\n                    </div>\n                    <div className={styles.CBSumText}>총액</div>\n                    <div className={styles.CBSumNum}>{((loanData.selfprice !== undefined ? loanData.selfprice : 0) + (loanData.price1 !== undefined ? loanData.price1 : 0) + (loanData.price2 !== undefined ? loanData.price2 : 0)).toLocaleString()} ₩</div>\n                  </div>\n                </div>\n            \n  );\n};\n\nexport default LoanBody;\n",
            "Mininav.js": "\"use client\";\n\nimport { FaRegUser } from \"react-icons/fa6\";\nimport { FaUser } from \"react-icons/fa6\";\nimport { MdOutlineBusinessCenter } from \"react-icons/md\";\nimport { MdBusinessCenter } from \"react-icons/md\";\nimport { RiMoneyDollarCircleFill } from \"react-icons/ri\";\nimport { RiMoneyDollarCircleLine } from \"react-icons/ri\";\nimport { IoDocumentTextOutline } from \"react-icons/io5\";\nimport { IoDocumentText } from \"react-icons/io5\";\n\nimport Link from \"next/link\";\nimport React from 'react'\nimport { usePathname } from \"next/navigation\";\n\nimport styles from \"../styles/Mininav.module.scss\";\n\nconst iconstyle = { fontSize: \"1.2em\", paddingRight: \"2%\", paddingLeft: \"1%\" };\n\nconst Mininav = () => {\n    const pathname = usePathname();\n    const splitpath = pathname.split('/');\n  \n    return(\n        <ul className={styles.listconatiner}>\n            <Link href={\"/search/userinfo/\"+splitpath[3]}>\n                <li className={splitpath[2] === \"userinfo\" ? styles.select : styles.nonselect}> \n                        {splitpath[2] === \"userinfo\" ? (<FaUser style={iconstyle} />) : (<FaRegUser style={iconstyle} />)}\n                        <span>고객 정보</span>\n                </li>\n            </Link>\n            <Link href={\"/search/payinfo/\"+splitpath[3]}>\n                <li className={splitpath[2] === \"payinfo\" ? styles.select : styles.nonselect}> \n                        {splitpath[2] === \"payinfo\" ? (<MdBusinessCenter style={iconstyle} />) : (<MdOutlineBusinessCenter style={iconstyle} />)}\n                        <span>납입금</span>\n                </li>\n            </Link>\n            <Link href={\"/search/leaninfo/\"+splitpath[3]}>\n                <li className={splitpath[2] === \"leaninfo\" ? styles.select : styles.nonselect}> \n                        {splitpath[2] === \"leaninfo\" ? (<RiMoneyDollarCircleFill style={iconstyle} />) : (<RiMoneyDollarCircleLine style={iconstyle} />)}\n                        <span>대출/자납</span>\n                </li>\n            </Link>\n            <Link href={\"/search/extinfo/\"+splitpath[3]}>\n                <li className={splitpath[2] === \"extinfo\" ? styles.select : styles.nonselect}> \n                        {splitpath[2] === \"extinfo\" ? (<IoDocumentText style={iconstyle} />) : (<IoDocumentTextOutline style={iconstyle} />)}\n                        <span>비고</span>\n                </li>\n            </Link>\n        </ul>\n    );\n}\n\n\n\nexport default Mininav;",
            "Nav.js": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { usePathname } from \"next/navigation\";\nimport {\n  AiFillAppstore,\n  AiOutlineAppstore,\n  AiOutlineDollar,\n  AiFillDollarCircle,\n} from \"react-icons/ai\";\nimport { HiOutlineUsers, HiUsers } from \"react-icons/hi2\";\nimport { HiUserAdd } from \"react-icons/hi\";\nimport { GrMoney } from \"react-icons/gr\";\nimport { MdOutlineAccountBalance, MdAccountBalance, MdManageAccounts,MdOutlineManageAccounts  } from \"react-icons/md\"; //<MdOutlineAccountBalance />  <MdAccountBalance />\nimport { RiMoneyDollarCircleFill, RiMoneyDollarCircleLine } from \"react-icons/ri\"; //<RiMoneyDollarCircleFill />  <RiMoneyDollarCircleLine />\nimport { IoCloudUploadOutline,IoCloudUpload  } from \"react-icons/io5\";\n\nimport LOGO from \"@/img/logo.png\";\nimport styles from \"../styles/Nav.module.scss\";\n\nconst iconstyle = { fontSize: \"1.5em\", paddingRight: \"10%\", paddingLeft: \"7%\" };\n\nconst Nav = () => {\n  const pathname = usePathname();\n  const splitpath = pathname.split(\"/\");\n  const [menuOpen, setMenuOpen] = useState(false);\n  // 현재 경로가 \"search\" 또는 \"inputmoney\"이면 active로 처리\nconst isSearchActive = splitpath[1] === \"search\" || splitpath[1] === \"inputmoney\";\n\n\n  return (\n    <div className={styles.container}>\n      <Link href=\"/dashboard\">\n        <Image src={LOGO} className={styles.logostyle} alt={\"logo\"} />\n      </Link>\n      <div className={styles.listContainer}>\n        {/* Dashboard Link */}\n        <Link href=\"/dashboard\">\n          <div\n            className={\n              splitpath[1] === \"dashboard\" ? styles.select : styles.nonselect\n            }\n          >\n            <div className={styles.innerContainer}>\n              {splitpath[1] === \"dashboard\" ? (\n                <AiFillAppstore style={iconstyle} />\n              ) : (\n                <AiOutlineAppstore style={iconstyle} />\n              )}\n              <span className={styles.innertext}>대시보드</span>\n            </div>\n          </div>\n        </Link>\n\n        {/* 회원 정보 검색 Link (Simplified) */}\n        <Link href=\"/search\">\n  <div className={isSearchActive ? styles.select : styles.nonselect}>\n    <div className={styles.innerContainer}>\n      {isSearchActive ? (\n        <HiUsers style={iconstyle} />\n      ) : (\n        <HiOutlineUsers style={iconstyle} />\n      )}\n      <span className={styles.innertext}>회원 정보 검색</span>\n    </div>\n  </div>\n</Link>\n\n        {/* 회원 정보 입력 Link */}\n        <Link href=\"/create\">\n          <div\n            className={\n              splitpath[1] === \"create\" ? styles.select : styles.nonselect\n            }\n          >\n            <div className={styles.innerContainer}>\n              {splitpath[1] === \"create\" ? (\n                <HiUserAdd  style={iconstyle} />\n              ) : (\n                <HiUserAdd  style={iconstyle} />\n              )}\n              <span className={styles.innertext}>회원 정보 입력</span>\n            </div>\n          </div>\n        </Link>\n        <Link href=\"/deposit\">\n          <div\n            className={\n              splitpath[1] === \"deposit\" ? styles.select : styles.nonselect\n            }\n          >\n            <div className={styles.innerContainer}>\n              {splitpath[1] === \"deposit\" ? (\n                <RiMoneyDollarCircleFill style={iconstyle} />\n              ) : (\n                <RiMoneyDollarCircleLine style={iconstyle} />\n              )}\n              <span className={styles.innertext}>전체 입출금 내역</span>\n            </div>\n          </div>\n        </Link>\n\n        <Link href=\"/companydeposit\">\n          <div\n            className={\n              splitpath[1] === \"companydeposit\" ? styles.select : styles.nonselect\n            }\n          >\n            <div className={styles.innerContainer}>\n              {splitpath[1] === \"companydeposit\" ? (\n                <MdAccountBalance style={iconstyle} />\n              ) : (\n                <MdOutlineAccountBalance style={iconstyle} />\n              )}\n              <span className={styles.innertext}>기업 입출금 추가</span>\n            </div>\n          </div>\n        </Link>\n        {/* 연체료 메뉴 Link */}\n        <Link href=\"/latefees\">\n          <div\n            className={\n              splitpath[1] === \"latefees\" ? styles.select : styles.nonselect\n            }\n          >\n            <div className={styles.innerContainer}>\n              {splitpath[1] === \"latefees\" ? (\n                <GrMoney style={iconstyle} />\n              ) : (\n                <GrMoney style={iconstyle} />\n              )}\n              <span className={styles.innertext}>연체료 (임시)</span>\n            </div>\n          </div>\n        </Link>\n        {/* 연체료 메뉴 Link */}\n        <Link href=\"/filecontrol\">\n          <div\n            className={\n              splitpath[1] === \"filecontrol\" ? styles.select : styles.nonselect\n            }\n          >\n            <div className={styles.innerContainer}>\n              {splitpath[1] === \"filecontrol\" ? (\n                <IoCloudUpload style={iconstyle} />\n              ) : (\n                <IoCloudUploadOutline style={iconstyle} />\n              )}\n              <span className={styles.innertext}>엑셀파일</span>\n            </div>\n          </div>\n        </Link>\n        {/* 차수 관리 Link */}\n        <Link href=\"/control\">\n          <div\n            className={\n              splitpath[1] === \"control\" ? styles.select : styles.nonselect\n            }\n          >\n            <div className={styles.innerContainer}>\n              {splitpath[1] === \"control\" ? (\n                <MdManageAccounts   style={iconstyle} />\n              ) : (\n                <MdOutlineManageAccounts  style={iconstyle} />\n              )}\n              <span className={styles.innertext}>차수 관리</span>\n            </div>\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Nav;\n",
            "SearchForm.js": "// components/SearchForm.js\n\"use client\";\n\nimport { Inputbox } from \"@/components/Inputbox\";\nimport styles from \"@/styles/Latefees.module.scss\";\n\nconst SearchForm = ({ name, setName, number, setNumber }) => {\n  const onNameChange = (e) => {\n    const text = e.target.value;\n    setName(text.replace(/ /g, \"\"));\n  };\n\n  const onNumberChange = (e) => {\n    const text = e.target.value;\n    setNumber(text.replace(/ /g, \"\"));\n  };\n\n  return (\n    <div className={styles.flexContainer}>\n      <Inputbox\n        type=\"text\"\n        placeholder=\"관리번호\"\n        value={number}\n        onChange={onNumberChange}\n      />\n      <Inputbox\n        type=\"text\"\n        placeholder=\"회원 성함\"\n        value={name}\n        onChange={onNameChange}\n      />\n      {/* 필요하다면 다른 필터 드롭다운 등을 추가 */}\n    </div>\n  );\n};\n\nexport default SearchForm;\n",
            "SearchList.js": "// src/components/SearchList.js\n\n\"use client\";\n\nimport Link from \"next/link\";\nimport { useEffect, useState } from \"react\";\nimport { useRecoilValueLoadable, useSetRecoilState } from \"recoil\";\nimport { ModifyButton } from \"@/components/Button\";\nimport styles from \"@/styles/Search.module.scss\";\nimport { searchnameState, searchnumberState } from \"@/utils/atom\";\nimport { namesearchSelector } from \"@/utils/selector\";\nimport { deleteCustomer } from \"@/utils/api\";\nimport categoryMapping from \"@/utils/categoryMapping\";\nimport ConfirmationModal from \"@/components/ConfirmationModal\";\nimport Swal from \"sweetalert2\";\n\n// react-icons에서 아이콘 임포트\nimport { AiOutlineArrowUp, AiOutlineArrowDown } from \"react-icons/ai\";\n\n// droplistdata에서 리스트들을 임포트\nimport {\n  typelist,\n  grouplist,\n  turnlist,\n  typeidlist,\n  classificationlist,\n} from \"@/components/droplistdata\";\n\nconst SearchList = ({ name, number, categoryFilter, linkBase }) => {\n  const setNameState = useSetRecoilState(searchnameState);\n  const setNumberState = useSetRecoilState(searchnumberState);\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: \"ascending\",\n  });\n\n  // 필터링 상태를 관리하는 state\n  const [filters, setFilters] = useState({\n    type: [],\n    groupname: [],\n    turn: [],\n    batch: [],\n    customertype: [],\n  });\n\n  // 드롭다운 메뉴의 열림 상태를 관리하는 state\n  const [dropdownOpen, setDropdownOpen] = useState({\n    type: false,\n    groupname: false,\n    turn: false,\n    batch: false,\n    customertype: false,\n  });\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedCustomerId, setSelectedCustomerId] = useState(null);\n\n  let searchname = name.length > 1 ? name : \"\";\n  let searchnumber = number.length > 1 ? number : \"\";\n\n  useEffect(() => {\n    setNameState(searchname);\n    setNumberState(searchnumber);\n  }, [searchname, searchnumber, setNameState, setNumberState]);\n\n  const searchdata = useRecoilValueLoadable(namesearchSelector);\n\n  // 조건부 렌더링을 위한 변수 (모든 훅은 항상 호출)\n  const isLoading = searchdata.state === \"loading\";\n  const isError = searchdata.state === \"hasError\";\n\n  // droplistdata의 리스트들을 사용하여 uniqueValues 생성\n  const uniqueValues = {\n    type: typelist,\n    groupname: grouplist,\n    turn: turnlist,\n    batch: typeidlist,\n    customertype: classificationlist,\n  };\n\n  const toggleDropdown = (key) => {\n    setDropdownOpen((prev) => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  const handleFilterChange = (key, value) => {\n    setFilters((prevFilters) => {\n      const values = prevFilters[key];\n      if (values.includes(value)) {\n        // 이미 선택된 값이면 제거\n        const newValues = values.filter((v) => v !== value);\n        return {\n          ...prevFilters,\n          [key]: newValues,\n        };\n      } else {\n        // 선택되지 않은 값이면 추가\n        const newValues = [...values, value];\n        return {\n          ...prevFilters,\n          [key]: newValues,\n        };\n      }\n    });\n  };\n\n  const handleFilterAllChange = (key) => {\n    setFilters((prevFilters) => {\n      if (prevFilters[key].length === uniqueValues[key].length) {\n        // 모든 옵션이 선택된 상태면 모두 해제\n        return {\n          ...prevFilters,\n          [key]: [],\n        };\n      } else {\n        // 하나라도 선택되지 않은 옵션이 있으면 모두 선택\n        return {\n          ...prevFilters,\n          [key]: uniqueValues[key].map((option) => option.value),\n        };\n      }\n    });\n  };\n\n  const handleSort = (key) => {\n    let direction = \"ascending\";\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n  };\n\n  // 아이콘을 반환하는 함수\n  const getSortIcon = (key) => {\n    if (sortConfig.key === key) {\n      return sortConfig.direction === \"ascending\" ? (\n        <AiOutlineArrowUp size={12} color=\"#7152F3\" />\n      ) : (\n        <AiOutlineArrowDown size={12} color=\"#7152F3\" />\n      );\n    }\n    return <AiOutlineArrowDown size={12} />;\n  };\n\n  const handleReset = () => {\n    setFilters({\n      type: [],\n      groupname: [],\n      turn: [],\n      batch: [],\n      customertype: [],\n    });\n    setSortConfig({\n      key: null,\n      direction: \"ascending\",\n    });\n  };\n\n  const filteredData = () => {\n    let data = isLoading || isError ? [] : [...searchdata.contents];\n\n    // 필터 적용\n    Object.keys(filters).forEach((key) => {\n      if (filters[key].length > 0) {\n        if (key === \"customertype\") {\n          // 선택된 코드들을 해당하는 분류명으로 변환\n          const selectedCategories = filters.customertype.map(\n            (code) => categoryMapping[code]\n          );\n          data = data.filter((item) =>\n            selectedCategories.includes(categoryMapping[item.customertype])\n          );\n        } else {\n          data = data.filter((item) => {\n            const itemValue = item[key];\n            return filters[key].includes(itemValue);\n          });\n        }\n      }\n    });\n\n    // 정렬 적용\n    if (sortConfig.key !== null) {\n      data.sort((a, b) => {\n        let aValue = a[sortConfig.key];\n        let bValue = b[sortConfig.key];\n\n        if (sortConfig.key === \"id\") {\n          aValue = parseInt(aValue, 10);\n          bValue = parseInt(bValue, 10);\n        }\n\n        if (aValue < bValue) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (aValue > bValue) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n\n    return data;\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      await deleteCustomer(id);\n      Swal.fire({\n        icon: \"success\",\n        title: \"회원 삭제\",\n        text: \"회원이 성공적으로 삭제되었습니다.\",\n        confirmButtonText: \"확인\",\n      }).then(() => {\n        window.location.reload();\n      });\n    } catch (error) {\n      console.error(\"Error deleting customer:\", error);\n      Swal.fire({\n        icon: \"error\",\n        title: \"삭제 실패\",\n        text: \"사용자 삭제 중 오류가 발생했습니다.\",\n        confirmButtonText: \"확인\",\n      });\n    }\n  };\n\n  const openConfirmation = (id) => {\n    setSelectedCustomerId(id);\n    setIsModalOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (selectedCustomerId !== null) {\n      handleDelete(selectedCustomerId);\n      setSelectedCustomerId(null);\n      setIsModalOpen(false);\n    }\n  };\n\n  const cancelDelete = () => {\n    setSelectedCustomerId(null);\n    setIsModalOpen(false);\n  };\n\n  // customertype 필터가 변경될 때마다 해당 필터의 분류명과 필터에 해당하는 회원들을 콘솔에 출력\n  useEffect(() => {\n    if (!isLoading && !isError && searchdata.state === \"hasValue\") {\n      if (filters.customertype.length > 0) {\n        const selectedCategories = filters.customertype.map(\n          (code) => categoryMapping[code]\n        );\n        const filteredMembers = searchdata.contents.filter((customer) =>\n          selectedCategories.includes(categoryMapping[customer.customertype])\n        );\n      }\n    }\n  }, [filters.customertype, searchdata, isLoading, isError]);\n\n  return (\n    <div>\n      {isLoading && <div>Loading...</div>}\n      {isError && <div>데이터를 불러오는 중 오류가 발생했습니다.</div>}\n      {!isLoading && !isError && (\n        <>\n          <div className={styles.tablecontainer}>\n            {/* 테이블 헤더 */}\n            {/* 관리번호 */}\n            <div className={styles.unitContainer}>\n              <span>\n                관리번호\n                <span\n                  className={styles.sortIcon}\n                  onClick={() => handleSort(\"id\")}\n                >\n                  {getSortIcon(\"id\")}\n                </span>\n              </span>\n            </div>\n            {/* 성명 */}\n            <div className={styles.unitContainer}>\n              <span>\n                성명\n                <span\n                  className={styles.sortIcon}\n                  onClick={() => handleSort(\"customerData.name\")}\n                >\n                  {getSortIcon(\"customerData.name\")}\n                </span>\n              </span>\n            </div>\n            {/* 타입 */}\n            <div className={styles.unitContainer}>\n              <span>\n                <span onClick={() => toggleDropdown(\"type\")}>타입</span>\n                <span\n                  className={styles.sortIcon}\n                  onClick={() => handleSort(\"type\")}\n                >\n                  {getSortIcon(\"type\")}\n                </span>\n              </span>\n              {/* 드롭다운 메뉴 */}\n              {dropdownOpen.type && (\n                <div\n                  className={styles.dropdown}\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div>\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={\n                          filters.type.length === uniqueValues.type.length\n                        }\n                        onChange={() => handleFilterAllChange(\"type\")}\n                      />\n                      전체\n                    </label>\n                  </div>\n                  {uniqueValues.type.map((option) => (\n                    <div key={option.value}>\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={filters.type.includes(option.value)}\n                          onChange={() =>\n                            handleFilterChange(\"type\", option.value)\n                          }\n                        />\n                        {option.item}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            {/* 군 */}\n            <div className={styles.unitContainer}>\n              <span>\n                <span onClick={() => toggleDropdown(\"groupname\")}>군</span>\n                <span\n                  className={styles.sortIcon}\n                  onClick={() => handleSort(\"groupname\")}\n                >\n                  {getSortIcon(\"groupname\")}\n                </span>\n              </span>\n              {dropdownOpen.groupname && (\n                <div\n                  className={styles.dropdown}\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div>\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={\n                          filters.groupname.length ===\n                          uniqueValues.groupname.length\n                        }\n                        onChange={() => handleFilterAllChange(\"groupname\")}\n                      />\n                      전체\n                    </label>\n                  </div>\n                  {uniqueValues.groupname.map((option) => (\n                    <div key={option.value}>\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={filters.groupname.includes(option.value)}\n                          onChange={() =>\n                            handleFilterChange(\"groupname\", option.value)\n                          }\n                        />\n                        {option.item}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            {/* 순번 */}\n            <div className={styles.unitContainer}>\n              <span>\n                <span onClick={() => toggleDropdown(\"turn\")}>순번</span>\n                <span\n                  className={styles.sortIcon}\n                  onClick={() => handleSort(\"turn\")}\n                >\n                  {getSortIcon(\"turn\")}\n                </span>\n              </span>\n              {dropdownOpen.turn && (\n                <div\n                  className={styles.dropdown}\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div>\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={\n                          filters.turn.length === uniqueValues.turn.length\n                        }\n                        onChange={() => handleFilterAllChange(\"turn\")}\n                      />\n                      전체\n                    </label>\n                  </div>\n                  {uniqueValues.turn.map((option) => (\n                    <div key={option.value}>\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={filters.turn.includes(option.value)}\n                          onChange={() =>\n                            handleFilterChange(\"turn\", option.value)\n                          }\n                        />\n                        {option.item}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            {/* 가입 차순 */}\n            <div className={styles.unitContainer}>\n              <span>\n                <span onClick={() => toggleDropdown(\"batch\")}>가입 차순</span>\n                <span\n                  className={styles.sortIcon}\n                  onClick={() => handleSort(\"batch\")}\n                >\n                  {getSortIcon(\"batch\")}\n                </span>\n              </span>\n              {dropdownOpen.batch && (\n                <div\n                  className={styles.dropdown}\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div>\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={\n                          filters.batch.length === uniqueValues.batch.length\n                        }\n                        onChange={() => handleFilterAllChange(\"batch\")}\n                      />\n                      전체\n                    </label>\n                  </div>\n                  {uniqueValues.batch.map((option) => (\n                    <div key={option.value}>\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={filters.batch.includes(option.value)}\n                          onChange={() =>\n                            handleFilterChange(\"batch\", option.value)\n                          }\n                        />\n                        {option.item}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            {/* 가입 날짜 */}\n            <div className={styles.unitContainer}>\n              <span>\n                가입 날짜\n                <span\n                  className={styles.sortIcon}\n                  onClick={() => handleSort(\"registerdate\")}\n                >\n                  {getSortIcon(\"registerdate\")}\n                </span>\n              </span>\n            </div>\n            {/* 분류 */}\n            <div className={styles.unitContainer}>\n              <div className={styles.headerWithReset}>\n                <span onClick={() => toggleDropdown(\"customertype\")}>분류</span>\n                <span\n                  className={styles.sortIcon}\n                  onClick={() => handleSort(\"customertype\")}\n                >\n                  {getSortIcon(\"customertype\")}\n                </span>\n              </div>\n              {dropdownOpen.customertype && (\n                <div\n                  className={styles.dropdown}\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div>\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={\n                          filters.customertype.length ===\n                          uniqueValues.customertype.length\n                        }\n                        onChange={() => handleFilterAllChange(\"customertype\")}\n                      />\n                      전체\n                    </label>\n                  </div>\n                  {uniqueValues.customertype.map((option) => (\n                    <div key={option.value}>\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={filters.customertype.includes(option.value)}\n                          onChange={() =>\n                            handleFilterChange(\"customertype\", option.value)\n                          }\n                        />\n                        {option.item}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {filteredData().map((customer) => {\n            return (\n              <div className={styles.maincontainer} key={customer.id}>\n                <Link\n                  href={`${linkBase}${customer.id}`}\n                  className={styles.link}\n                >\n                  <div className={styles.rowContainer}>\n                    <div className={styles.unitContainer}>{customer.id}</div>\n                    <div className={styles.unitContainer}>\n                      {customer.customerData?.name || \"N/A\"}\n                    </div>\n                    <div className={styles.unitContainer}>\n                      {customer.type || \"N/A\"}\n                    </div>\n                    <div className={styles.unitContainer}>\n                      {customer.groupname || \"N/A\"}\n                    </div>\n                    <div className={styles.unitContainer}>\n                      {customer.turn || \"N/A\"}\n                    </div>\n                    <div className={styles.unitContainer}>\n                      {customer.batch || \"N/A\"}\n                    </div>\n                    <div className={styles.unitContainer}>\n                      {customer.registerdate\n                        ? customer.registerdate.slice(0, 10)\n                        : \"N/A\"}\n                    </div>\n                    <div className={styles.unitContainer}>\n                      {categoryMapping[customer.customertype] || \"N/A\"}\n                    </div>\n                  </div>\n                </Link>\n                <div className={styles.actionButtonsContainer}>\n                  {/* 수정 (Modify) Button */}\n                  <ModifyButton className={styles.editButton}>\n                    <Link href={`/modify/${customer.id}`}>\n                      <div className={styles.CBBottonFont}>수정</div>\n                    </Link>\n                  </ModifyButton>\n\n                  {/* 삭제 (Delete) Button */}\n                  <ModifyButton onClick={() => openConfirmation(customer.id)}>\n                    <div className={styles.CBBottonFont}>삭제</div>\n                  </ModifyButton>\n                </div>\n              </div>\n            );\n          })}\n          {isModalOpen && (\n            <ConfirmationModal\n              message=\"삭제하시겠습니까?\"\n              onConfirm={confirmDelete}\n              onCancel={cancelDelete}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default SearchList;\n",
            "TableHeader.js": "// components/TableHeader.js\n\"use client\";\n\nimport styles from \"@/styles/Search.module.scss\";\n\nconst TableHeader = ({ headers, onSort }) => {\n  return (\n    <div className={styles.tablecontainer}>\n      {headers.map((header) => (\n        <div className={styles.unitContainer} key={header.key}>\n          <span onClick={() => onSort(header.key)}>{header.label}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TableHeader;\n",
            "Test.js": "import React from 'react'\nimport styles from \"../styles/Test.module.scss\";\n\nconst Test = () => {\n    return(\n        <>\n            <h1 className={styles.titlecolor}>test page</h1>\n        </>\n    )\n}\n\nexport default Test;",
            "Testpage.js": "import React from 'react'\n\nconst Testpage = () => {\n    return(\n        <>\n            <h1>etstse</h1>\n        </>\n    )\n}\n\n\nexport default Testpage;"
        },
        "Dashboard": {
            "__files__": {
                "ClientList.js": "// ClientList.js\nimport React from \"react\";\nimport styles from '../../styles/Dashboard.module.scss'\n\nconst ClientList = ({ clients }) => {\n  return (\n    <div className={styles.ClientBody}>\n      <div className={styles.ClientContents}>\n        <div className={styles.ClientTitle}>\n          <div className={styles.ClientTitle1}>\n            <div className={styles.Titlefont}>미납자 명단</div>\n          </div>\n        </div>\n        <div className={styles.ClientCategory}>\n          <div className={styles.Number}>\n            <div className={styles.Categoryfont}>관리번호</div>\n          </div>\n          <div className={styles.Name}>\n            <div className={styles.Categoryfont}>성명</div>\n          </div>\n          <div className={styles.Cha}>\n            <div className={styles.Categoryfont}>최종납부</div>\n          </div>\n          <div className={styles.Dong}>\n            <div className={styles.Categoryfont}>임시동호</div>\n          </div>\n        </div>\n        {clients.map((client, index) => (\n          <div key={index} className={styles.ClientValue}>\n            <div className={styles.Number}>\n              <div className={styles.Valuefont}>{client.id}</div>\n            </div>\n            <div className={styles.Name}>\n              <div className={styles.Valuefont}>{client.name}</div>\n            </div>\n            <div className={styles.Cha}>\n              <div className={styles.Valuefont}>{client.lastPayment}</div>\n            </div>\n            <div className={styles.Dong}>\n              <div className={styles.Valuefont}>{client.tempDong}</div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ClientList;",
                "ContrachAmmount.js": "// ContractAmount.js\nimport React from \"react\";\n\nimport styles from '../../styles/Dashboard.module.scss'\n\nconst ContractAmount = ({ icon, color, name, amount, updatedDate }) => {\n  return (\n    <div className={styles.ContractSum}>\n      <div className={styles.ContractValue}>\n        <div className={styles.ContractIcons}>\n          <div className={styles.ContractImg} style={{ color }}>\n            {icon}\n          </div>\n        </div>\n        <div className={styles.ContractName}>{name}</div>\n      </div>\n      <div className={styles.ContractValue2}>\n        <div className={styles.ContractVal}>\n          <div className={styles.Value}>{amount}</div>\n        </div>\n      </div>\n      <div className={styles.Bottominfo}>\n        <div className={styles.BottomDate}>업데이트 : {updatedDate}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContractAmount;\n",
                "ContractSummary.js": "// ContractSummary.js\nimport React, { useEffect, useState } from \"react\";\nimport { AiFillCaretUp } from \"react-icons/ai\";\nimport { fetchContractedCustomers, fetchFullyPaidCustomers } from \"@/utils/api\";\nimport styles from '../../styles/Dashboard.module.scss'\n\nconst ContractSummary = ({ icon, color, name, value, percentage, updatedDate }) => {\n  return (\n    <div className={styles.ContractSum}>\n      <div className={styles.ContractValue}>\n        <div className={styles.ContractIcons}>\n          <div className={styles.ContractImg} style={{ color }}>\n            {icon}\n          </div>\n        </div>\n        <div className={styles.ContractName}>{name}</div>\n      </div>\n      <div className={styles.ContractValue2}>\n        <div className={styles.ContractVal1}>\n          <div className={styles.Value}>{value}</div>\n        </div>\n        {percentage && (\n          <div className={styles.ContractVal2}>\n            <div className={styles.Percentage_G}>\n              <div className={styles.UpImg} style={{ color: \"#30BE82\" }}>\n                <AiFillCaretUp style={{ width: \"100%\", height: \"100%\" }} />\n              </div>\n              <div className={styles.UpText}>{percentage}%</div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className={styles.Bottominfo}>\n        <div className={styles.BottomDate}>업데이트 : {updatedDate}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContractSummary;",
                "InstallmentAmounts.js": "\"use client\";\nimport React from \"react\";\nimport styles from \"./InstallmentAmounts.module.scss\";\n\nconst InstallmentAmounts = ({ phaseSummaries, loading }) => {\n  if (loading) {\n    return <div>loading...</div>;\n  }\n\n  // 각 차수별 데이터 변환\n  const data = phaseSummaries.map((item) => ({\n    installment: `${item.phaseNumber}차`,\n    paid: `${(item.totalDeposited || 0).toLocaleString()} ₩`,\n    unpaid: `${(item.totalUnpaid || 0).toLocaleString()} ₩`,\n  }));\n\n  // 전체 합계 계산\n  const totalPaid = phaseSummaries.reduce(\n    (acc, cur) => acc + (cur.totalDeposited || 0),\n    0\n  );\n  const totalUnpaid = phaseSummaries.reduce(\n    (acc, cur) => acc + (cur.totalUnpaid || 0),\n    0\n  );\n\n  return (\n    <div className={styles.installmentContainer}>\n      <div className={styles.header}>\n        <div>차수</div>\n        <div>납입 금액</div>\n        <div>미납 금액</div>\n      </div>\n      {data.map((item, index) => (\n        <React.Fragment key={index}>\n          <div className={styles.row}>\n            <div className={styles.installment}>{item.installment}</div>\n            <div className={styles.paid}>{item.paid}</div>\n            <div className={styles.unpaid}>{item.unpaid}</div>\n          </div>\n          {/* 각 항목 사이에 구분선 추가 */}\n          {index !== data.length - 1 && (\n            <hr className={styles.NoticeDivider} />\n          )}\n        </React.Fragment>\n      ))}\n      {/* 총합 표시 */}\n      <hr className={styles.NoticeDivider} />\n      <div className={styles.row}>\n        <div className={styles.installment}>\n          <strong>총합</strong>\n        </div>\n        <div className={styles.paid}>\n          <strong>{totalPaid.toLocaleString()} ₩</strong>\n        </div>\n        <div className={styles.unpaid}>\n          <strong>{totalUnpaid.toLocaleString()} ₩</strong>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InstallmentAmounts;\n",
                "InstallmentAmounts.module.scss": null
            }
        },
        "Deposit": {
            "__files__": {
                "DepositForm.js": "\"use client\";\n\nimport { Inputbox } from \"@/components/Inputbox\";\nimport styles from \"@/styles/Deposit.module.scss\";\nimport { FaPrint } from \"react-icons/fa6\"; // 아이콘 추가\nimport { useCallback } from \"react\";\n\n\nconst DepositForm = ({\n  contractor,\n  setContractor,\n  memberNumber,\n  setMemberNumber,\n\n}) => {\n  const onContractorChange = (e) => {\n    const text = e.target.value;\n    setContractor(text.trim());\n  };\n\n  const onMemberNumberChange = (e) => {\n    const text = e.target.value;\n    setMemberNumber(text.trim());\n  };\n\n  return (\n    <>\n    <p></p>\n    <div className={styles.flexContainer}>\n      <p></p>\n      {/* 회원번호 검색 Inputbox */}\n      <Inputbox\n        type=\"text\"\n        placeholder=\"관리번호\"\n        value={memberNumber}\n        onChange={onMemberNumberChange}\n      />\n      {/* 회원성함 검색 Inputbox */}\n      <Inputbox\n        type=\"text\"\n        placeholder=\"회원 성함\"\n        value={contractor}\n        onChange={onContractorChange}\n      />\n      {/* 엑셀 출력 버튼 */}\n      \n      \n    </div>\n    </>\n  );\n};\n\nexport default DepositForm;\n",
                "DepositList.js": "\"use client\";\n\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport depositStyles from \"@/styles/Deposit.module.scss\";\nimport { fetchDepositList } from \"@/utils/api\";\nimport Swal from \"sweetalert2\";\nimport Link from \"next/link\";\nimport { AiOutlineArrowUp, AiOutlineArrowDown } from \"react-icons/ai\";\n\nconst DepositList = ({\n  contractor,\n  memberNumber,\n  setDepositData,\n  sortConfig,\n  setSortConfig,\n}) => {\n  const [rawData, setRawData] = useState([]);\n\n  // 데이터 페칭\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const data = await fetchDepositList();\n        setRawData(data);\n      } catch (error) {\n        console.error(\"입금 내역을 불러오는 데 실패했습니다.\", error);\n      }\n    };\n    getData();\n  }, []);\n\n  // 필터링 (contractor와 memberNumber → 여기서는 id 필터로 사용)\n  const filteredData = useMemo(() => {\n    return rawData.filter((item) => {\n      const matchContractor = contractor\n        ? item.contractor && item.contractor.includes(contractor)\n        : true;\n      const matchMemberNumber = memberNumber\n        ? item.id && String(item.id).includes(String(memberNumber))\n        : true;\n      return matchContractor && matchMemberNumber;\n    });\n  }, [rawData, contractor, memberNumber]);\n\n  // 정렬\n  const sortedData = useMemo(() => {\n    const dataCopy = [...filteredData];\n    if (sortConfig.key) {\n      dataCopy.sort((a, b) => {\n        let aValue, bValue;\n        if (sortConfig.key === \"computedDate\") {\n          // 'computedDate'는 대출/자납 날짜 비교 로직\n          aValue = a.loanRecord\n            ? a.loanDetails?.loandate\n              ? new Date(a.loanDetails.loandate)\n              : new Date(0)\n            : a.selfRecord &&\n              !isNaN(Number(a.selfRecord)) &&\n              a.loanDetails?.selfdate\n            ? new Date(a.loanDetails.selfdate)\n            : new Date(0);\n          bValue = b.loanRecord\n            ? b.loanDetails?.loandate\n              ? new Date(b.loanDetails.loandate)\n              : new Date(0)\n            : b.selfRecord &&\n              !isNaN(Number(b.selfRecord)) &&\n              b.loanDetails?.selfdate\n            ? new Date(b.loanDetails.selfdate)\n            : new Date(0);\n        } else {\n          aValue = a[sortConfig.key];\n          bValue = b[sortConfig.key];\n\n          if (aValue === null || aValue === undefined) return 1;\n          if (bValue === null || bValue === undefined) return -1;\n\n          if (sortConfig.key === \"transactionDateTime\") {\n            aValue = new Date(aValue);\n            bValue = new Date(bValue);\n          }\n\n          if (typeof aValue === \"string\") {\n            aValue = aValue.toLowerCase();\n            bValue = bValue.toLowerCase();\n          }\n        }\n\n        if (aValue < bValue) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (aValue > bValue) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return dataCopy;\n  }, [filteredData, sortConfig]);\n\n  // 상위 컴포넌트 상태 업데이트\n  useEffect(() => {\n    setDepositData(sortedData);\n  }, [sortedData, setDepositData]);\n\n  // 정렬 아이콘 반환 함수\n  const getSortIcon = (key) => {\n    if (sortConfig.key === key) {\n      return sortConfig.direction === \"ascending\" ? (\n        <AiOutlineArrowUp size={10} color=\"#7152F3\" />\n      ) : (\n        <AiOutlineArrowDown size={10} color=\"#7152F3\" />\n      );\n    }\n    return <AiOutlineArrowDown size={10} />;\n  };\n\n  // 정렬 핸들러\n  const handleSort = (key) => {\n    let direction = \"ascending\";\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return (\n    <div className={depositStyles.depositListWrapper}>\n      {/* 전체 테이블 */}\n      <div className={depositStyles.depositListTable}>\n        {/* ===== 테이블 헤더 ===== */}\n        <div className={depositStyles.depositListHeader}>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"id\")}\n          >\n            <span>\n              ID\n              <span className={depositStyles.sortIcon}>{getSortIcon(\"id\")}</span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"transactionDateTime\")}\n          >\n            <span>\n              거래일시\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"transactionDateTime\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"description\")}\n          >\n            <span>\n              적요\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"description\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"details\")}\n          >\n            <span>\n              기재내용\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"details\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"contractor\")}\n          >\n            <span>\n              계약자\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"contractor\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"withdrawnAmount\")}\n          >\n            <span>\n              찾으신금액\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"withdrawnAmount\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"depositAmount\")}\n          >\n            <span>\n              맡기신금액\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"depositAmount\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"balanceAfter\")}\n          >\n            <span>\n              거래 후 잔액\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"balanceAfter\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"branch\")}\n          >\n            <span>\n              취급점\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"branch\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"account\")}\n          >\n            <span>\n              계좌\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"account\")}\n              </span>\n            </span>\n          </div>\n          {/* 1차 ~ 10차 */}\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"depositPhase1\")}\n          >\n            <span>\n              1차\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"depositPhase1\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"depositPhase2\")}\n          >\n            <span>\n              2차\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"depositPhase2\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"depositPhase3\")}\n          >\n            <span>\n              3차\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"depositPhase3\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"depositPhase4\")}\n          >\n            <span>\n              4차\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"depositPhase4\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"depositPhase5\")}\n          >\n            <span>\n              5차\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"depositPhase5\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"depositPhase6\")}\n          >\n            <span>\n              6차\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"depositPhase6\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"depositPhase7\")}\n          >\n            <span>\n              7차\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"depositPhase7\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"depositPhase8\")}\n          >\n            <span>\n              8차\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"depositPhase8\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"depositPhase9\")}\n          >\n            <span>\n              9차\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"depositPhase9\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"depositPhase10\")}\n          >\n            <span>\n              10차\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"depositPhase10\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"loanRecord\")}\n          >\n            <span>\n              대출\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"loanRecord\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"selfRecord\")}\n          >\n            <span>\n              자납\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"selfRecord\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"computedDate\")}\n          >\n            <span>\n              일자\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"computedDate\")}\n              </span>\n            </span>\n          </div>\n          <div\n            className={depositStyles.depositListHeaderCell}\n            onClick={() => handleSort(\"remarks\")}\n          >\n            <span>\n              비고\n              <span className={depositStyles.sortIcon}>\n                {getSortIcon(\"remarks\")}\n              </span>\n            </span>\n          </div>\n        </div>\n\n        {/* ===== 테이블 바디 ===== */}\n        <div className={depositStyles.depositListBody}>\n          {sortedData.map((item, idx) => {\n            // computedDate 계산\n            let computedDate = \"\";\n            if (item.loanRecord) {\n              computedDate = item?.loanDate\n                ? new Date(item.loanDate).toLocaleDateString()\n                : \"N/A\";\n            } else if (item.selfRecord && !isNaN(Number(item.selfRecord))) {\n              computedDate = item?.selfDate\n                ? new Date(item.selfDate).toLocaleDateString()\n                : \"N/A\";\n            }\n\n            return (\n              <div className={depositStyles.depositListBodyRow} key={idx}>\n                {/* ID */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.id || \"N/A\"}\n                  </Link>\n                </div>\n                {/* 거래일시 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.transactionDateTime\n                      ? new Date(item.transactionDateTime).toLocaleString()\n                      : \"N/A\"}\n                  </Link>\n                </div>\n                {/* 적요 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.description || \"\"}\n                  </Link>\n                </div>\n                {/* 기재내용 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.details || \"\"}\n                  </Link>\n                </div>\n                {/* 계약자 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.contractor || \"N/A\"}\n                  </Link>\n                </div>\n                {/* 찾으신금액 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.withdrawnAmount\n                      ? item.withdrawnAmount.toLocaleString()\n                      : \"0\"}\n                  </Link>\n                </div>\n                {/* 맡기신금액 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.depositAmount\n                      ? item.depositAmount.toLocaleString()\n                      : \"0\"}\n                  </Link>\n                </div>\n                {/* 거래 후 잔액 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.balanceAfter\n                      ? item.balanceAfter.toLocaleString()\n                      : \"0\"}\n                  </Link>\n                </div>\n                {/* 취급점 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.branch || \"\"}\n                  </Link>\n                </div>\n                {/* 계좌 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.account || \"\"}\n                  </Link>\n                </div>\n                {/* 1차 ~ 10차 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.depositPhase1 || \"\"}\n                  </Link>\n                </div>\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.depositPhase2 || \"\"}\n                  </Link>\n                </div>\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.depositPhase3 || \"\"}\n                  </Link>\n                </div>\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.depositPhase4 || \"\"}\n                  </Link>\n                </div>\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.depositPhase5 || \"\"}\n                  </Link>\n                </div>\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.depositPhase6 || \"\"}\n                  </Link>\n                </div>\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.depositPhase7 || \"\"}\n                  </Link>\n                </div>\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.depositPhase8 || \"\"}\n                  </Link>\n                </div>\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.depositPhase9 || \"\"}\n                  </Link>\n                </div>\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.depositPhase10 || \"\"}\n                  </Link>\n                </div>\n                {/* 대출 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.loanRecord || \"\"}\n                  </Link>\n                </div>\n                {/* 자납 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.selfRecord || \"\"}\n                  </Link>\n                </div>\n                {/* 일자 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {computedDate}\n                  </Link>\n                </div>\n                {/* 비고 */}\n                <div className={depositStyles.depositListBodyCell}>\n                  <Link href=\"#\" className={depositStyles.link}>\n                    {item.remarks || \"\"}\n                  </Link>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DepositList;\n"
            }
        }
    },
    "img": {
        "__files__": {
            "Bag.png": null,
            "BottonIcon.png": null,
            "Button.module.scss": null,
            "calendar.png": null,
            "dash1.png": null,
            "dash2.png": null,
            "dash3.png": null,
            "dash4.png": null,
            "logo.png": null,
            "logo.svg": null,
            "money.png": null,
            "profile.png": null,
            "up.png": null,
            "User.png": null
        }
    },
    "styles": {
        "__files__": {
            "chasu.module.scss": null,
            "chasupay.module.scss": null,
            "ConfirmationModal.module.scss": null,
            "Create.module.scss": null,
            "Dashboard.module.scss": null,
            "Deposit.module.scss": null,
            "DepositAdd.module.scss": null,
            "Header.module.scss": null,
            "Home.module.scss": null,
            "Inputbox.module.scss": null,
            "Inputclient.module.scss": null,
            "Inputmoney.module.scss": null,
            "Inputmoneycancle.module.scss": null,
            "Inputmoneyloan.module.scss": null,
            "Inputmoneypay.module.scss": null,
            "Inputmoneysearch.module.scss": null,
            "Latefees.module.scss": null,
            "Leaninfo.module.scss": null,
            "Login.module.scss": null,
            "Mininav.module.scss": null,
            "Nav.module.scss": null,
            "Payinfo.module.scss": null,
            "Search.module.scss": null,
            "Signup.module.scss": null,
            "Test.module.scss": null,
            "Userinfo.module.scss": null
        }
    },
    "utils": {
        "__files__": {
            "api.js": "// src/utils/api.js\nimport axios from \"axios\";\n\nconst path = \"http://localhost:8080\";\n//const path = \"http://3.38.181.18:8080\";\n\n// 고객 추가 페이지 새로운 아이디 받아오기\nexport const newIdGenerate = () => {\n  return axios\n    .get(`${path}/customers/nextId`)\n    .then((result) => result.data)\n    .catch((error) => {\n      console.error(error);\n      throw error;\n    });\n};\n\n// 파일 업로드 (파일명 변경 포함)\nexport const createFile = (file, custId) => {\n  const formData = new FormData();\n  const originalName = file.name;\n  const extension = originalName.split(\".\").pop();\n  const baseName = originalName.substring(0, originalName.lastIndexOf(\".\"));\n  const newFileName = `${custId}_${baseName}.${extension}`;\n  formData.append(\"file\", file, newFileName);\n  return axios.post(`${path}/files/upload`, formData, {\n    headers: { \"Content-Type\": \"multipart/form-data\" },\n  });\n};\n\nexport const downloadFile = async (id, filename) => {\n  try {\n    const response = await axios.get(`${path}/files/download`, {\n      params: { id, filename },\n      responseType: \"blob\",\n    });\n    const disposition = response.headers[\"content-disposition\"];\n    let fileName = \"downloaded_file\";\n    if (disposition && disposition.indexOf(\"filename=\") !== -1) {\n      const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n      const matches = filenameRegex.exec(disposition);\n      if (matches != null && matches[1]) {\n        fileName = matches[1].replace(/['\"]/g, \"\");\n      }\n    }\n    const blob = new Blob([response.data], {\n      type: response.headers[\"content-type\"],\n    });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", fileName);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error(\"Error downloading file:\", error);\n    throw error;\n  }\n};\n\n// 고객 생성\nexport const createUser = (data) => {\n  return axios.post(`${path}/customers`, data);\n};\n\n// 고객 검색\nexport const fetchCustomers = (params) => {\n  return axios\n    .get(`${path}/customers/search`, { params })\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"Error fetching customers:\", error);\n      throw error;\n    });\n};\n\n// 고객 삭제\nexport const deleteCustomer = (id) => {\n  return axios\n    .delete(`${path}/customers/${id}`)\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"Error deleting customer:\", error);\n      throw error;\n    });\n};\n\n// 고객 상세 조회\nexport const fetchCustomerById = (id) => {\n  return axios\n    .get(`${path}/customers/${id}`)\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"Error fetching customer:\", error);\n      throw error;\n    });\n};\n\n// 납부 전 차수 데이터 조회\nexport const fetchPendingPhases = async (userId) => {\n  try {\n    const response = await axios.get(\n      `${path}/customers/${userId}/pending-phases`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching pending phases:\", error);\n    throw error;\n  }\n};\n\n// 납부 후 차수 데이터 조회\nexport const fetchCompletedPhases = async (userId) => {\n  try {\n    const response = await axios.get(\n      `${path}/customers/${userId}/completed-phases`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching completed phases:\", error);\n    throw error;\n  }\n};\n\n// 특정 차수 데이터 조회\nexport const fetchPhaseData = (userid, chasu) => {\n  return axios\n    .get(`${path}/customers/${userid}/phases`)\n    .then((result) => {\n      const phases = result.data;\n      const phase = phases.find((p) => p.phaseNumber === parseInt(chasu, 10));\n      return phase;\n    })\n    .catch((error) => {\n      console.error(\"Error fetching phase data:\", error);\n      throw error;\n    });\n};\n\n// 특정 차수 데이터 업데이트\nexport const updatePhaseData = (phaseId, data) => {\n  return axios\n    .put(`${path}/phases/${phaseId}`, data)\n    .then((result) => result.data)\n    .catch((error) => {\n      console.error(\"Error updating phase data:\", error);\n      throw error;\n    });\n};\n\n// 특정 차수 데이터 업데이트 (콜백 사용)\nexport const updatePhaseDataWithCallback = (phaseId, data, callback) => {\n  axios\n    .put(`${path}/phases/${phaseId}`, data)\n    .then(() => {\n      callback();\n    })\n    .catch((error) => {\n      console.error(\"Error updating phase data:\", error);\n    });\n};\n\n// 고객 Loan 데이터 조회\nexport const fetchLoanInit = (userid) => {\n  return axios\n    .get(`${path}/customers/${userid}/loan`)\n    .then((result) => result.data)\n    .catch((error) => {\n      console.error(\"Error fetching loan data:\", error);\n      throw error;\n    });\n};\n\n// 고객 Loan 데이터 업데이트\nexport const fetchLoanUpdate = (userid, data, callback) => {\n  axios\n    .put(`${path}/customers/${userid}/loan`, data)\n    .then(() => {\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error updating loan data:\", error);\n    });\n};\n\n// 매니저 로그인\nexport const fetchLogin = (username, password) => {\n  return axios.post(`${path}/api/auth/signin`, {\n    username,\n    password,\n  });\n};\n\n// 매니저 회원가입\nexport const fetchSignup = (username, email, password, roles) => {\n  return axios.post(`${path}/api/auth/signup`, {\n    username,\n    email,\n    password,\n    roles,\n  });\n};\n\n// 고객 취소\nexport const cancelCustomer = (id) => {\n  return axios\n    .put(`${path}/customers/${id}/cancel`)\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"Error cancelling customer:\", error);\n      throw error;\n    });\n};\n\n// 고객 정보 업데이트\nexport const updateUser = (id, data) => {\n  return axios\n    .put(`${path}/customers/${id}`, data)\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"Error updating user:\", error);\n      throw error;\n    });\n};\n\n// 연체료 조회\nexport const fetchLateFees = (name, number) => {\n  return axios\n    .get(`${path}/latefees`, {\n      params: {\n        name: name.length > 1 ? name : undefined,\n        number: number.length > 1 ? number : undefined,\n      },\n    })\n    .then((result) => result.data)\n    .catch((error) => {\n      console.error(\"Error fetching late fees:\", error);\n      throw error;\n    });\n};\n\n// 고객 ID 존재 여부 체크\nexport const checkIdExists = async (id) => {\n  try {\n    const response = await axios.get(`${path}/customers/${id}`);\n    return !!response.data;\n  } catch (error) {\n    if (error.response && error.response.status === 404) {\n      return false;\n    }\n    throw error;\n  }\n};\n\n// 파일 삭제\nexport const deleteFile = (filename) => {\n  return axios\n    .delete(`${path}/files/delete`, { params: { filename } })\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"파일 삭제 오류:\", error);\n      throw error;\n    });\n};\n\n// 정계약 고객 수 조회\nexport const fetchContractedCustomers = async () => {\n  try {\n    const response = await axios.get(`${path}/customers/count/contracted`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching contracted customers count:\", error);\n    throw error;\n  }\n};\n\n// 완납 또는 연체 없는 고객 수 조회\nexport const fetchFullyPaidCustomers = async () => {\n  try {\n    const response = await axios.get(`${path}/customers/count/fullypaid`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching fully paid customers count:\", error);\n    throw error;\n  }\n};\n\n// format1 다운로드\nexport const downloadFormat1 = async (id) => {\n  try {\n    const response = await axios.get(`${path}/files/format1/${id}`, {\n      responseType: \"blob\",\n    });\n    let fileName = \"일반신청서.xlsx\";\n    const disposition = response.headers[\"content-disposition\"];\n    if (disposition && disposition.indexOf(\"filename=\") !== -1) {\n      const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n      const matches = filenameRegex.exec(disposition);\n      if (matches != null && matches[1]) {\n        fileName = matches[1].replace(/['\"]/g, \"\");\n      }\n    }\n    const blob = new Blob([response.data], {\n      type: response.headers[\"content-type\"],\n    });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", fileName);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error(\"Error downloading format1:\", error);\n    throw error;\n  }\n};\n\n// format2 다운로드\nexport const downloadFormat2 = async (id) => {\n  try {\n    const response = await axios.get(`${path}/files/format2/${id}`, {\n      responseType: \"blob\",\n    });\n    let fileName = \"일반부속서류.xlsx\";\n    const disposition = response.headers[\"content-disposition\"];\n    if (disposition && disposition.indexOf(\"filename=\") !== -1) {\n      const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n      const matches = filenameRegex.exec(disposition);\n      if (matches != null && matches[1]) {\n        fileName = matches[1].replace(/['\"]/g, \"\");\n      }\n    }\n    const blob = new Blob([response.data], {\n      type: response.headers[\"content-type\"],\n    });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", fileName);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error(\"Error downloading format2:\", error);\n    throw error;\n  }\n};\n\n// ================ Deposit 관련 API ================ //\n\n// **추가**: 모든 고객의 입금내역(DepositList DTO) 전체를 조회하는 함수\nexport const fetchDepositList = async () => {\n  try {\n    const response = await axios.get(`${path}/depositlist`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching deposit list:\", error);\n    throw error;\n  }\n};\n\n// 고객의 전체 입금내역 조회 (GET /deposit/customer/{userId})\nexport const fetchDepositHistoriesByCustomerId = async (userId) => {\n  try {\n    const response = await axios.get(`${path}/deposit/customer/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching deposit histories:\", error);\n    throw error;\n  }\n};\n\n// 단일 입금내역 조회 (GET /deposit/{id})\nexport const fetchDepositHistory = async (depositId) => {\n  try {\n    const response = await axios.get(`${path}/deposit/${depositId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching deposit history:\", error);\n    throw error;\n  }\n};\n\n// 입금내역 생성 (POST /deposit)\nexport const createDepositHistory = async (data) => {\n  try {\n    const response = await axios.post(`${path}/deposit`, data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating deposit history:\", error);\n    throw error;\n  }\n};\n\n// 입금내역 수정 (PUT /deposit/{id})\nexport const updateDepositHistory = async (depositId, data) => {\n  try {\n    const response = await axios.put(`${path}/deposit/${depositId}`, data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating deposit history:\", error);\n    throw error;\n  }\n};\n\n// 입금내역 삭제 (DELETE /deposit/{id})\nexport const deleteDepositHistory = async (depositId) => {\n  try {\n    const response = await axios.delete(`${path}/deposit/${depositId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error deleting deposit history:\", error);\n    throw error;\n  }\n};\n\n// JWT 토큰 포함 요청을 위한 Axios 인터셉터 설정\naxios.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// 특정 차수 데이터 부분 업데이트 (부담금, 업무대행비, 할인액, 면제액, 이동만)\nexport const updatePhaseDataPartial = (customerId, phaseNumber, data) => {\n  return axios\n    .put(\n      `${path}/phases/customer/${customerId}/phase/${phaseNumber}/modify`,\n      data\n    )\n    .then((result) => result.data)\n    .catch((error) => {\n      console.error(\"Error updating phase partial data:\", error);\n      throw error;\n    });\n};\n\nexport async function uploadExcelFileWithProgress(\n  file,\n  onProgress,\n  onComplete,\n  onError\n) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n\n  // 백엔드 URL (직접 상수 혹은 env 등)\n  const backendUrl = `${path}/files/uploadExcelWithProgress`;\n\n  // fetch로 POST\n  const response = await fetch(backendUrl, {\n    method: \"POST\",\n    headers: {\n      // SSE 스트림을 받기 위해 Accept 헤더 설정\n      Accept: \"text/event-stream\",\n    },\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error(\"서버 응답 에러: \" + response.statusText);\n  }\n\n  // 스트림(body)이 없으면 에러\n  if (!response.body) {\n    throw new Error(\"ReadableStream을 가져올 수 없습니다\");\n  }\n\n  // 스트림 → reader\n  const reader = response.body.getReader();\n  const decoder = new TextDecoder(\"utf-8\");\n\n  let buffer = \"\";\n  let currentEvent = \"\";\n\n  // 무한 루프: chunk 단위로 SSE 처리\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break;\n\n    // chunk → 문자열\n    buffer += decoder.decode(value, { stream: true });\n\n    // SSE는 \\n\\n 로 이벤트 경계, 우선 줄 단위로 split\n    const lines = buffer.split(/\\r?\\n/);\n\n    // 마지막 줄 전까지 파싱\n    for (let i = 0; i < lines.length - 1; i++) {\n      const line = lines[i].trim();\n\n      if (!line) {\n        // 빈 줄 == 이벤트 구분\n        currentEvent = \"\";\n        continue;\n      }\n\n      if (line.startsWith(\"event:\")) {\n        currentEvent = line.slice(\"event:\".length).trim();\n      } else if (line.startsWith(\"data:\")) {\n        const data = line.slice(\"data:\".length).trim();\n        // 이벤트별 처리\n        if (currentEvent === \"progress\" && onProgress) {\n          onProgress(data); // 예: \"3/30\"\n        } else if (currentEvent === \"complete\" && onComplete) {\n          onComplete(data); // 예: \"Parsing complete\"\n        } else if (currentEvent === \"error\" && onError) {\n          onError(data); // 예: \"Some error occurred\"\n        }\n      }\n    }\n    // 마지막 줄 남김\n    buffer = lines[lines.length - 1];\n  }\n\n  // 남은 부분 처리\n  if (buffer) {\n    const line = buffer.trim();\n    if (line.startsWith(\"event:\")) {\n      currentEvent = line.slice(\"event:\".length).trim();\n    } else if (line.startsWith(\"data:\")) {\n      const data = line.slice(\"data:\".length).trim();\n      if (currentEvent === \"progress\" && onProgress) {\n        onProgress(data);\n      } else if (currentEvent === \"complete\" && onComplete) {\n        onComplete(data);\n      } else if (currentEvent === \"error\" && onError) {\n        onError(data);\n      }\n    }\n  }\n}\n\n// SSE 엔드포인트를 통해 진행 상황과 최종 fileId를 받고, 그 후 실제 파일 다운로드 요청을 하는 함수\nexport const downloadRegFile = async (onProgress, onComplete, onError) => {\n  try {\n    const eventSource = new EventSource(\n      `${path}/files/regfiledownload/progress`\n    );\n\n    eventSource.addEventListener(\"progress\", (event) => {\n      if (onProgress) {\n        onProgress(event.data); // 예: \"3/48\"\n      }\n    });\n\n    eventSource.addEventListener(\"complete\", async (event) => {\n      // complete 이벤트 데이터에는 fileId가 들어있음\n      const fileId = event.data;\n      try {\n        const response = await axios.get(\n          `${path}/files/regfiledownload/file?fileId=${fileId}`,\n          {\n            responseType: \"blob\",\n          }\n        );\n        const disposition = response.headers[\"content-disposition\"];\n        let fileName = \"regfile_download.xlsx\";\n        if (disposition && disposition.indexOf(\"filename=\") !== -1) {\n          const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n          const matches = filenameRegex.exec(disposition);\n          if (matches != null && matches[1]) {\n            fileName = matches[1].replace(/['\"]/g, \"\");\n          }\n        }\n        const blob = new Blob([response.data], {\n          type: response.headers[\"content-type\"],\n        });\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", fileName);\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n        window.URL.revokeObjectURL(url);\n        if (onComplete) {\n          onComplete(fileName);\n        }\n      } catch (downloadError) {\n        if (onError) {\n          onError(downloadError);\n        }\n      } finally {\n        eventSource.close();\n      }\n    });\n\n    eventSource.addEventListener(\"error\", (event) => {\n      if (onError) {\n        onError(\"SSE 연결 중 오류가 발생했습니다.\");\n      }\n      eventSource.close();\n    });\n  } catch (error) {\n    if (onError) {\n      onError(error);\n    }\n  }\n};\n\nexport async function uploadDepositHistoryExcelWithProgress(\n  file,\n  onProgress,\n  onComplete,\n  onError\n) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  // 입금 기록 업로드 백엔드 URL\n  const backendUrl = `${path}/api/deposithistory/excel/upload`;\n\n  const response = await fetch(backendUrl, {\n    method: \"POST\",\n    headers: {\n      Accept: \"text/event-stream\",\n    },\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error(\"서버 응답 에러: \" + response.statusText);\n  }\n  if (!response.body) {\n    throw new Error(\"ReadableStream을 가져올 수 없습니다\");\n  }\n\n  const reader = response.body.getReader();\n  const decoder = new TextDecoder(\"utf-8\");\n  let buffer = \"\";\n  let currentEvent = \"\";\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break;\n    buffer += decoder.decode(value, { stream: true });\n    const lines = buffer.split(/\\r?\\n/);\n    for (let i = 0; i < lines.length - 1; i++) {\n      const line = lines[i].trim();\n      if (!line) {\n        currentEvent = \"\";\n        continue;\n      }\n      if (line.startsWith(\"event:\")) {\n        currentEvent = line.slice(\"event:\".length).trim();\n      } else if (line.startsWith(\"data:\")) {\n        const data = line.slice(\"data:\".length).trim();\n        if (currentEvent === \"progress\" && onProgress) {\n          onProgress(data);\n        } else if (currentEvent === \"complete\" && onComplete) {\n          onComplete(data);\n        } else if (currentEvent === \"error\" && onError) {\n          onError(data);\n        }\n      }\n    }\n    buffer = lines[lines.length - 1];\n  }\n  if (buffer) {\n    const line = buffer.trim();\n    if (line.startsWith(\"event:\")) {\n      currentEvent = line.slice(\"event:\".length).trim();\n    } else if (line.startsWith(\"data:\")) {\n      const data = line.slice(\"data:\".length).trim();\n      if (currentEvent === \"progress\" && onProgress) {\n        onProgress(data);\n      } else if (currentEvent === \"complete\" && onComplete) {\n        onComplete(data);\n      } else if (currentEvent === \"error\" && onError) {\n        onError(data);\n      }\n    }\n  }\n}\nexport const downloadDepositHistoryExcel = async (\n  onProgress,\n  onComplete,\n  onError\n) => {\n  try {\n    const eventSource = new EventSource(\n      `${path}/api/deposithistory/excel/download/progress`\n    );\n\n    eventSource.addEventListener(\"progress\", (event) => {\n      if (onProgress) {\n        onProgress(event.data); // 예: \"3/48\"\n      }\n    });\n\n    eventSource.addEventListener(\"complete\", async (event) => {\n      // complete 이벤트 데이터에는 fileId가 들어있음\n      const fileId = event.data;\n      try {\n        const response = await axios.get(\n          `${path}/api/deposithistory/excel/download/file?fileId=${fileId}`,\n          {\n            responseType: \"blob\",\n          }\n        );\n        const disposition = response.headers[\"content-disposition\"];\n        let fileName = \"deposit_histories.xlsx\";\n        if (disposition && disposition.indexOf(\"filename=\") !== -1) {\n          const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n          const matches = filenameRegex.exec(disposition);\n          if (matches != null && matches[1]) {\n            fileName = matches[1].replace(/['\"]/g, \"\");\n          }\n        }\n        const blob = new Blob([response.data], {\n          type: response.headers[\"content-type\"],\n        });\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", fileName);\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n        window.URL.revokeObjectURL(url);\n        if (onComplete) {\n          onComplete(fileName);\n        }\n      } catch (downloadError) {\n        if (onError) {\n          onError(downloadError);\n        }\n      } finally {\n        eventSource.close();\n      }\n    });\n\n    eventSource.addEventListener(\"error\", (event) => {\n      if (onError) {\n        onError(\"SSE 연결 중 오류가 발생했습니다.\");\n      }\n      eventSource.close();\n    });\n  } catch (error) {\n    if (onError) {\n      onError(error);\n    }\n  }\n};\n\nexport const registerLoan = async (loanData) => {\n  try {\n    const response = await axios.post(`${path}/api/loan/register`, loanData);\n    return response.data;\n  } catch (error) {\n    console.error(\"대출/자납 등록 오류:\", error);\n    throw error;\n  }\n};\n\nexport const getPhaseSummaries = async () => {\n  try {\n    const response = await axios.get(`${path}/deposit/phase-summary`);\n    return response.data; // 백엔드가 반환하는 데이터 배열\n  } catch (error) {\n    console.error(\"Error fetching phase summaries:\", error);\n    throw error;\n  }\n};\n\n\n// 환불 파일 업로드\nexport async function uploadRefundFileWithProgress(\n  file,\n  onProgress,\n  onComplete,\n  onError\n) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  const backendUrl = `${path}/api/refunds/excel/upload`;\n  const response = await fetch(backendUrl, {\n    method: \"POST\",\n    headers: { Accept: \"text/event-stream\" },\n    body: formData,\n  });\n  if (!response.ok) {\n    throw new Error(\"서버 응답 에러: \" + response.statusText);\n  }\n  if (!response.body) {\n    throw new Error(\"ReadableStream을 가져올 수 없습니다\");\n  }\n  const reader = response.body.getReader();\n  const decoder = new TextDecoder(\"utf-8\");\n  let buffer = \"\";\n  let currentEvent = \"\";\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break;\n    buffer += decoder.decode(value, { stream: true });\n    const lines = buffer.split(/\\r?\\n/);\n    for (let i = 0; i < lines.length - 1; i++) {\n      const line = lines[i].trim();\n      if (!line) {\n        currentEvent = \"\";\n        continue;\n      }\n      if (line.startsWith(\"event:\")) {\n        currentEvent = line.slice(\"event:\".length).trim();\n      } else if (line.startsWith(\"data:\")) {\n        const data = line.slice(\"data:\".length).trim();\n        if (currentEvent === \"progress\" && onProgress) onProgress(data);\n        else if (currentEvent === \"complete\" && onComplete) onComplete(data);\n        else if (currentEvent === \"error\" && onError) onError(data);\n      }\n    }\n    buffer = lines[lines.length - 1];\n  }\n  if (buffer) {\n    const line = buffer.trim();\n    if (line.startsWith(\"event:\")) {\n      currentEvent = line.slice(\"event:\".length).trim();\n    } else if (line.startsWith(\"data:\")) {\n      const data = line.slice(\"data:\".length).trim();\n      if (currentEvent === \"progress\" && onProgress) onProgress(data);\n      else if (currentEvent === \"complete\" && onComplete) onComplete(data);\n      else if (currentEvent === \"error\" && onError) onError(data);\n    }\n  }\n}\n\n// 환불 파일 다운로드\nexport const downloadRefundFile = async (onProgress, onComplete, onError) => {\n  try {\n    const eventSource = new EventSource(\n      `${path}/api/refunds/excel/download/progress`\n    );\n    eventSource.addEventListener(\"progress\", (event) => {\n      if (onProgress) onProgress(event.data);\n    });\n    eventSource.addEventListener(\"complete\", async (event) => {\n      const fileId = event.data;\n      try {\n        const response = await axios.get(\n          `${path}/api/refunds/excel/download/file?fileId=${fileId}`,\n          { responseType: \"blob\" }\n        );\n        const disposition = response.headers[\"content-disposition\"];\n        let fileName = \"refund_file.xlsx\";\n        if (disposition && disposition.indexOf(\"filename=\") !== -1) {\n          const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n          const matches = filenameRegex.exec(disposition);\n          if (matches != null && matches[1]) {\n            fileName = matches[1].replace(/['\"]/g, \"\");\n          }\n        }\n        const blob = new Blob([response.data], {\n          type: response.headers[\"content-type\"],\n        });\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", fileName);\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n        window.URL.revokeObjectURL(url);\n        if (onComplete) onComplete(fileName);\n      } catch (downloadError) {\n        if (onError) onError(downloadError);\n      } finally {\n        eventSource.close();\n      }\n    });\n    eventSource.addEventListener(\"error\", (event) => {\n      if (onError) onError(\"SSE 연결 중 오류가 발생했습니다.\");\n      eventSource.close();\n    });\n  } catch (error) {\n    if (onError) onError(error);\n  }\n};\n\n\n// 전체 공지사항 목록 조회\nexport const fetchNotices = async () => {\n  try {\n    const response = await axios.get(`${path}/api/notices`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching notices:\", error);\n    throw error;\n  }\n};\n\n// 특정 공지사항 상세 조회\nexport const fetchNoticeDetail = async (id) => {\n  try {\n    const response = await axios.get(`${path}/api/notices/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching notice detail:\", error);\n    throw error;\n  }\n};\n\nexport const createNotice = async (noticeData) => {\n  try {\n    const response = await axios.post(`${path}/api/notices`, noticeData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating notice:\", error);\n    throw error;\n  }\n};",
            "atom.js": "import { atom } from \"recoil\";\n\nexport const userinfoState = atom({\n    key: 'userinfoState',\n    default: null,\n});\n\nexport const useridState = atom({\n    key: 'useridState',\n    default: null,\n})\n\nexport const searchnameState = atom({\n    key: 'searchnameState',\n    default: \"\",\n})\n\nexport const searchnumberState = atom({\n    key: 'searchnumberState',\n    default: \"\",\n});\n\nexport const searchtypeState = atom({\n    key: 'searchtypeState',\n    default: null,\n});\n\nexport const usernewState = atom ({\n    key: 'usernewState',\n    default: null\n})\n\nexport const chasuState = atom ({\n    key: 'chasuState',\n    default: null\n})\n",
            "categoryMapping.js": "// src/utils/categoryMapping.js\n\nconst categoryMapping = {\n    1: \"정계약\",\n    c: \"청약\",\n    j: \"정계약\",\n    r: \"변경\",\n    x: \"해지\",\n    x1: \"해지\",\n    p: \"업대\",\n    p1: \"업대\",\n    t: \"창준위\",\n    t1: \"창준위\",\n    g: \"지주\",\n  };\n  \n  export default categoryMapping;\n  ",
            "formatNumber.js": "// utils/formatNumber.js\nexport function formatNumberWithCommas(value) {\n    if (!value) return '';\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n  \n  export function removeCommas(value) {\n    if (!value) return '';\n    return value.toString().replace(/,/g, '');\n  }\n  ",
            "selector.js": "import { selector } from \"recoil\";\nimport { fetchNameSearch, fetchNumberSearch, fetchT, fetchUserinfo, fetchLoanInit, fetchChasuData, fetchCustomers, fetchCustomerById, fetchPhaseData } from \"./api\";\nimport { searchnameState, searchnumberState, useridState, searchtypeState, chasuState } from \"./atom\";\n\n//유저 검색\nexport const userinfoSelector = selector({ \n  key: \"userinfoSelector\",\n  get: async ({ get }) => {\n    const userid = get(useridState);\n    if (!userid) {\n      return null;\n    }\n    try {\n      const data = await fetchCustomerById(userid);\n      return data;\n    } catch (error) {\n      console.error(\"userinfoSelector 오류:\", error);\n      throw error;\n    }\n  },\n});\n//유저 검색2\nexport const namesearchSelector = selector({\n  key: 'namesearchSelector',\n  get: async ({ get }) => {\n    const username = get(searchnameState);\n    const usernumber = get(searchnumberState);\n\n    try {\n      const params = {};\n      if (username) params.name = username;\n      if (usernumber) params.number = usernumber;\n\n      const data = await fetchCustomers(params);\n      return data;\n    } catch (error) {\n      console.error('namesearchSelector 오류:', error);\n      throw error;\n    }\n  },\n});\n\n\n/**\n * 사용자 대출 정보 셀렉터\n */\nexport const usermoneySelector = selector({\n  key: 'usermoneySelector',\n  get: async ({ get }) => {\n    const userid = get(useridState);\n    if (userid) {\n      try {\n        const data = await fetchLoanInit(userid);\n        return data;\n      } catch (error) {\n        console.error('Error fetching loan data: ', error);\n        throw error;\n      }\n    }\n    return null;\n  }\n});\n\n\n/**\n * 사용자 차수(Phase) 정보 셀렉터\n */\nexport const userchasuSelector = selector({\n  key: 'userchasuSelector',\n  get: async ({ get }) => {\n    const userid = get(useridState);\n    const chasu = get(chasuState);\n    if (userid && chasu) {\n      try {\n        const phase = await fetchPhaseData(userid, chasu);\n        return phase;\n      } catch (error) {\n        console.error('Error fetching phase data:', error);\n        throw error;\n      }\n    }\n    return null;\n  }\n\n  \n});\n//=======================================================================================\n\n\n\n"
        },
        "context": {
            "__files__": {
                "AuthContext.js": "'use client'\nimport React, { createContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState('');\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('username');\n    if (token) {\n      setIsLoggedIn(true);\n      setUsername(user);\n    }\n  }, []);\n\n  const login = (username, token) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('username', username);\n    setIsLoggedIn(true);\n    setUsername(username);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    setIsLoggedIn(false);\n    setUsername('');\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, username, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"
            }
        },
        "feeupload": {
            "__files__": {
                "data.xlsx": null,
                "feeupload.py": null
            }
        },
        "hoc": {
            "__files__": {
                "withAuth.js": "// 'hoc/withAuth.js'\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\nconst withAuth = (WrappedComponent) => {\n  return (props) => {\n    const router = useRouter();\n\n    useEffect(() => {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        router.push(\"/login\");\n      }\n    }, []);\n\n    return <WrappedComponent {...props} />;\n  };\n};\n\nexport default withAuth;\n"
            }
        }
    }
}